package ima_forVERDICT
public
		system Voter
		features
			in1: in data port;
			in2: in data port;
			in3: in data port;
			out1: out data port;
		annex verdict {**
			Event {
				id = "loa_event1"
				probability = 1.0e-5
				comment = "loss of availability of the Voter"
				description = "VoterLOA"
			}
			SafetyRel {
				id = "my_safety_relation_01"
				faultSrc = happens("loa_event1") or (in1:A and in2:A) or (in1:A and in3:A) or (in2:A and in3:A)
				output = out1:I
				}
			Event {
				id = "ued_event2"
				probability = 1.0e-6
				comment = "undetected erroneous data from the Voter"
				description = "VoterUED"
			}
			SafetyRel {
				id = "my_safety_relation_02"
				faultSrc = happens("ued_event2") or in1:I or in2:I or in3:I
				output = out1:I
				}
			CyberRel {
				id = "my_cyber_relation_03"
				output = out1:I
				inputs = in1:I or in2:I or in3:I
			}
			CyberRel {
				id = "my_cyber_relation_04"
				output = out1:A
				inputs = in1:A or in2:A or in3:A
			}
		**};			
	end Voter;

	system IRU
		features
			in1: in data port;
			out1: out data port;
		annex verdict {**
			Event {
				id = "loa_event"
				probability = 3.0e-5
				comment = "loss of availability of the Voter"
				description = "VoterLOA"
			}
			Event {
				id = "ued_event"
				probability = 4.0e-4
				comment = "loss of availability of the Voter"
				description = "VoterLOA"
			}		
			
			
			SafetyRel "failed" = happens("loa_event") and in1:A => out1:A;
			SafetyRel "erroneous" = happens("ued_event") or in1:I => out1:I; 
			CyberRel "my_cyber_relation_01" => out1:I
			CyberRel "my_cyber_relation_02" => out1:A
		**};
	end IRU;

	system SampleIMA
		features
			out1: out data port;
		annex verdict {**
			SafetyReq {
				id = "my_safety_requirement01" 
				condition = out1:A
				}
			SafetyReq {
				id = "my_safety_requirement02" 
				condition = out1:I
				}	
	    	CyberReq {
	    		id = "1_1"
	    		description = "some text description of the requirement"
	    		condition = out1:A or out1:I
	    		cia = I
	    		severity = Hazardous
	    		targetLikelihood = 1e-7
	    	}
		**};				
	end SampleIMA;

	system implementation SampleIMA.Impl
		subcomponents 
			voter: system Voter;
			iru1: system iru; 
			iru2: system iru; 
			iru3: system iru; 
		connections
			c1: port iru1.out1 -> voter.in1;
			c2: port iru2.out1 -> voter.in2;
			c3: port iru3.out1 -> voter.in3;
			c4: port voter.out1 -> out1;		
		
	end SampleIMA.Impl;
	
end ima_forVERDICT;