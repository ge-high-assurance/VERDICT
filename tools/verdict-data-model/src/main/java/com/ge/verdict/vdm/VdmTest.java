/* See LICENSE in project directory */
package com.ge.verdict.vdm;

import verdict.vdm.vdm_model.Model;

/** Define common utility methods for tests to use. */
public class VdmTest {

    /** Create a simple example of a Model for tests to use. */
    // public static Model createControlModel() {

    //     // Create type declarations
    //     TypeDeclaration plainRealDeclaration =
    //             TypeDeclaration.builder()
    //                     .withName("PLAIN_REAL")
    //                     .withDefinition()
    //                     .withPlainType(PlainType.REAL)
    //                     .end()
    //                     .build();
    //     TypeDeclaration plainBoolDeclaration =
    //             TypeDeclaration.builder()
    //                     .withName("PLAIN_BOOL")
    //                     .withDefinition()
    //                     .withPlainType(PlainType.BOOL)
    //                     .end()
    //                     .build();
    //     TypeDeclaration subrangeDeclaration =
    //             TypeDeclaration.builder()
    //                     .withName("SUBRANGE_INT")
    //                     .withDefinition()
    //                     .withSubrangeType()
    //                     .withType("int")
    //                     .withLowerBound("0")
    //                     .withUpperBound("1")
    //                     .end()
    //                     .end()
    //                     .build();
    //     TypeDeclaration plainIntDeclaration =
    //             TypeDeclaration.builder()
    //                     .withName("PLAIN_INT")
    //                     .withDefinition()
    //                     .withPlainType(PlainType.INT)
    //                     .end()
    //                     .build();
    //     TypeDeclaration arrayDeclaration =
    //             TypeDeclaration.builder()
    //                     .withName("ARRAY_INT")
    //                     .withDefinition()
    //                     .withArrayType()
    //                     .withDimension("3")
    //                     .withDataType()
    //                     .withPlainType(PlainType.INT)
    //                     .end()
    //                     .end()
    //                     .end()
    //                     .build();
    //     TypeDeclaration tupleDeclaration =
    //             TypeDeclaration.builder()
    //                     .withName("TUPLE")
    //                     .withDefinition()
    //                     .withTupleType()
    //                     .addDataType()
    //                     .withPlainType(PlainType.INT)
    //                     .end()
    //                     .addDataType()
    //                     .withPlainType(PlainType.BOOL)
    //                     .end()
    //                     .end()
    //                     .end()
    //                     .build();
    //     TypeDeclaration enumDeclaration =
    //             TypeDeclaration.builder()
    //                     .withName("ENUM_DIR")
    //                     .withDefinition()
    //                     .withEnumType()
    //                     .withEnumValue("NORTH", "SOUTH", "EAST", "WEST")
    //                     .end()
    //                     .end()
    //                     .build();
    //     TypeDeclaration recordDeclaration =
    //             TypeDeclaration.builder()
    //                     .withName("POSITION")
    //                     .withDefinition()
    //                     .withRecordType()
    //                     .addRecordField()
    //                     .withName("x")
    //                     .withType()
    //                     .withPlainType(PlainType.INT)
    //                     .end()
    //                     .end()
    //                     .addRecordField()
    //                     .withName("y")
    //                     .withType()
    //                     .withPlainType(PlainType.INT)
    //                     .end()
    //                     .end()
    //                     .end()
    //                     .end()
    //                     .build();

    //     // Create constant declarations
    //     ConstantDeclaration constIntDeclaration =
    //             ConstantDeclaration.builder()
    //                     .withName("CONST_INT")
    //                     .withDataType()
    //                     .withPlainType(PlainType.INT)
    //                     .end()
    //                     .withDefinition()
    //                     .withIntLiteral(BigInteger.TEN)
    //                     .end()
    //                     .build();
    //     ConstantDeclaration constRealDeclaration =
    //             ConstantDeclaration.builder()
    //                     .withName("CONST_REAL")
    //                     .withDataType()
    //                     .withPlainType(PlainType.REAL)
    //                     .end()
    //                     .withDefinition()
    //                     .withRealLiteral(new BigDecimal("0.0"))
    //                     .end()
    //                     .build();
    //     ConstantDeclaration constBoolDeclaration =
    //             ConstantDeclaration.builder()
    //                     .withName("CONST_BOOL")
    //                     .withDataType()
    //                     .withPlainType(PlainType.BOOL)
    //                     .end()
    //                     .withDefinition()
    //                     .withBoolLiteral(Boolean.TRUE)
    //                     .end()
    //                     .build();
    //     ConstantDeclaration constLaunchDirDeclaration =
    //             ConstantDeclaration.builder()
    //                     .withName("LAUNCH_DIR")
    //                     .withDataType()
    //                     .withUserDefinedType("ENUM_DIR")
    //                     .end()
    //                     .withDefinition()
    //                     .withIdentifier("NORTH")
    //                     .end()
    //                     .build();
    //     ConstantDeclaration constReturnDirDeclaration =
    //             ConstantDeclaration.builder()
    //                     .withName("RETURN_DIR")
    //                     .withDefinition()
    //                     .withIdentifier("WEST")
    //                     .end()
    //                     .build();
    //     ConstantDeclaration constRecordDeclaration =
    //             ConstantDeclaration.builder()
    //                     .withName("LAUNCH_POS")
    //                     .withDefinition()
    //                     .withRecordLiteral()
    //                     .withRecordType("POSITION")
    //                     .addFieldDefinition()
    //                     .withFieldIdentifier("x")
    //                     .withFieldValue()
    //                     .withIntLiteral(BigInteger.ZERO)
    //                     .end()
    //                     .end()
    //                     .addFieldDefinition()
    //                     .withFieldIdentifier("y")
    //                     .withFieldValue()
    //                     .withIntLiteral(BigInteger.ZERO)
    //                     .end()
    //                     .end()
    //                     .end()
    //                     .end()
    //                     .build();
    //     ConstantDeclaration constExprDeclaration =
    //             ConstantDeclaration.builder()
    //                     .withName("CONST_EXPR")
    //                     // =
    //                     .withDefinition()
    //                     // (
    //                     .withExpressionList()
    //                     // int(1.5)
    //                     .addExpression()
    //                     .withToInt()
    //                     .withRealLiteral(new BigDecimal("1.5"))
    //                     .end()
    //                     .end()
    //                     // real(1)
    //                     .addExpression()
    //                     .withToReal()
    //                     .withIntLiteral(BigInteger.ONE)
    //                     .end()
    //                     .end()
    //                     // LAUNCH_POS.x
    //                     .addExpression()
    //                     .withRecordProjection()
    //                     .withRecordType("POSITION")
    //                     .withFieldId("x")
    //                     .withRecordReference()
    //                     .withIdentifier("LAUNCH_POS")
    //                     .end()
    //                     .end()
    //                     .end()
    //                     // 1 - 1
    //                     .addExpression()
    //                     .withMinus()
    //                     .withLhsOperand()
    //                     .withIntLiteral(BigInteger.ONE)
    //                     .end()
    //                     .withRhsOperand()
    //                     .withIntLiteral(BigInteger.ONE)
    //                     .end()
    //                     .end()
    //                     .end()
    //                     // -1
    //                     .addExpression()
    //                     .withNegative()
    //                     .withIntLiteral(BigInteger.ONE)
    //                     .end()
    //                     .end()
    //                     // 1 + 1
    //                     .addExpression()
    //                     .withPlus()
    //                     .withLhsOperand()
    //                     .withIntLiteral(BigInteger.ONE)
    //                     .end()
    //                     .withRhsOperand()
    //                     .withIntLiteral(BigInteger.ONE)
    //                     .end()
    //                     .end()
    //                     .end()
    //                     // 1 * 1
    //                     .addExpression()
    //                     .withTimes()
    //                     .withLhsOperand()
    //                     .withIntLiteral(BigInteger.ONE)
    //                     .end()
    //                     .withRhsOperand()
    //                     .withIntLiteral(BigInteger.ONE)
    //                     .end()
    //                     .end()
    //                     .end()
    //                     // 1 / 1
    //                     .addExpression()
    //                     .withDiv()
    //                     .withLhsOperand()
    //                     .withIntLiteral(BigInteger.ONE)
    //                     .end()
    //                     .withRhsOperand()
    //                     .withIntLiteral(BigInteger.ONE)
    //                     .end()
    //                     .end()
    //                     .end()
    //                     // 1 div 1
    //                     .addExpression()
    //                     .withIntDiv()
    //                     .withLhsOperand()
    //                     .withIntLiteral(BigInteger.ONE)
    //                     .end()
    //                     .withRhsOperand()
    //                     .withIntLiteral(BigInteger.ONE)
    //                     .end()
    //                     .end()
    //                     .end()
    //                     // 1 mod 1
    //                     .addExpression()
    //                     .withMod()
    //                     .withLhsOperand()
    //                     .withIntLiteral(BigInteger.ONE)
    //                     .end()
    //                     .withRhsOperand()
    //                     .withIntLiteral(BigInteger.ONE)
    //                     .end()
    //                     .end()
    //                     .end()
    //                     // not 1
    //                     .addExpression()
    //                     .withNot()
    //                     .withIntLiteral(BigInteger.ONE)
    //                     .end()
    //                     .end()
    //                     // 1 and 1
    //                     .addExpression()
    //                     .withAnd()
    //                     .withLhsOperand()
    //                     .withIntLiteral(BigInteger.ONE)
    //                     .end()
    //                     .withRhsOperand()
    //                     .withIntLiteral(BigInteger.ONE)
    //                     .end()
    //                     .end()
    //                     .end()
    //                     // 1 or 1
    //                     .addExpression()
    //                     .withOr()
    //                     .withLhsOperand()
    //                     .withIntLiteral(BigInteger.ONE)
    //                     .end()
    //                     .withRhsOperand()
    //                     .withIntLiteral(BigInteger.ONE)
    //                     .end()
    //                     .end()
    //                     .end()
    //                     // 1 xor 1
    //                     .addExpression()
    //                     .withXor()
    //                     .withLhsOperand()
    //                     .withIntLiteral(BigInteger.ONE)
    //                     .end()
    //                     .withRhsOperand()
    //                     .withIntLiteral(BigInteger.ONE)
    //                     .end()
    //                     .end()
    //                     .end()
    //                     // 1 => 1
    //                     .addExpression()
    //                     .withImplies()
    //                     .withLhsOperand()
    //                     .withIntLiteral(BigInteger.ONE)
    //                     .end()
    //                     .withRhsOperand()
    //                     .withIntLiteral(BigInteger.ONE)
    //                     .end()
    //                     .end()
    //                     .end()
    //                     // 1 < 1
    //                     .addExpression()
    //                     .withLessThan()
    //                     .withLhsOperand()
    //                     .withIntLiteral(BigInteger.ONE)
    //                     .end()
    //                     .withRhsOperand()
    //                     .withIntLiteral(BigInteger.ONE)
    //                     .end()
    //                     .end()
    //                     .end()
    //                     // 1 > 1
    //                     .addExpression()
    //                     .withGreaterThan()
    //                     .withLhsOperand()
    //                     .withIntLiteral(BigInteger.ONE)
    //                     .end()
    //                     .withRhsOperand()
    //                     .withIntLiteral(BigInteger.ONE)
    //                     .end()
    //                     .end()
    //                     .end()
    //                     // 1 <= 1
    //                     .addExpression()
    //                     .withLessThanOrEqualTo()
    //                     .withLhsOperand()
    //                     .withIntLiteral(BigInteger.ONE)
    //                     .end()
    //                     .withRhsOperand()
    //                     .withIntLiteral(BigInteger.ONE)
    //                     .end()
    //                     .end()
    //                     .end()
    //                     // 1 >= 1
    //                     .addExpression()
    //                     .withGreaterThanOrEqualTo()
    //                     .withLhsOperand()
    //                     .withIntLiteral(BigInteger.ONE)
    //                     .end()
    //                     .withRhsOperand()
    //                     .withIntLiteral(BigInteger.ONE)
    //                     .end()
    //                     .end()
    //                     .end()
    //                     // 1 = 1
    //                     .addExpression()
    //                     .withEqual()
    //                     .withLhsOperand()
    //                     .withIntLiteral(BigInteger.ONE)
    //                     .end()
    //                     .withRhsOperand()
    //                     .withIntLiteral(BigInteger.ONE)
    //                     .end()
    //                     .end()
    //                     .end()
    //                     // 1 <> 1
    //                     .addExpression()
    //                     .withNotEqual()
    //                     .withLhsOperand()
    //                     .withIntLiteral(BigInteger.ONE)
    //                     .end()
    //                     .withRhsOperand()
    //                     .withIntLiteral(BigInteger.ONE)
    //                     .end()
    //                     .end()
    //                     .end()
    //                     // if 1 then 1 else 1
    //                     .addExpression()
    //                     .withConditionalExpression()
    //                     .withCondition()
    //                     .withIntLiteral(BigInteger.ONE)
    //                     .end()
    //                     .withThenBranch()
    //                     .withIntLiteral(BigInteger.ONE)
    //                     .end()
    //                     .withElseBranch()
    //                     .withIntLiteral(BigInteger.ONE)
    //                     .end()
    //                     .end()
    //                     .end()
    //                     // 1 -> 1
    //                     .addExpression()
    //                     .withArrow()
    //                     .withLhsOperand()
    //                     .withIntLiteral(BigInteger.ONE)
    //                     .end()
    //                     .withRhsOperand()
    //                     .withIntLiteral(BigInteger.ONE)
    //                     .end()
    //                     .end()
    //                     .end()
    //                     // pre 1
    //                     .addExpression()
    //                     .withPre()
    //                     .withIntLiteral(BigInteger.ONE)
    //                     .end()
    //                     .end()
    //                     // call(1, 1)
    //                     .addExpression()
    //                     .withCall()
    //                     .withNodeId("call")
    //                     .addArgument()
    //                     .withIntLiteral(BigInteger.ONE)
    //                     .end()
    //                     .addArgument()
    //                     .withIntLiteral(BigInteger.ONE)
    //                     .end()
    //                     .end()
    //                     .end()
    //                     // )
    //                     .end()
    //                     .end()
    //                     .build();

    //     // Create contract declarations
    //     Contract specContractDeclaration =
    //             Contract.builder()
    //                     .withName("spec")
    //                     .addInputParameter()
    //                     .withName("altRequest")
    //                     .withDataType()
    //                     .withPlainType(PlainType.BOOL)
    //                     .end()
    //                     .end()
    //                     .addInputParameter()
    //                     .withName("deactivate")
    //                     .withDataType()
    //                     .withPlainType(PlainType.BOOL)
    //                     .end()
    //                     .end()
    //                     .addOutputParameter()
    //                     .withName("altEngaged")
    //                     .withDataType()
    //                     .withPlainType(PlainType.BOOL)
    //                     .end()
    //                     .end()
    //                     .addSpecification()
    //                     .addSymbol()
    //                     .withIsConstant(true)
    //                     .withName("a")
    //                     .withDefinition()
    //                     .withIntLiteral(BigInteger.ONE)
    //                     .end()
    //                     .end()
    //                     .addSymbol()
    //                     .withName("altRequested")
    //                     .withDataType()
    //                     .withPlainType(PlainType.BOOL)
    //                     .end()
    //                     .withDefinition()
    //                     .withCall()
    //                     .withNodeId("switch")
    //                     .addArgument()
    //                     .withIdentifier("altRequest")
    //                     .end()
    //                     .addArgument()
    //                     .withIdentifier("deactivate")
    //                     .end()
    //                     .end()
    //                     .end()
    //                     .end()
    //                     .addAssume()
    //                     .withExpression()
    //                     .withGreaterThanOrEqualTo()
    //                     .withLhsOperand()
    //                     .withIdentifier("a")
    //                     .end()
    //                     .withRhsOperand()
    //                     .withIntLiteral(BigInteger.ZERO)
    //                     .end()
    //                     .end()
    //                     .end()
    //                     .end()
    //                     .addGuarantee()
    //                     .withExpression()
    //                     .withNot()
    //                     .withIdentifier("altEngaged")
    //                     .end()
    //                     .end()
    //                     .end()
    //                     .addMode()
    //                     .withName("noAlt")
    //                     .addRequire()
    //                     .withExpression()
    //                     .withNot()
    //                     .withIdentifier("altRequested")
    //                     .end()
    //                     .end()
    //                     .end()
    //                     .addEnsure()
    //                     .withExpression()
    //                     .withNot()
    //                     .withIdentifier("altEngaged")
    //                     .end()
    //                     .end()
    //                     .end()
    //                     .end()
    //                     .end()
    //                     .build();

    //     // Create node declarations
    //     Node switchNodeDeclaration =
    //             Node.builder()
    //                     .withIsImported(true)
    //                     .withName("switch")
    //                     .addInputParameter()
    //                     .withName("on")
    //                     .withDataType()
    //                     .withPlainType(PlainType.BOOL)
    //                     .end()
    //                     .end()
    //                     .addInputParameter()
    //                     .withName("off")
    //                     .withDataType()
    //                     .withPlainType(PlainType.BOOL)
    //                     .end()
    //                     .end()
    //                     .addOutputParameter()
    //                     .withName("out")
    //                     .withDataType()
    //                     .withPlainType(PlainType.BOOL)
    //                     .end()
    //                     .end()
    //                     .build();
    //     Node mlNodeDeclaration =
    //             Node.builder()
    //                     .withName("ml")
    //                     .addInputParameter()
    //                     .withName("altRequest")
    //                     .withDataType()
    //                     .withPlainType(PlainType.BOOL)
    //                     .end()
    //                     .end()
    //                     .addInputParameter()
    //                     .withName("deactivate")
    //                     .withDataType()
    //                     .withPlainType(PlainType.BOOL)
    //                     .end()
    //                     .end()
    //                     .addOutputParameter()
    //                     .withName("altEngaged")
    //                     .withDataType()
    //                     .withPlainType(PlainType.BOOL)
    //                     .end()
    //                     .end()
    //                     .withContract()
    //                     .addImport()
    //                     .withContractId("spec")
    //                     .addInputArgument()
    //                     .withIdentifier("altRequest")
    //                     .end()
    //                     .addInputArgument()
    //                     .withIdentifier("deactivate")
    //                     .end()
    //                     .addOutputArgument()
    //                     .withIdentifier("altEngaged")
    //                     .end()
    //                     .end()
    //                     .end()
    //                     .withBody()
    //                     .addVariableDeclaration()
    //                     .withName("altRequested")
    //                     .withDataType()
    //                     .withPlainType(PlainType.BOOL)
    //                     .end()
    //                     .end()
    //                     .addEquation()
    //                     .withLhs()
    //                     .withIdentifier("altRequested")
    //                     .end()
    //                     .withRhs()
    //                     .withCall()
    //                     .withNodeId("switch")
    //                     .addArgument()
    //                     .withIdentifier("altRequest")
    //                     .end()
    //                     .addArgument()
    //                     .withIdentifier("deactivate")
    //                     .end()
    //                     .end()
    //                     .end()
    //                     .end()
    //                     .addEquation()
    //                     .withLhs()
    //                     .withIdentifier("altEngaged")
    //                     .end()
    //                     .withRhs()
    //                     .withIdentifier("altRequested")
    //                     .end()
    //                     .end()
    //                     .end()
    //                     .build();
    //     Node topNodeDeclaration =
    //             Node.builder()
    //                     .withName("top")
    //                     // inputs
    //                     .addInputParameter()
    //                     .withName("n")
    //                     .withDataType()
    //                     .withPlainType(PlainType.INT)
    //                     .end()
    //                     .end()
    //                     // outputs
    //                     .addOutputParameter()
    //                     .withName("out")
    //                     .withDataType()
    //                     .withPlainType(PlainType.BOOL)
    //                     .end()
    //                     .end()
    //                     // let
    //                     .withBody()
    //                     // var count : int
    //                     .addVariableDeclaration()
    //                     .withName("count")
    //                     .withDataType()
    //                     .withPlainType(PlainType.INT)
    //                     .end()
    //                     .end()
    //                     // assert n = (n -> pre (n))
    //                     .addAssertion()
    //                     .withEqual()
    //                     .withLhsOperand()
    //                     .withIdentifier("n")
    //                     .end()
    //                     .withRhsOperand()
    //                     .withExpressionList()
    //                     .addExpression()
    //                     .withArrow()
    //                     .withLhsOperand()
    //                     .withIdentifier("n")
    //                     .end()
    //                     .withRhsOperand()
    //                     .withPre()
    //                     .withExpressionList()
    //                     .addExpression()
    //                     .withIdentifier("n")
    //                     .end()
    //                     .end()
    //                     .end()
    //                     .end()
    //                     .end()
    //                     .end()
    //                     .end()
    //                     .end()
    //                     .end()
    //                     .end()
    //                     // count = 0 -> if (n < pre count) then pre count else pre count + 1
    //                     .addEquation()
    //                     .withLhs()
    //                     .addIdentifier("count")
    //                     .end()
    //                     .withRhs()
    //                     .withArrow()
    //                     .withLhsOperand()
    //                     .withIntLiteral(BigInteger.ZERO)
    //                     .end()
    //                     .withRhsOperand()
    //                     .withConditionalExpression()
    //                     .withCondition()
    //                     .withExpressionList()
    //                     .addExpression()
    //                     .withLessThan()
    //                     .withLhsOperand()
    //                     .withIdentifier("n")
    //                     .end()
    //                     .withRhsOperand()
    //                     .withPre()
    //                     .withIdentifier("count")
    //                     .end()
    //                     .end()
    //                     .end()
    //                     .end()
    //                     .end()
    //                     .end()
    //                     .withThenBranch()
    //                     .withPre()
    //                     .withIdentifier("count")
    //                     .end()
    //                     .end()
    //                     .withElseBranch()
    //                     .withPlus()
    //                     .withLhsOperand()
    //                     .withPre()
    //                     .withIdentifier("count")
    //                     .end()
    //                     .end()
    //                     .withRhsOperand()
    //                     .withIntLiteral(BigInteger.ONE)
    //                     .end()
    //                     .end()
    //                     .end()
    //                     .end()
    //                     .end()
    //                     .end()
    //                     .end()
    //                     .end()
    //                     // out = n < count
    //                     .addEquation()
    //                     .withLhs()
    //                     .addIdentifier("out")
    //                     .end()
    //                     .withRhs()
    //                     .withLessThan()
    //                     .withLhsOperand()
    //                     .withIdentifier("n")
    //                     .end()
    //                     .withRhsOperand()
    //                     .withIdentifier("count")
    //                     .end()
    //                     .end()
    //                     .end()
    //                     .end()
    //                     // tel
    //                     .end()
    //                     .build();

    //     // Create the program
    //     LustreProgram program =
    //             LustreProgram.builder()
    //                     .addTypeDeclaration(plainRealDeclaration)
    //                     .addTypeDeclaration(plainBoolDeclaration)
    //                     .addTypeDeclaration(subrangeDeclaration)
    //                     .addTypeDeclaration(plainIntDeclaration)
    //                     .addTypeDeclaration(arrayDeclaration)
    //                     .addTypeDeclaration(tupleDeclaration)
    //                     .addTypeDeclaration(enumDeclaration)
    //                     .addTypeDeclaration(recordDeclaration)
    //                     .addConstantDeclaration(constIntDeclaration)
    //                     .addConstantDeclaration(constRealDeclaration)
    //                     .addConstantDeclaration(constBoolDeclaration)
    //                     .addConstantDeclaration(constLaunchDirDeclaration)
    //                     .addConstantDeclaration(constReturnDirDeclaration)
    //                     .addConstantDeclaration(constRecordDeclaration)
    //                     .addConstantDeclaration(constExprDeclaration)
    //                     .addContractDeclaration(specContractDeclaration)
    //                     .addNodeDeclaration(switchNodeDeclaration)
    //                     .addNodeDeclaration(mlNodeDeclaration)
    //                     .addNodeDeclaration(topNodeDeclaration)
    //                     .build();

    //     // Create the model
    //     Model model =
    // Model.builder().withName("vdm-model.lus").withDataflowCode(program).build();

    //     return model;
    // }
    public static Model createControlModel() {
        // Uncomment old method when we can create builder classes again
        return null;
    }
}
