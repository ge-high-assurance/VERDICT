uri "http://sadl.org/STEM/Run" alias run.

import "http://sadl.org/STEM/STEMRules".
import "http://sadl.org/STEM/Queries".

// For debugging csv file importing, uncomment the line that writes out the log file in each of the template files.
//		In VM would need to also replace c:/tmp/ by /home/soteria/tmp/

// On the VM, the text in the node does not always fit inside the box though it fits inside on my desktop computer.
//		Note that the same file on VM that has text outside is fine on my desktop.
//		So, the issue seems to be with GraphViz on Ubuntu.

///////////////// SADL VERSIONS ///////////////
// Got this working on laptop where I have SADL version dated 20190102.
// Desktop has SADL version dated 11/07/2019.
// Oracle VM has SADL version dated 20190311.
// OVA on my laptop is dated 20190311.

// do I need to alter <CompInstance> in ScnCompProps*.tmpl so that it is unique?
// I am doing <ConnectionName>_<SrcComp> in ScnArch.tmpl to get unique connection name - that is in general not enough
// 'underscore' in TA1 property names works fine when using Run.sadl. May not work when doing "import" of csv files

// 11/22/2019: Moved the queries that generate the 3 output csv files and the graph into a separate
//		file Queries.sadl. So, I am using named queries. This makes the VERDICT toolchain
//		integration much simpler: previously had to create a java file with the queries and
//		would have issues if all the comments (signified by '#') were not removed. Now in
//		VERDICT toolchain VERDICTSTEM has to to send to SADL Server is the named query's uri, not the 
//		entire query itself.
// 11/21/2019: Altered ApplicableDefenseProperties in Defenses.csv as per SOTERIA++ request
//		Now it always has two items separated by ';'
// 11/19/2019: Now handling hierarchies - reading in 3 csv files and outputting 3 csv files. 
//		componentKind is now componentType (internally I use cType property)
//		There is an error marking in a template file but that is XText issue so ignore it
//		Altered graphing as some components do not have any properties etc.
//		Note that the TA1 properties use 'underscore' which may give problems in importing !!!
// 11/14/2019: added additional columns to Defenses.csv; now all relevant info is nicely laid out.
//		However, SOTERIA++ may want it differently and will say what the structure should be.
// 11/13/2019: Now have ScnCompProps.csv and ScnCompPropsTA1.csv as the TA1 properties I used to add
//		in functionality are just made up names and will not be generated by the translators.
//		See below how to read in ScnCompPropsTA1.csv.
//		Also note that *wizard.tmpl are for testing purposes only.
// 11/12/2019: Note that we check if mitigation present by comparing strings after converting them to lower case
//		as properties start with lower case while Mitigations start with upper case.
//		So, make sure that names are distinct when names converted to lower case.
//		No longer coloring node yellow in graphing if a CAPEC is addressed
//		as it is difficult to do so because of mitigation profile. But this info
//		is available in Defenses.csv file.
//		We do not show connection mitigations (like encryptedTransmission) in the Defenses.csv file;
//		note that SOTERIA++ does not handle properties on connections.
// 10/24/2019 Cleaned out project, has two cooked up CAP properties from (TA1). 
//		Note that we have "ComponentType is a class, must be one of {Software, Hardware, Hybrid, Human}."
//		Can do import of csv data as SADL files (for ScnCompProps.csv use ScnCompPropsWizard.tmpl).
//		ScnCompPropsWizard.tmpl is identical to ScnCompProps.tmpl except that it has one additional import.
//		Do not use "-" in property names if using wizard UNLESS it gets corrected in SADL.
// 9/26/2019 Added in sample Cyber Attack Properties and how we would handle them
//		see comments in STEMRules.sadl. Note that I have added in 2 CAP properties
//		which may need to be taken out and template file adjusted to 
//		run against VERDICT tool chain
// INTEGRATION impacts from STEM modifications
// From AADL to STEM:
// 		ScnArch.tmpl file: added connectionName and WiredConnectionToOutsideTB
// 		ScnCompProps.csv: updated component property names
// To SOTERIA++:
//		Updated component property names
//		Additional / updated CAPECs, NIST defenses, mitigations
//		defense profile: all NIST defenses in a row are "anded" together
//		defense profile: multiple rows for same CAPEC are "ored" together

// Re-architected the entire project, now three types of declarations (CAPECs, NIST controls, mitigations) 
//		and rules are generated in an excel file. These are copied over (after replacing how quotes appear).
//		The number of properties (component and mitigation), CAPECs, NIST Controls are expanded.
// I am no longer using causingComponent.

// Instead of writing out files into c:/tmp, we are now writing them into a project folder called Output
//		this will reduce the number of paths that are used.
// replaced allWifiEncFromOutsideTB by encryption

// On 7/22/2019: Updated so that encryption property is on a connection.
//		For this change, made a number of changes
//		In BaseModel.sadl, added a causingComponent property to Protection
//		In STEMRules.sadl, altered rules for CAPEC-151
//		In Run.sadl, altered the second write so there is an additional column in Defenses.csv
//		To test it, altered ScnArch.csv so there is a GroundStation and a connection to RC_Receiver
//		It is this connection that results in CAPEC-151 and defense for it is to encrypt the link
//		Also changed the ScnCompProps.csv so that the encryption is a defense on the connection
//		In graphing, showing input and output ports instead of flow on connection

// On 5/2/2019: corrected graphing query; also expanded it so that we can see connection flow type
// On 3/26/2019: cleaned up the queries to reduce number of "FILTER" used and took out some parts that were not needed

// On 3/26/2019; No longer reading in 3 csv files (CompDep.csv, Mission.csv and ScnComp.csv)
//		and only writing out 2 csv files: CAPEC.csv and Defenses.csv.
//		This is because SOTERIA++ has been refactored.

// TBD:
//		Add property "trustedComponent" so that later we can show what happens when we use an untrusted FlightController
//				what CAPECs would be present and for which components?

// SADL extensions needed / notes
// 		Minor: same property for a node appears multiple times in the .dot file

// checked in to BitBucket, CSV. Pushed to Amazon VM
// 2/18/2019 If CAPEC is addressed then it shows as yellow box (earlier it was red box)
// 2/14/2019 adding additional properties like antiJamming etc. renamed lOS to likelihoodOfSuccess
// 2/14/2019 decided we are going to use properties like "anti-jamming" and not going to use low values of lOS
// - so I am going to make all likelihoodOfSuccess  1.0 (as SOTERIA++ has already been altered to read this value in
// 2/13/2019 added likelihoodOfSuccess for Soteria++
// 2/5/2019 added implementation properties allWifiEncFromOutsideTB and heterogeneity
//			these are read in from csv file along with their DAL values
//			and ApplicableDefenses.csv file has been renamed and has 2 additional columns
//			altered rules so that CAPEC does not go away if heterogeneity present etc. added additional rules
// 1/28/2019 The tooltip now shows CAPECs and properties across multiple lines (altered how capecString is set in rules)
// 1/24/2019 showing properties for components (capecs and properties as tooltip)
// 1/15/2019 Corrected some queries to write out to files
// 1/13/2019 Corrected one rule by adding a clause
// 1/9/2019 I now no longer need the file Components.sadl and CompDep.csv has been corrected.
// 1/4/2019 Since I have turned off the transitive rules, some queries can be simplified. But have not done so.

// 1/3/2019: added space around ";" in two template files to avoid errors (these errors do not impact processing)

// 12/31/2018: Do not need CompPorts.csv and its template.
// 12/27/2018: Doing fancy graphing now. Note that the first time a node is encountered whatever properties it has are used throughout
// 		even if later additional properties are set for that node.

// Updated with 12/17/2018 version of SADL3 and with this I can read in ScnComp.csv and drop file Scenario1.sadl
// and graphing works. However I had error markers in template files so had to alter them.

// 12/14/2018: WE NO LONGER DROP CAPEC EVEN IF DEFENSE IS IN PLACE
	
Read: data from "ScnArch.csv" using "ScnArch.tmpl".  //connections and ports
Read: data from "ScnCompProps.csv" using "ScnCompProps.tmpl". //scenario specific properties of component instances
Read: data from "ScnConnectionProps.csv" using "ScnConnectionProps.tmpl". //scenario specific properties of connection instances

// the following has 2 TA1 CAPs; if using this, comment out the read of ScnCompProps.csv above
//Read: data from "ScnCompPropsTA1.csv" using "ScnCompPropsTA1.tmpl".

//Explain: Rule Vul-CAPEC-25-1.
// note this count may be larger than the number of entries in CAPEC.csv as there may be 
// multiple mitigations for a capec (e.g. capec-148 etc.)
Print: "Just get the counts of all CIA Issues".
Ask: "select count(*) where {?x <applicableCM> ?z2 } ".

//Print: "All the sorted CIA Issues".
//Ask: "select * where {?x <applicableCM> ?z2 } order by ?x ?z2".

Write: data {Ask: queries:Defenses2NIST.} to "/Output/Defenses2NIST.csv".

Write: data {Ask: queries:CAPEC.} to "/Output/CAPEC.csv". 

Write: data {Ask: queries:Defenses.} to "/Output/Defenses.csv".
//
/////////////////////// GRAPHS ////////////////////////////
////For graphing to work, install GraphViz and set path in environment variable GraphVizPath
//// if DAL is 0 then I show the property but the capec is "not addressed". Of course, this can be
//// changed by dropping ". FILTER(?dal > 0)" in 2 places

Graph: queries:STEMgraph.

/////////////////////// THE FOLLOWING TO GENERATE DATA FOR COMBINED VIEW //////////////////
//// to get count for verification
////Ask: "select count(*) where {?conn <rdf:type> <Connection> . ?conn <outPort> ?z1 . ?conn <inPort> ?z2} order by ?conn ".	 	
//
//// first part of Combined View tab is for each mitigation, what are the NIST defenses
//Ask: "select ?m (group_concat(distinct ?nist2;separator='; ') as ?nistlist) where
//{?m <rdf:type> <Mitigation> . ?m <nistControl> ?nist
//. LET(?nist2 := replace(str(?nist),'http.*#',''))
//} group by ?m order by ?m".
//
//// the following query will get most of the second piece of info that I have in the Combined View tab
//// the following will not surface capec-137 which in 1 row has more than 1 mitigation
//// note that the list of capecs is not sorted
//Ask: "select distinct ?m (group_concat(distinct ?id2;separator='; ') as ?capeclist) 
//  where { ?m <rdf:type> <Mitigation> . ?c <mitigation> ?m 
//. FILTER NOT EXISTS {?c <mitigation> ?m2 . FILTER(?m != ?m2)} 
//. ?c <ciaIssue> ?cia . ?c <id> ?id . ?c <capecDesc> ?desc
//. LET(?cia2 := replace(str(?cia),'http.*#',''))
//. LET(?cia3 := substr(str(?cia2),1,1))
//# use only one of the 2 LET lines below, the first one does not give capec description while the second one does
//. LET(?id2 := concat(str(?id), ?cia3))
//#. LET(?id2 := concat(concat(concat(str(?id),?cia3),'-'),?desc))
//} group by ?m order by ?m" .
//
//// the following lists the capecs that have more than 1 mitigation in a row
//Ask: "select ?c (count(*) as ?num) where
//{?c <mitigation> ?m1 } group by ?c having (?num > 1) order by ?c".
//
//// now the NIST info
//Ask: "select distinct ?id ?desc2 where 
//{?n <rdf:type> <NISTControl> . ?n <nistId> ?id . ?n <nistDesc> ?desc
//. LET(?desc2 := replace(str(?desc),'http.*#',''))}
//order by ?id".
//
//// now the CAPEC info
//Ask: "select distinct ?id ?desc2 where 
//{?c <rdf:type> <CAPEC> . ?c <id> ?id . ?c <capecDesc> ?desc
//. LET(?desc2 := replace(str(?desc),'http.*#',''))}
//order by ?id".
//
//// what are the capecs with no mitigation - tested that it works by commenting out part of a declaration
//Ask: "select * where
//{?c <rdf:type> <CAPEC> . FILTER NOT EXISTS{?c <mitigation> ?m}
//}".

//The following 2 should be equivalent but are not - why?
//Ask: "select distinct ?acm ?CompInst ?CAPEC ?CAPECDescription ?Mitigation ?DAL
//where {
//
//{select distinct ?newacm ?newCompInst (?dal as ?DAL) (?mit as ?Mitigation)
//where { ?newacm <mitigation> ?mit  . LET(?tx1 := lcase(str(?mit)))
//        . ?newCompInst ?prop ?val  . LET(?tx2 := lcase(str(?prop))) 
//        . FILTER(?tx1 = ?tx2) . ?val <dal> ?dal }
//}
//
//?CompInst <applicableCM> ?acm 
//. ?acm <id> ?id . LET(?CAPEC := concat('CAPEC-',str(?id)))
//. ?acm <capecDesc> ?CAPECDescription
//. FILTER(?newacm = ?acm)
//. FILTER(?newCompInst = ?CompInst)
//
//} order by ?CompInst ?CAPEC ?Mitigation ".
//
//Ask: "select distinct ?acm ?CompInst ?CAPEC ?CAPECDescription ?mit ?DAL
//where {?CompInst <applicableCM> ?acm 
//. ?acm <id> ?id . LET(?CAPEC := concat('CAPEC-',str(?id)))
//. ?acm <capecDesc> ?CAPECDescription
//
//. ?acm <mitigation> ?mit . LET(?tx1 := lcase(str(?mit)))
//. OPTIONAL{?CompInst ?prop ?val . LET(?tx2 := lcase(str(?prop))) 
//           . FILTER(?tx1 = ?tx2) . ?val <dal> ?DAL }
//
//} order by ?CompInst ?CAPEC ?mit ".
