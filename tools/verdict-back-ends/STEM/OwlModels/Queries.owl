<rdf:RDF
    xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
    xmlns:sadlbasemodel="http://sadl.org/sadlbasemodel"
    xmlns:owl="http://www.w3.org/2002/07/owl#"
    xmlns:sadlimplicitmodel="http://sadl.org/sadlimplicitmodel"
    xmlns:builtinfunctions="http://sadl.org/builtinfunctions"
    xmlns:stemr="http://sadl.org/STEM/STEMRules"
    xmlns:j.0="http://sadl.org/sadlimplicitmodel#"
    xmlns:rdfs="http://www.w3.org/2000/01/rdf-schema#"
    xmlns:queries="http://sadl.org/STEM/Queries#"
    xmlns:xsd="http://www.w3.org/2001/XMLSchema#"
  xml:base="http://sadl.org/STEM/Queries">
  <owl:Ontology rdf:about="">
    <owl:imports rdf:resource="STEMRules"/>
    <owl:imports rdf:resource="/builtinfunctions"/>
    <owl:imports rdf:resource="/sadlimplicitmodel"/>
    <owl:imports rdf:resource="/sadlbasemodel"/>
    <rdfs:comment xml:lang="en">This ontology was created from a SADL file 'Queries.sadl' and should not be directly edited.</rdfs:comment>
  </owl:Ontology>
  <j.0:NamedQuery rdf:ID="Defenses2NIST">
    <rdfs:isDefinedBy rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >
select distinct (?m1 as ?DefenseProperty)
(?ApplicableDefense1 as ?NISTProfile) (?DefenseDescription1 as ?DefenseDescription)
where {#?m1 &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#type&gt; &lt;http://sadl.org/STEM/BaseModel#Mitigation&gt;
# get NIST controls and their names for mitigation m1
{select distinct ?m1 (group_concat(distinct ?nc;separator=';') as ?ApplicableDefense1)
    (group_concat(distinct ?ncd;separator=';') as ?DefenseDescription1) where
   {?m1 &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#type&gt; &lt;http://sadl.org/STEM/BaseModel#Mitigation&gt; . ?m1 &lt;http://sadl.org/STEM/BaseModel#nistControl&gt; ?yy2
    . ?yy2 &lt;http://sadl.org/STEM/BaseModel#nistId&gt; ?yy3 . LET(?nc := replace(str(?yy3),'http.*#',''))
    . ?yy2 &lt;http://sadl.org/STEM/BaseModel#nistDesc&gt; ?yy4 . LET(?ncd := replace(str(?yy4),'http.*#',''))
   } group by ?m1}
}
</rdfs:isDefinedBy>
  </j.0:NamedQuery>
  <j.0:NamedQuery rdf:ID="STEMGraph">
    <rdfs:isDefinedBy rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >
select distinct ?N1 ?link ?N2 ?N1_style ?N1_fillcolor ?N2_style ?N2_fillcolor (?finallist as ?N1_tooltip) where
{  ?conn &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#type&gt; &lt;http://sadl.org/STEM/BaseModel#Connection&gt;
 . ?conn &lt;http://sadl.org/STEM/BaseModel#connectionSource&gt; ?src . ?conn &lt;http://sadl.org/STEM/BaseModel#connectionDestination&gt; ?dest
 . ?conn &lt;http://sadl.org/STEM/BaseModel#outPort&gt; ?oport . ?conn &lt;http://sadl.org/STEM/BaseModel#inPort&gt; ?iport
 . LET(?N1 := replace(str(?src),'^.*#','')) . LET(?N2 := replace(str(?dest),'^.*#','')) #strip ?src and ?dest to get ?N1 and ?n2 resp.
 . LET(?N1_style := 'filled') . LET(?N2_style := 'filled')
 . OPTIONAL{?src &lt;http://sadl.org/STEM/BaseModel#applicableCM&gt; ?acm . LET(?N1_fillcolor := 'red')}
 . OPTIONAL{?dest &lt;http://sadl.org/STEM/BaseModel#applicableCM&gt; ?acm2 . LET(?N2_fillcolor := 'red')}
 . ?conn &lt;http://sadl.org/STEM/BaseModel#connectionFlow&gt; ?flow # flowtype
 . LET(?strippedflow := replace(str(?flow),'^.*#',''))
 . ?conn &lt;http://sadl.org/STEM/BaseModel#connectionName&gt; ?connname # connection name
 . LET(?strippedcname := replace(str(?connname),'^.*#',''))
# select what we want to show on links - so comment all but one LET(?link...
# . LET(?link := concat(concat(str(?oport),':'),str(?iport))) .  # if we want to show port names at both ends
# . LET(?link := ?strippedflow) .  								 # if we want to show flowtype
#  . LET(?link := ' ') .										 # if we want to show nothing
 . LET(?link := ?strippedcname) . 								# if we want to show connection name
# . LET(?link := concat(concat(concat(concat(str(?oport),':'),str(?iport)),':'),str(?strippedflow))) .  # if we want to show port names at both ends and control flow
# now get list of CAPECs
   OPTIONAL {{select distinct ?src (group_concat(distinct ?capec;separator='; &amp;#10;') as ?capeclist) where # use &amp;#10; for newline in tooltip
      {?src &lt;http://sadl.org/STEM/BaseModel#applicableCM&gt; ?longcapec
       . ?longcapec &lt;http://sadl.org/STEM/BaseModel#id&gt; ?id . ?longcapec &lt;http://sadl.org/STEM/BaseModel#capecDesc&gt; ?desc
       . LET(?capec := concat(concat(concat('CAPEC-',str(?id)),':'),?desc))
      } group by ?src}
   }

# now get the list of properties (note we have simple properties and ImplProperties and they have different structures)
# using OPTIONAL as the 'generated' object does not have capecs or properties on it
 . OPTIONAL{{select distinct ?src (group_concat(distinct ?c6;separator='; &amp;#10;') as ?plist) where
    { {  #target: ?src is component instance, ?prop is property, ?prop_val is whether the property is true or false
         ?src ?prop ?z3 		#?z3 is true/false or is a blank node
       . ?prop &lt;http://sadl.org/STEM/BaseModel#tooltipProp&gt; ?r2 . ?z3 &lt;http://sadl.org/STEM/BaseModel#val&gt; ?prop_val
      }
    UNION
    { # this get properties, not implementation properties
      OPTIONAL{?src ?prop ?prop_val . ?prop &lt;http://sadl.org/STEM/BaseModel#tooltipProp&gt; ?r2 . FILTER(regex(str(?prop_val),'true') || regex(str(?prop_val),'false'))}
    }
   . LET(?c3 := concat(str(?prop_val),str(?prop)))
   . LET(?c4 := replace(str(?c3),'http.*#',''))
   . LET(?c5 := replace(str(?c4),'^true',''))
   . LET(?c6 := replace(str(?c5),'^false','NOT_')) # had wanted it to be NOT(...) but was having trouble gettting that working
   } group by ?src}}
# now concat capec list and property list
 . LET(?clist     := COALESCE(?capeclist,''))
 . LET(?tempplist := COALESCE(?plist,''))
 . LET(?templist  := concat(concat(?clist,'; &amp;#10;'),?tempplist))
 . LET(?templist2 := replace(?templist,'^; ',''))  # get rid of initial ';'
 . LET(?templist3 := replace(?templist2,';','; ')) # having a space ensures that we get quotes around in .dot file
 . LET(?cplist    := replace(?templist3,'  ',' ')) # do not need 2 spaces
 . LET(?finallist     := COALESCE(?cplist,''))
}
</rdfs:isDefinedBy>
  </j.0:NamedQuery>
  <j.0:NamedQuery rdf:ID="CAPEC">
    <rdfs:isDefinedBy rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >
select distinct ?CompType ?CompInst ?CAPEC ?CAPECDescription
(?ic as ?Confidentiality) (?ii as ?Integrity) (?ia as ?Availability) ?LikelihoodOfSuccess
where {?CompInst &lt;http://sadl.org/STEM/BaseModel#applicableCM&gt; ?x
. ?x &lt;http://sadl.org/STEM/BaseModel#id&gt; ?id . LET(?CAPEC := concat('CAPEC-',str(?id)))
. ?x &lt;http://sadl.org/STEM/BaseModel#capecDesc&gt; ?CAPECDescription
. ?x &lt;http://sadl.org/STEM/BaseModel#likelihoodOfSuccess&gt; ?LikelihoodOfSuccess
. ?CompInst &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#type&gt; ?CompType
. FILTER NOT EXISTS {?CompInst &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#type&gt; ?a1 . ?a1 &lt;http://www.w3.org/2000/01/rdf-schema#subClassOf&gt; ?CompType }
. OPTIONAL{?x &lt;http://sadl.org/STEM/BaseModel#ciaIssue&gt; ?ic . FILTER(regex(str(?ic),'Confidentiality'))}
. OPTIONAL{?x &lt;http://sadl.org/STEM/BaseModel#ciaIssue&gt; ?ii . FILTER(regex(str(?ii),'Integrity'))}
. OPTIONAL{?x &lt;http://sadl.org/STEM/BaseModel#ciaIssue&gt; ?ia . FILTER(regex(str(?ia),'Availability'))}
} order by ?CompType ?CompInst ?CAPEC
</rdfs:isDefinedBy>
  </j.0:NamedQuery>
  <j.0:NamedQuery rdf:ID="Defenses">
    <rdfs:isDefinedBy rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >
select distinct ?CompType ?CompInst ?CAPEC ?Confidentiality ?Integrity ?Availability
?ApplicableDefenseProperties (?ImplProperty2 as ?ImplProperties) (?DAL2 as ?DAL) where {
select distinct ?CompType ?CompInst ?CAPEC
(?ic as ?Confidentiality) (?ii as ?Integrity) (?ia as ?Availability)
?ApplicableDefenseProperties
(?nullProp1 as ?ImplProperty1) (concat(?nullProp1,concat(';',?nullProp2)) as ?ImplProperty2)
(?nullDAL1 as ?DAL1) (concat(?nullDAL1,concat(';',?nullDAL2)) as ?DAL2)
where {?CompInst &lt;http://sadl.org/STEM/BaseModel#applicableCM&gt; ?x
. ?x &lt;http://sadl.org/STEM/BaseModel#id&gt; ?id . LET(?CAPEC := concat('CAPEC-',str(?id)))
. ?x &lt;http://sadl.org/STEM/BaseModel#capecDesc&gt; ?CAPECDescription
. ?CompInst &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#type&gt; ?CompType
. FILTER NOT EXISTS {?CompInst &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#type&gt; ?a1 . ?a1 &lt;http://www.w3.org/2000/01/rdf-schema#subClassOf&gt; ?CompType }
. OPTIONAL{?x &lt;http://sadl.org/STEM/BaseModel#ciaIssue&gt; ?ic . FILTER(regex(str(?ic),'Confidentiality'))}
. OPTIONAL{?x &lt;http://sadl.org/STEM/BaseModel#ciaIssue&gt; ?ii . FILTER(regex(str(?ii),'Integrity'))}
. OPTIONAL{?x &lt;http://sadl.org/STEM/BaseModel#ciaIssue&gt; ?ia . FILTER(regex(str(?ia),'Availability'))}

. ?x &lt;http://sadl.org/STEM/BaseModel#mitigation&gt; ?m1 . LET(?strippedm1 := replace(str(?m1),'http.*#',''))
# ?x ends with ?strippedm1
. LET(?strippedx := replace(str(?x),'http.*#',''))
. LET(?tail := substr(?strippedx,strlen(?strippedx) - strlen(?strippedm1)+1 ,strlen(?strippedm1)))
. FILTER(?tail = ?strippedm1)
# get second mitigation
. OPTIONAL {?x &lt;http://sadl.org/STEM/BaseModel#mitigation&gt; ?xm2 . FILTER(?m1 != ?xm2)} # can swap m1 and m2; but not doing that
. LET(?strippedm1 := replace(str(?m1),'http.*#',''))
. LET(?strippedxm2 := replace(str(?xm2),'http.*#',''))
. LET(?nullstr := 'null')
. LET(?strippednullxm2 := COALESCE(?strippedxm2, ?nullstr))
. LET(?q1 := concat(?strippedm1, concat(';',?strippednullxm2)))
. LET(?ApplicableDefenseProperties := COALESCE(?q1, ?strippedm1)) # is m1;m2 when 2 mitigations or is m1 when only 1 mitigation

# get the dal from the appropriate implementation property of the component for mitigation m1
# if there are 2 mitigations, m1 may not be present
. LET(?temp1 := lcase(str(?m1)))
. LET(?q2 := replace(str(?temp1),'http.*#','')) # strip out prefix
. OPTIONAL{?CompInst ?y2 ?z4 . LET(?temp2 := lcase(str(?y2)))
           . FILTER(?temp1 = ?temp2) . ?z4 &lt;http://sadl.org/STEM/BaseModel#val&gt; true . ?z4 &lt;http://sadl.org/STEM/BaseModel#dal&gt; ?dal1
           . LET(?Prop1 := ?y2)}

# get second mitigation dal
. OPTIONAL {?x &lt;http://sadl.org/STEM/BaseModel#mitigation&gt; ?m2 . FILTER(?m1 != ?m2) # can swap m1 and m2; but not doing that
            . LET(?temp7 := lcase(str(?m2)))
            . ?CompInst ?y8 ?z8 . LET(?temp8 := lcase(str(?y8)))
            . FILTER(?temp7 = ?temp8) . ?z8 &lt;http://sadl.org/STEM/BaseModel#val&gt; true . ?z8 &lt;http://sadl.org/STEM/BaseModel#dal&gt; ?dal2
            . LET(?Prop2 := ?y8)}
# do stripping, concat with null etc
. LET(?strippedm2 := replace(str(?m2),'http.*#',''))
. LET(?strippedProp1 := replace(str(?Prop1),'http.*#',''))
. LET(?strippedProp2 := replace(str(?Prop2),'http.*#',''))
. LET(?strippedDal1 := str(?dal1)) #replace(str(?dal1),'http.*#',''))
. LET(?strippedDal2 := str(?dal2)) #replace(str(?dal2),'http.*#',''))

. LET(?nullProp1 := COALESCE(?strippedProp1,?nullstr))
. LET(?nullProp2 := COALESCE(?strippedProp2,?nullstr))
. LET(?nullDAL1 := COALESCE(?strippedDal1,?nullstr))
. LET(?nullDAL2 := COALESCE(?strippedDal2,?nullstr))

# set number of mitigations
. OPTIONAL{FILTER(?strippedm1 = ?ApplicableDefenseProperties) . LET(?numMitigations := '1mitigation')}
. OPTIONAL{FILTER(?strippedm1 != ?ApplicableDefenseProperties) . LET(?numMitigations := '2mitigations')}


#. OPTIONAL{FILTER(?numMitigations = '1mitigation') . LET (?ImplProperty := ?ImplProperty1) . LET(?DAL := ?DAL1)}
#. OPTIONAL{FILTER(?numMitigations = '2mitigations') . LET (?ImplProperty := ?ImplProperty2) . LET(?DAL := ?DAL2)}

}}
order by ?CompInst ?CAPEC ?ApplicableDefenseProperties
</rdfs:isDefinedBy>
  </j.0:NamedQuery>
</rdf:RDF>
