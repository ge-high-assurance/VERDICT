 type PLAIN_REAL = real;
type PLAIN_BOOL = bool;
type SUBRANGE_INT = subrange [0, 1] of int;
type PLAIN_INT = int;
type ARRAY_INT = int^3;
type TUPLE = [int, bool];
type ENUM_DIR = enum { NORTH, SOUTH, EAST, WEST };
type POSITION = struct { x : int; y : int };

const CONST_INT : int = 10;
const CONST_REAL : real = 0.0;
const CONST_BOOL : bool = true;
const LAUNCH_DIR : ENUM_DIR = NORTH;
const RETURN_DIR = WEST;
const LAUNCH_POS = POSITION { x = 0; y = 0 };
const CONST_EXPR = (int 1.5, real 1, LAUNCH_POS.x, 1 - 1, -1, 1 + 1, 1 * 1, 1 / 1, 1 div 1, 1 mod 1, not 1, 1 and 1, 1 or 1, 1 xor 1, 1 => 1, 1 < 1, 1 > 1, 1 <= 1, 1 >= 1, 1 = 1, 1 <> 1, if 1 then 1 else 1, 1 -> 1, pre 1, call(1, 1));

contract spec
  (altRequest : bool;
  deactivate : bool)
returns
  (altEngaged : bool);
let
  const a = 1;
  var altRequested : bool = switch(altRequest, deactivate);
  assume a >= 0;
  guarantee not altEngaged;
  mode noAlt (
    require not altRequested;
    ensure not altEngaged;
  );
tel


node imported switch
  (on : bool;
  off : bool)
returns
  (out : bool);

node ml
  (altRequest : bool;
  deactivate : bool)
returns
  (altEngaged : bool);
(*@contract
  import spec (altRequest, deactivate) returns (altEngaged);
*)
var
  altRequested : bool;
let
  altRequested = switch(altRequest, deactivate);
  altEngaged = altRequested;
tel

node top
  (n : int)
returns
  (out : bool);
var
  count : int;
let
  assert n = (n -> pre (n));
  count = 0 -> if (n < pre count) then pre count else pre count + 1;
  out = n < count;
tel

