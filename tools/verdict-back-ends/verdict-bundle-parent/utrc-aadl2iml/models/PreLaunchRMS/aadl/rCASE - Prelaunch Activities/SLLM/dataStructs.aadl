package dataStructs
public
	
	-- data broken into key categories
	-- individual types/variables done through implementation
	
	-- on/out data categories
	data UBX_message
	end UBX_message;
	
	data implementation UBX_message.Waypoint_message
	end UBX_message.Waypoint_message;
	
	data implementation UBX_message.GPS_message
	end UBX_message.GPS_message;
	
	data implementation UBX_message.IMU_message
	end UBX_message.IMU_message;
	
	data implementation UBX_message.GUID_message
	end UBX_message.GUID_message;
	
	data implementation UBX_message.NAV_message
	end UBX_message.NAV_message;
	
	-- gps category
	data gps_data
	end gps_data;
	
	data implementation gps_data.impl
	end gps_data.impl;
	
	data implementation gps_data.ecef_position
	end gps_data.ecef_position;
	
	-- imu category
	data imu_data
	end imu_data;
	
	data implementation imu_data.impl
	end imu_data.impl;
	
	-- navigation category
	data navigation_data
	end navigation_data;
	
	data implementation navigation_data.impl
	end navigation_data.impl;
	
	data implementation navigation_data.navfct
	end navigation_data.navfct;
	
	data implementation navigation_data.nav_data
	end navigation_data.nav_data;
	
	-- guidance category
	data guidance_data
	end guidance_data;
	
	data implementation guidance_data.impl
	end guidance_data.impl;
	
	-- servo category
	data servo_data
	end servo_data;
	
	data implementation servo_data.impl
	end servo_data.impl;
	
	-- mission manager state category
	data mm_state
	end mm_state;
	
	data implementation mm_state.mm_sys_state	
	end mm_state.mm_sys_state;
	
	data implementation mm_state.mm_sys_substate
	end mm_state.mm_sys_substate;
	
	-- custom data types
	data GEU_MAIN
	end GEU_MAIN;
	
	data implementation GEU_MAIN.impl
		subcomponents
			simulate_devices : data dataStructs::UINT8;
			halt : data dataStructs::UINT8;
			override_servos : data dataStructs::UINT8;
			override_throttle : data dataStructs::UINT8;
			
			frame_counter : data dataStructs::UINT32;
			excess_time : data dataStructs::FLOAT64;
			overruns : data dataStructs::UINT32;
			overrun_time : data dataStructs::FLOAT64;
			
			drivers_in : data dataStructs::GEU_MAIN_DRIVERS_IN;
	end GEU_MAIN.impl;
	
	data GEU_MAIN_DRIVERS_IN
	end GEU_MAIN_DRIVERS_IN;
	
	data implementation GEU_MAIN_DRIVERS_IN.impl
		subcomponents
			mission_time : data FLOAT64;
			frame_dt : data FLOAT64;
			
			gps : data GPS_TYPE;
			
			gps_signal_chn : data UINT16;
			gps_singal_svid : data UINT16;
			gps_signal_cno : data UINT16;
			gps_message_counter : data UINT32;
			
			gps_antenna_status : data UINT16;
			gps_NoisePerMS : data UINT16;
			gps_AGCCnt : data UINT16;
			
			imu : data IMU_TYPE;
			
			airdata : data AIRDATA_TYPE;
			
			sensor : data SENSOR_TYPE;
	end GEU_MAIN_DRIVERS_IN.impl;
	
	data GPS_TYPE
	end GPS_TYPE;
	
	data implementation GPS_TYPE.impl
		subcomponents
			data_rx : data unsigned_char;
			fixStatus : data unsigned_char;
			ttag : data double;
			ecefPos : data double[3];
			ecefVel : data double[3];
			estHorizPosError : data double;
			estVertPosError : data double;
			positionDOP : data unsigned_short;
			verticalDOP : data unsigned_short;
			horizontalDOP : data unsigned_short;
			timeDOP : data unsigned_short;
			posAcc : data double;
			velAcc : data double;
			horizAcc : data double;
			vertAcc : data double;
	end GPS_TYPE.impl;
	
	data IMU_TYPE
	end IMU_TYPE;
	
	data implementation IMU_TYPE.impl
		subcomponents
			del_att : data double[3];
			del_vel : data double[3];
			data_valid : data unsigned_char;
			launch_detected : data unsigned_char; -- check exactly what this is in the souce code
	end IMU_TYPE.impl;
	
	data AIRDATA_TYPE
	end AIRDATA_TYPE;
	
	data implementation AIRDATA_TYPE.impl
		subcomponents
			airSpeed : data double;
	end AIRDATA_TYPE.impl;
	
	data SENSOR_TYPE
	end SENSOR_TYPE;
	
	data implementation SENSOR_TYPE.impl
		subcomponents
			mag_field : data double[3];
			altimeter_altitude : data double; -- check exactly what this is -- is it static?
			tmp2 : data double;
	end SENSOR_TYPE.impl;
	
	-- default data types
	data unsigned_char
	end unsigned_char;
	
	data double
	end double;
	
	data unsigned_short
	end unsigned_short;
	
	data UINT8
	end UINT8;
	
	data UINT16
	end UINT16;
	
	data UINT32
	end UINT32;
	
	data FLOAT64
	end FLOAT64;
	
end dataStructs;