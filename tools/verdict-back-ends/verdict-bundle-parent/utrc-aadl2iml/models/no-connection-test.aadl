package test
public
	with Base_Types;

system S1
	features
		i1: in data port Base_Types::Float;
		i2: in data port Base_Types::Float;
		o1: out data port Base_Types::Float;
		n : in data port Base_Types::Integer;	
	annex iml {** 
		 a1 <<a:Assume>> : Bool := exists x:Int, y:Int { (y >= 0 && y <= n && x>=1 && x <= 0) && ( (i1 = x/n || i1 = -1 * x/n) && ( i2 = y/n || i2 =  -1 *y/n)) } ;
	     g1 <<g:Guarantee>>: Bool := o1 <=1 && o1 >=-1;
	**};	
end S1; 

system S2
	features
		i1: in data port Base_Types::Float;
		i2: in data port Base_Types::Float;
		o1: out data port Base_Types::Float;
		alpha : in data port Base_Types::Float;	
	annex iml {** 
		a1 <<a:Assume>> : Bool := (i1 =1 || i1=-1) && (i2=0 || i2 =1 || i2 = -1) ;
		g1 <<g:Guarantee>>: Bool := o1 = i1 * sqrt(2) * sin(alpha) + i2 * sqrt(2) * cos(alpha);
	**};	
end S2; 

system S3
	features
		i1: in data port Base_Types::Float;
		o1 : out data port Base_Types::Float;
end S3;

system implementation S1.Impl
	subcomponents	
		S2_sub : system S2 ; 
		S3_sub : system S3 ;
	connections
		i1_TO_A : port i1 -> S2_sub.i1;
--		i2_TO_A : port i2 -> S2_sub.i2;
--		S2_TO_o1 : port S2_sub.o1 -> o1 ; 
--		S2_TO_S3 : port S2_sub.o1 -> S3_sub.i1;
end S1.Impl;

end test2;
