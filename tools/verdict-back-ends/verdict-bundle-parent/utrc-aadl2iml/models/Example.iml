
type Point exhibits(data);

type Point exhibits(data, implemenation) {
    x : int;
    y: int;
}

/**
* annex agree {**
*    const one: int = 1;
*	**};
*/

type A exhibits(system, contract){
    x1 = some(port: DataPort<int>){
        port.direction = Direction.IN;
    };
    y1 = some(port: DataPort<int>){
        port.direction = Direction.OUT;
    };

    //assert(x1 > y1)
}

type B exhibits(system){
    x2 = some(port: DataPort<int>){
        port.direction = Direction.IN;
    };
    y2 = some(port: DataPort<int>){
        port.direction = Direction.IN;
    };
    z2 = some(port: DataPort<int>){
        port.direction = Direction.OUT;
    };
    //assert(x1 > y1)
}

type B_impl exhibits(system, implementation, contract) extends(B){
    //assign z2 = x2 + y2 + one;
}

type C exhibits(system){
    x3 = some(port: DataPort<int>){
        port.direction = Direction.IN;
    };
    y3 = some(port: DataPort<int>){
        port.direction = Direction.IN;
    };
    z3 = some(port: DataPort<int>){
        port.direction = Direction.OUT;
    };
    //assert(z3 > x3)
}

type C_impl exhibits(system, implementation) extends(C){
    my_a1: A;
    my_a2: A;
    my_b: B_impl;

    
}