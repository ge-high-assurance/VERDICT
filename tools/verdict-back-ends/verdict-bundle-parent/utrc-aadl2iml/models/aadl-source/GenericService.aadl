package GenericServiceEvents_pkg
public
	with UxASNodeLibEvents;
    with Base_Types ;
    

  
    thread GenericService
    	features 
    	    CmdRequest_in: in event data port Base_Types::Boolean;
    	    CmdResponse_out: out event data port Base_Types::Boolean;
    	    
    	    SubRequest_out: out event data port Base_Types::Boolean;
    	    SubResponse_in: in event data port Base_Types::Boolean;
    	flows
			processing_path0 : flow path CmdRequest_in -> SubRequest_out  ;
			processing_path1 : flow path SubResponse_in -> CmdResponse_out;	
    	properties
    		-- This should be treated as a guarantee
    		-- There is no assumption
			latency => 1 ms .. 1ms applies to processing_path0, processing_path1;
	    annex iml {**
		  	
		  	g1monitor : responds_once ;
			c1 : Connector < Bool > := 
			<Bool>connect(CmdRequest_in.event,g1monitor.b);
			c2 : Connector < Bool > := 
			<Bool>connect(SubRequest_out.event,g1monitor.a);
			
			g2monitor : responds_once ;
			c3 : Connector < Bool > := 
			<Bool>connect(SubResponse_in.event,g2monitor.b);
			c4 : Connector < Bool > := 
			<Bool>connect(CmdResponse_out.event,g2monitor.a);
			
			d1 : delay ;
			c5 : Connector < FlowPath > := 
			<FlowPath>connect(processing_path0,d1.f);
			c6 : Connector < Int > := 
			<Int>connect(1,d1.n);
			
			d2 : delay ;
			c7 : Connector < FlowPath > := 
			<FlowPath>connect(processing_path1,d2.f);
			c8 : Connector < Int > := 
			<Int>connect(1,d2.n);
			
			[Guarantee,Output] g : Bool := {g1monitor.holds && g2monitor.holds && d1.holds && d2.holds};

			
	    **};
    end GenericService;
     
end GenericServiceEvents_pkg;
