package Demo
public
	with Base_Types;
	
	data Command
		
	end Command;
	
	data implementation Command.Impl
		subcomponents
			HMAC : data Base_Types::Boolean;
	end Command.Impl;
	
	system InternalTest
		features
			inport: in event data port Command.Impl;
			outport: out event data port Command.Impl;
	end InternalTest;
	
	system implementation InternalTest.impl
		
	end InternalTest.impl;
	
	system Filter
        features
            filter_in: in event data port Command.Impl;
            filter_out: out event data port Command.Impl;
        annex agree {**
            assume "Authenticated command from the Ground Station" : filter_in.HMAC = True;
            guarantee "Authenticated command from the Ground Station" : filter_out.HMAC = True;
            guarantee "Well-formed messages" : good_command(filter_out);
        **};
    end Filter;
    
    system implementation Filter.impl
    	subcomponents
    		INTERNALTEST : system InternalTest.impl;
    	connections
    		c1 : port filter_in -> INTERNALTEST.inport;
    		c2 : port INTERNALTEST.outport -> filter_out;
    		
    end Filter.impl;
    
    annex agree {**
			
		-- These functions check the well-formedness of message structures
																
		fun good_HMAC(hmac : bool) : bool = (hmac = True) or (hmac = False);
		
		fun good_command(cmd : Command.Impl) : bool =	good_HMAC(cmd.HMAC);														
	**};
	
end Demo;