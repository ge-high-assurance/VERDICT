--Designer vs. Analysis Engine
--Test B : NO

package SWB
public
	
	with Data_Model;
	with Base_Types;
	--with claim;


	-- This is the structure to hold the lat/long/alt values of a coordinate
	data Coordinate
	end Coordinate;
	
	data implementation Coordinate.Impl
		subcomponents
			lat : data Base_Types::Integer;
			long : data Base_Types::Integer;
			alt : data Base_Types::Integer;
	end Coordinate.Impl;
	
	-- The Map is a structure that contains a list of coordinates that encircle a
	-- region.  
	-- In this implementation, we fix the size of the map to 4 waypoints
	data Map
	end Map;
	
	data implementation Map.Impl
		subcomponents
			wp1 : data Coordinate.Impl;
			wp2 : data Coordinate.Impl;
			wp3 : data Coordinate.Impl;
			wp4 : data Coordinate.Impl;
	end Map.Impl;
	
	-- The Flight Pattern is an enumeration that defines how the UAV will fly through the
	-- sensing region to conduct surveillance.
	data FlightPattern
	end FlightPattern;
	
	-- The Command structure contains data that the Ground Station passes to the UAV.
	-- It contains a Map, Flight Pattern and Authentication bit.
	data Command
	end Command;
	
	data implementation Command.Impl
		subcomponents
			Map : data Map.Impl;
			Pattern: data FlightPattern;
			HMAC: data Base_Types::Boolean;
	end Command.Impl;
	
	-- The Mission is a list of waypoints that is generated by the Flight Planner based on a
	-- Map and Flight Pattern.
	-- For this implementation, we fix the size of the Mission to 10 waypoints.
	data Mission
	end Mission;
	
	data implementation Mission.Impl
		subcomponents
			wp1 : data Coordinate.Impl;
			wp2 : data Coordinate.Impl;
			wp3 : data Coordinate.Impl;
			wp4 : data Coordinate.Impl;
			wp5 : data Coordinate.Impl;
			wp6 : data Coordinate.Impl;
			wp7 : data Coordinate.Impl;
			wp8 : data Coordinate.Impl;
			wp9 : data Coordinate.Impl;
			wp10 : data Coordinate.Impl;
	end Mission.Impl;
	
	-- The Mission Window is a list of waypoints that the Waypoint Manager assembles from
	-- the Mission.
	-- For this implementation, we fix the size of the Mission Window to 4 waypoints.
	-- The crc value is an abstraction, which, if true, tells us that the data has not
	-- been corrupted.
	data MissionWindow
	end MissionWindow;
	
	data implementation MissionWindow.Impl
		subcomponents
			wp1 : data Coordinate.Impl;
			wp2 : data Coordinate.Impl;
			wp3 : data Coordinate.Impl;
			wp4 : data Coordinate.Impl;
			crc : data Base_Types::Boolean;
	end MissionWindow.Impl;
	
	
	thread RadioDriver
		features
			recv_map_in: in event data port Command.Impl;
			send_status_out: out event data port Coordinate.Impl;
			send_status_in: in event data port Coordinate.Impl;
			recv_map_out: out event data port Command.Impl;
			
		annex iml {**
			[ Assumption ] a1 : Bool := recv_map_in.data.HMAC = true;
			[ Guarantee ]  g1 : Bool :=  recv_map_out.data.HMAC = true ;
		**};
			
	end RadioDriver;
	
	
	thread FlightPlanner
		features
			flight_plan: out data port Mission.Impl;
			recv_map: in event data port Command.Impl;
			position_status: in event data port Coordinate.Impl;

		annex iml {**
			[ Assumption ] a1 : Bool := recv_map.data.HMAC = true;
			[ Assumption ] a2 : Bool := good_gs_command(recv_map.data);
			[ Guarantee ] g1 : Bool := good_mission(flight_plan.data);
		**};
			
	end FlightPlanner;
	

	thread WaypointManager
		features
			flight_plan: in data port Mission.Impl;
			waypoint: out event data port MissionWindow.Impl;
			position_status: in event data port Coordinate.Impl;
			
		annex iml {**
			[ Assumption ] a1 : Bool := good_mission(flight_plan.data);
			[ Guarantee ] g1 : Bool :=  good_mission_window(waypoint.data);
		**};
			
	end WaypointManager;
	
	thread UARTDriver
		features
			position_status_in: in event data port Coordinate.Impl;
			waypoint_out: out event data port MissionWindow.Impl;
			position_status_out: out event data port Coordinate.Impl;
			waypoint_in: in event data port MissionWindow.Impl;
			
		annex iml {**
			[ Assumption ] a1 : Bool := good_mission_window(waypoint_in.data);
			[ Guarantee ] g1 : Bool := waypoint_out.data.crc = true;
		**};
			
	end UARTDriver;

	process MC_SW
		features
			recv_map: in event data port Command.Impl;
			send_status: out event data port Coordinate.Impl;
			waypoint: out event data port MissionWindow.Impl;
			position_status: in event data port Coordinate.Impl;

		annex iml {**
			// we abstract away the authentication and just assume the message has undergone authenticity verification
			[ Assumption ] a1 : Bool := recv_map.data.HMAC = true;
			[ Guarantee ] g1 : Bool := waypoint.data.crc = true;
		**};
			
	end MC_SW;

	process implementation MC_SW.Impl
		subcomponents
			RADIO: thread RadioDriver;
			FPLN: thread FlightPlanner;
			WPM: thread WaypointManager;
			UART: thread UARTDriver;
		connections
			c1: port recv_map -> RADIO.recv_map_in;
			c2: port RADIO.send_status_out -> send_status;
			c3: port RADIO.recv_map_out -> FPLN.recv_map;
			c5: port FPLN.flight_plan -> WPM.flight_plan;
			c6: port WPM.waypoint -> UART.waypoint_in;
			c7: port UART.position_status_out -> WPM.position_status;
			c8: port UART.position_status_out -> FPLN.position_status;
			c9: port UART.position_status_out -> RADIO.send_status_in;
			c10: port UART.waypoint_out -> waypoint;
			c11: port position_status -> UART.position_status_in;
			
	end MC_SW.Impl;
	
	
	annex iml {**
			
		// These functions check the well-formedness of message structures
	
		good_coordinate : Coordinate_dot_Impl -> Bool := fun(coord : Coordinate_dot_Impl) {
																coord.lat >= -90 && 
																coord.lat <= 90 && 
																coord.long >= -180 && 
																coord.long <= 180 && 
																coord.alt >= 0 && 
																coord.alt <= 15000 } ;
		
		
		good_map : Map_dot_Impl -> Bool := fun(map : Map_dot_Impl) {	
			 												good_coordinate(map.wp1) && 
															good_coordinate(map.wp2) && 
															good_coordinate(map.wp3) && 
															good_coordinate(map.wp4) } ;
															
																		
		good_HMAC : Bool -> Bool := fun(hmac : Bool) { (hmac = true) || (hmac = false) } ;
			
			
		good_gs_command : Command_dot_Impl -> Bool :=	fun(cmd : Command_dot_Impl) {good_map(cmd.Map) && 
																		good_HMAC(cmd.HMAC) };
																		
		good_mission : Mission_dot_Impl -> Bool :=	fun( mission : Mission_dot_Impl) {good_coordinate(mission.wp1) && 
																		good_coordinate(mission.wp2) && 
																		good_coordinate(mission.wp3) && 
																		good_coordinate(mission.wp4) && 
																		good_coordinate(mission.wp5) && 
																		good_coordinate(mission.wp6) && 
																		good_coordinate(mission.wp7) && 
																		good_coordinate(mission.wp8) && 
																		good_coordinate(mission.wp9) && 
																		good_coordinate(mission.wp10) };
																		
		good_mission_window : MissionWindow_dot_Impl -> Bool :=	fun(win : MissionWindow_dot_Impl) {good_coordinate(win.wp1) && 
																				good_coordinate(win.wp2) && 
																				good_coordinate(win.wp3) && 
																				good_coordinate(win.wp4)};
																										
	**};
	
end SWB;