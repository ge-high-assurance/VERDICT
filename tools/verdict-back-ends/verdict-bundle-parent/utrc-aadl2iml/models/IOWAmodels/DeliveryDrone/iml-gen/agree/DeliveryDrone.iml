package agree.DeliveryDrone;
import iml.systems.*;
import agree.Agree_Constants.*;
import agree.Agree_Nodes.*;
import iml.software.*;
import iml.synchdf.ontological.*;
import iml.contracts.*;
import agree.Data_Types.*;
import agree.VERDICT_Properties.*;
import agree.property_test.*;
 
trait PositionEstimatorTrait  refines(Synchronous, Component, Contract, System) {
	gps_pos_in: InDataPort<Position_dot_impl>;
	imu_pos_in: InDataPort<Position_dot_impl>;
	est_pos_out: OutDataPort<Position_dot_impl>;
	pos_act_in: InDataPort<Position_dot_impl>;
	[Guarantee{comment="est_pos_out"}] REQ1 : Bool := close_locations.node.f(est_pos_out.data, gps_pos_in.data);
	
			
	guarantee: Bool := REQ1;
	
			
};

type PositionEstimator  exhibits(PositionEstimatorTrait);
trait DeliveryPlannerTrait  refines(Synchronous, Component, Contract, System) {
	bus_in: InDataPort<InputBus_dot_impl>;
	nav_location: InDataPort<Position_dot_impl>;
	delivery_status: InDataPort<DeliveryStatus>;
	radio_response: InDataPort<RadioResponse_dot_impl>;
	camera_result: InDataPort<Int>;
	radio_cmd: OutDataPort<Bool>;
	delivery_cmd_out: OutDataPort<Bool>;
	dest_location: OutDataPort<Position_dot_impl>;
	bus_out: OutDataPort<Bool>;
	cmd_out: OutDataPort<Bool>;
	camera_out: OutDataPort<Bool>;
	p: OutDataPort<ProbePlannerSignals_dot_impl>;
	truck_position:Position_dot_impl := FirstLocation.node.f(nav_location.data);
	
	have_order:Bool := HasHappened.node.f(bus_in.data.connected && bus_in.data.update_order);
	
	order:DeliveryOrder_dot_impl := init<>(bus_in.data.order,);
	
	valid_recognition:Bool := HasHappened.node.f(recognizing_location && p.data.is_target_clear && p.data.is_target_location);
	
	target_confirmed:Bool := HasHappened.node.f(confirming_location && radio_response.data.data_available && radio_response.data.target_confirmed);
	
	steps_in_confirming_mode:Int := ;
	
	delivery_aborted:Bool := HasHappened.node.f((recognizing_location && !p.data.is_target_clear || !p.data.is_target_location) || delivery_status.data = DeliveryStatus.FAILED  || (radio_response.data.data_available && !radio_response.data.target_confirmed) || (steps_in_confirming_mode > WAITING_CONFIRMATION_THRESHOLD));
	
	proof_stored:Bool := HasHappened.node.f(delivery_status.data = DeliveryStatus.COMPLETED  && close_locations.node.f(nav_location.data, order.target_position));
	
	delivered_or_aborted:Bool := init<Bool>(false,pre<>(delivery_status.data = DeliveryStatus.COMPLETED  || delivery_aborted));
	
	connected_to_truck:Bool := !delivered_or_aborted && close_locations.node.f(nav_location.data, truck_position) && bus_in.data.connected;
	
	waiting_delivery_order:Bool := !delivered_or_aborted && close_locations.node.f(nav_location.data, truck_position) && !bus_in.data.connected && !have_order;
	
	flying_to_target:Bool := !delivered_or_aborted && have_order && (close_locations.node.f(nav_location.data, truck_position) && !bus_in.data.connected) || (!close_locations.node.f(nav_location.data, truck_position) && !close_locations.node.f(nav_location.data, order.target_position));
	
	recognizing_location:Bool := !delivered_or_aborted && have_order && close_locations.node.f(nav_location.data, order.target_position) && init<Bool>(false,!pre<Bool>(valid_recognition));
	
	confirming_location:Bool := !delivered_or_aborted && close_locations.node.f(nav_location.data, order.target_position) && init<Bool>(false,pre<Bool>(valid_recognition)) && (order.item_value > ITEM_VALUE_THRESHOLD) && init<Bool>(false,!pre<Bool>(target_confirmed));
	
	dropping_package:Bool := !delivered_or_aborted && close_locations.node.f(nav_location.data, order.target_position) && init<Bool>(false,pre<Bool>(valid_recognition)) && init<Bool>(false,(order.item_value > ITEM_VALUE_THRESHOLD) => pre<Bool>(target_confirmed));
	
	waiting_proof_of_delivery:Bool := init<Bool>(false,pre<>(delivery_status.data = DeliveryStatus.COMPLETED )) && close_locations.node.f(nav_location.data, order.target_position) && init<Bool>(false,!pre<Bool>(proof_stored));
	
	returning_to_truck:Bool := delivered_or_aborted && !close_locations.node.f(nav_location.data, truck_position) && !waiting_proof_of_delivery;
	
	delivery_done:Bool := delivered_or_aborted && close_locations.node.f(nav_location.data, truck_position);
	
	[Assume{comment="Navigation location remains the same if no command was issued"}] REQ1 : Bool := init<Bool>(true,!pre<Bool>(cmd_out.data) => nav_location.data = pre<Position_dot_impl>(nav_location.data));
	
	[Guarantee{comment="Command is issued only if drone is disconnected and has order"}] REQ2 : Bool := cmd_out.data => !bus_in.data.connected && have_order;
	
	[Guarantee{comment="radio_cmd_Def"}] REQ3 : Bool := radio_cmd.data = confirming_location;
	
	[Guarantee{comment="delivery_cmd_out_Def"}] REQ4 : Bool := delivery_cmd_out.data = dropping_package;
	
			
	assumption: Bool := REQ1;
	
	guarantee: Bool := REQ2 && REQ3 && REQ4;
	
			
};

type DeliveryPlanner  exhibits(DeliveryPlannerTrait);
trait IMUTrait  refines(Synchronous, Component, System) {
	launch_pos_in: InDataPort<Position_dot_impl>;
	imu_pos_out: OutDataPort<Position_dot_impl>;
};

type IMU  exhibits(IMUTrait);
trait DeliveryDroneSystemTrait  refines(Synchronous, Component, Contract, System) {
	satellite_sig_pos: InDataPort<Position_dot_impl>;
	launch_pos: InDataPort<Position_dot_impl>;
	bus1: InDataPort<InputBus_dot_impl>;
	comm1: InDataPort<RadioResponse_dot_impl>;
	comm2: OutDataPort<Bool>;
	bus2: OutDataPort<Bool>;
	radio_cmd: OutDataPort<Bool>;
	radio_response: OutDataPort<RadioResponse_dot_impl>;
	delivery_status: OutDataPort<DeliveryStatus>;
	delivery_cmd_out: OutDataPort<Bool>;
	actuation_out: OutDataPort<Bool>;
	have_order:Bool := HasHappened.node.f(bus1.data.connected && bus1.data.update_order);
	
	order:DeliveryOrder_dot_impl := init<>(bus1.data.order,);
	
	confirmation_requested:Bool := HasHappened.node.f(radio_cmd.data);
	
	target_confirmed:Bool := HasHappened.node.f(confirmation_requested && comm1.data.data_available && comm1.data.target_confirmed);
	
	delivery_started:Bool := delivery_status.data <> DeliveryStatus.NOT_STARTED ;
	
	[Guarantee{comment="P1: A command to release a valuable package is issued only if drone has received confirmation from base"}] REQ1 : Bool := init<Bool>(true,(delivery_cmd_out.data && (order.item_value > ITEM_VALUE_THRESHOLD) => target_confirmed));
	
	[Guarantee{comment="P2: The drone will always request a confirmation to base before starting delivery of a valuable package"}] REQ2 : Bool := init<Bool>(true,(delivery_started && (order.item_value > ITEM_VALUE_THRESHOLD) => confirmation_requested));
	
			
	guarantee: Bool := REQ1 && REQ2;
	
			
};

type DeliveryDroneSystem  exhibits(DeliveryDroneSystemTrait);
type DeliveryDroneSystem_dot_Impl   exhibits(DeliveryDroneSystemTrait){
	[ agree.VERDICT_Properties.VERDICT_Properties{ heterogeneityDAL=7 && adversariallyTested=true && insideTrustedBoundary=true && broadcastFromOutsideTB=true } , agree.property_test.property_test{ pA=5.6 } ] gps : GPS;
	[ agree.VERDICT_Properties.VERDICT_Properties{ antiFuzzingDAL=7 && wifiFromOutsideTB=true && antiJamming=true && encryptionDAL=7 && antiFuzzing=true && antiFloodingDAL=7 && antiFlooding=true && antiJammingDAL=7 && insideTrustedBoundary=true && encryption=true } ] radio : Radio;
	[ agree.VERDICT_Properties.VERDICT_Properties{ insideTrustedBoundary=true } ] imu : IMU;
	[ agree.VERDICT_Properties.VERDICT_Properties{ insideTrustedBoundary=true } ] positionEstimator : PositionEstimator;
	[ agree.VERDICT_Properties.VERDICT_Properties{ insideTrustedBoundary=true } ] navigation : Navigation;
	[ agree.VERDICT_Properties.VERDICT_Properties{ insideTrustedBoundary=true } ] fc : FlightControl;
	[ agree.VERDICT_Properties.VERDICT_Properties{ insideTrustedBoundary=true } ] actuation : Actuation;
	[ agree.VERDICT_Properties.VERDICT_Properties{ adversariallyTested=false && manufacturer=manufacturer_T.ThirdParty && componentType=componentType_T.Software && insideTrustedBoundary=true } ] deliveryPlanner : DeliveryPlanner;
	[ agree.VERDICT_Properties.VERDICT_Properties{ insideTrustedBoundary=true } ] deliveryItemMechanism : DeliveryItemMechanism;
	[ agree.VERDICT_Properties.VERDICT_Properties{ insideTrustedBoundary=true } ] camera : Camera;
	c1 : Connector<OutDataPort<Position_dot_impl>, InDataPort<Position_dot_impl>> := connect<OutDataPort<Position_dot_impl>, InDataPort<Position_dot_impl>>(positionEstimator.est_pos_out, navigation.pos_in);
	assert{positionEstimator.est_pos_out.data = navigation.pos_in.data};
	c1b : Connector<InDataPort<Position_dot_impl>, InDataPort<Position_dot_impl>> := connect<InDataPort<Position_dot_impl>, InDataPort<Position_dot_impl>>(launch_pos, imu.launch_pos_in);
	assert{launch_pos.data = imu.launch_pos_in.data};
	c2 : Connector<OutDataPort<Bool>, InDataPort<Bool>> := connect<OutDataPort<Bool>, InDataPort<Bool>>(navigation.move_out, fc.move_in);
	assert{navigation.move_out.data = fc.move_in.data};
	c3 : Connector<OutDataPort<Bool>, InDataPort<Bool>> := connect<OutDataPort<Bool>, InDataPort<Bool>>(fc.state_out, navigation.state_in);
	assert{fc.state_out.data = navigation.state_in.data};
	c4 : Connector<OutDataPort<Position_dot_impl>, InDataPort<Position_dot_impl>> := connect<OutDataPort<Position_dot_impl>, InDataPort<Position_dot_impl>>(deliveryPlanner.dest_location, navigation.nav_dest_location);
	assert{deliveryPlanner.dest_location.data = navigation.nav_dest_location.data};
	c5 : Connector<OutDataPort<Position_dot_impl>, InDataPort<Position_dot_impl>> := connect<OutDataPort<Position_dot_impl>, InDataPort<Position_dot_impl>>(navigation.nav_location_out, deliveryPlanner.nav_location);
	assert{navigation.nav_location_out.data = deliveryPlanner.nav_location.data};
	c7 : Connector<OutDataPort<DeliveryStatus>, InDataPort<DeliveryStatus>> := connect<OutDataPort<DeliveryStatus>, InDataPort<DeliveryStatus>>(deliveryItemMechanism.delivery_status_out, deliveryPlanner.delivery_status);
	assert{deliveryItemMechanism.delivery_status_out.data = deliveryPlanner.delivery_status.data};
	c9 : Connector<OutDataPort<Int>, InDataPort<Int>> := connect<OutDataPort<Int>, InDataPort<Int>>(camera.camera_out, deliveryPlanner.camera_result);
	assert{camera.camera_out.data = deliveryPlanner.camera_result.data};
	c10 : Connector<OutDataPort<Bool>, InDataPort<Bool>> := connect<OutDataPort<Bool>, InDataPort<Bool>>(deliveryPlanner.radio_cmd, radio.radio_in);
	assert{deliveryPlanner.radio_cmd.data = radio.radio_in.data};
	c11 : Connector<OutDataPort<RadioResponse_dot_impl>, InDataPort<RadioResponse_dot_impl>> := connect<OutDataPort<RadioResponse_dot_impl>, InDataPort<RadioResponse_dot_impl>>(radio.radio_out, deliveryPlanner.radio_response);
	assert{radio.radio_out.data = deliveryPlanner.radio_response.data};
	c12 : Connector<OutDataPort<Position_dot_impl>, InDataPort<Position_dot_impl>> := connect<OutDataPort<Position_dot_impl>, InDataPort<Position_dot_impl>>(gps.gps_pos_out, positionEstimator.gps_pos_in);
	assert{gps.gps_pos_out.data = positionEstimator.gps_pos_in.data};
	c14 : Connector<InDataPort<InputBus_dot_impl>, InDataPort<InputBus_dot_impl>> := connect<InDataPort<InputBus_dot_impl>, InDataPort<InputBus_dot_impl>>(bus1, deliveryPlanner.bus_in);
	assert{bus1.data = deliveryPlanner.bus_in.data};
	c15 : Connector<OutDataPort<Bool>, OutDataPort<Bool>> := connect<OutDataPort<Bool>, OutDataPort<Bool>>(deliveryPlanner.bus_out, bus2);
	assert{deliveryPlanner.bus_out.data = bus2.data};
	c16 : Connector<InDataPort<RadioResponse_dot_impl>, InDataPort<RadioResponse_dot_impl>> := connect<InDataPort<RadioResponse_dot_impl>, InDataPort<RadioResponse_dot_impl>>(comm1, radio.comm_in);
	assert{comm1.data = radio.comm_in.data};
	c17 : Connector<OutDataPort<Bool>, OutDataPort<Bool>> := connect<OutDataPort<Bool>, OutDataPort<Bool>>(radio.comm_out, comm2);
	assert{radio.comm_out.data = comm2.data};
	c18a : Connector<OutDataPort<Position_dot_impl>, InDataPort<Position_dot_impl>> := connect<OutDataPort<Position_dot_impl>, InDataPort<Position_dot_impl>>(imu.imu_pos_out, positionEstimator.imu_pos_in);
	assert{imu.imu_pos_out.data = positionEstimator.imu_pos_in.data};
	c19 : Connector<OutDataPort<Bool>, InDataPort<Bool>> := connect<OutDataPort<Bool>, InDataPort<Bool>>(fc.motor_cmd, actuation.motor_cmd_in);
	assert{fc.motor_cmd.data = actuation.motor_cmd_in.data};
	c20 : Connector<OutDataPort<Bool>, InDataPort<Bool>> := connect<OutDataPort<Bool>, InDataPort<Bool>>(actuation.response_out, fc.response_in);
	assert{actuation.response_out.data = fc.response_in.data};
	c22 : Connector<InDataPort<Position_dot_impl>, InDataPort<Position_dot_impl>> := connect<InDataPort<Position_dot_impl>, InDataPort<Position_dot_impl>>(satellite_sig_pos, gps.satellite_pos_in);
	assert{satellite_sig_pos.data = gps.satellite_pos_in.data};
	c24 : Connector<OutDataPort<Position_dot_impl>, InDataPort<Position_dot_impl>> := connect<OutDataPort<Position_dot_impl>, InDataPort<Position_dot_impl>>(navigation.pos_act_out, positionEstimator.pos_act_in);
	assert{navigation.pos_act_out.data = positionEstimator.pos_act_in.data};
	c25 : Connector<OutDataPort<Bool>, InDataPort<Bool>> := connect<OutDataPort<Bool>, InDataPort<Bool>>(deliveryPlanner.delivery_cmd_out, deliveryItemMechanism.delivery_cmd_in);
	assert{deliveryPlanner.delivery_cmd_out.data = deliveryItemMechanism.delivery_cmd_in.data};
	c26 : Connector<OutDataPort<Bool>, InDataPort<Bool>> := connect<OutDataPort<Bool>, InDataPort<Bool>>(deliveryPlanner.cmd_out, navigation.cmd_in);
	assert{deliveryPlanner.cmd_out.data = navigation.cmd_in.data};
	c27 : Connector<OutDataPort<Bool>, InDataPort<Bool>> := connect<OutDataPort<Bool>, InDataPort<Bool>>(deliveryPlanner.camera_out, camera.camera_in);
	assert{deliveryPlanner.camera_out.data = camera.camera_in.data};
	c28 : Connector<OutDataPort<Bool>, OutDataPort<Bool>> := connect<OutDataPort<Bool>, OutDataPort<Bool>>(deliveryPlanner.radio_cmd, radio_cmd);
	assert{deliveryPlanner.radio_cmd.data = radio_cmd.data};
	c29 : Connector<OutDataPort<RadioResponse_dot_impl>, OutDataPort<RadioResponse_dot_impl>> := connect<OutDataPort<RadioResponse_dot_impl>, OutDataPort<RadioResponse_dot_impl>>(radio.radio_out, radio_response);
	assert{radio.radio_out.data = radio_response.data};
	c30 : Connector<OutDataPort<DeliveryStatus>, OutDataPort<DeliveryStatus>> := connect<OutDataPort<DeliveryStatus>, OutDataPort<DeliveryStatus>>(deliveryItemMechanism.delivery_status_out, delivery_status);
	assert{deliveryItemMechanism.delivery_status_out.data = delivery_status.data};
	c31 : Connector<OutDataPort<Bool>, OutDataPort<Bool>> := connect<OutDataPort<Bool>, OutDataPort<Bool>>(deliveryPlanner.delivery_cmd_out, delivery_cmd_out);
	assert{deliveryPlanner.delivery_cmd_out.data = delivery_cmd_out.data};
	c32 : Connector<OutDataPort<Bool>, OutDataPort<Bool>> := connect<OutDataPort<Bool>, OutDataPort<Bool>>(actuation.response_out, actuation_out);
	assert{actuation.response_out.data = actuation_out.data};
};

trait ActuationTrait  refines(Synchronous, Component, System) {
	response_out: OutDataPort<Bool>;
	motor_cmd_in: InDataPort<Bool>;
};

type Actuation  exhibits(ActuationTrait);
trait DeliveryItemMechanismTrait  refines(Synchronous, Component, Contract, System) {
	delivery_cmd_in: InDataPort<Bool>;
	delivery_status_out: OutDataPort<DeliveryStatus>;
	[Guarantee{comment="Initially, delivery status is NOT_STARTED"}] REQ1 : Bool := InitiallyX.node.f(delivery_status_out.data = DeliveryStatus.NOT_STARTED );
	
	[Guarantee{comment="Delivery status remains the same if no delivery command is issued"}] REQ2 : Bool := init<Bool>(true,!delivery_cmd_in.data => delivery_status_out.data = pre<DeliveryStatus>(delivery_status_out.data));
	
	[Guarantee{comment="If delivery command is issued, delivery status cannot be NOT_STARTED"}] REQ3 : Bool := delivery_cmd_in.data => delivery_status_out.data <> DeliveryStatus.NOT_STARTED ;
	
			
	guarantee: Bool := REQ1 && REQ2 && REQ3;
	
			
};

type DeliveryItemMechanism  exhibits(DeliveryItemMechanismTrait);
trait CameraTrait  refines(Synchronous, Component, System) {
	camera_in: InDataPort<Bool>;
	camera_out: OutDataPort<Int>;
};

type Camera  exhibits(CameraTrait);
trait GPSTrait  refines(Synchronous, Component, Contract, System) {
	satellite_pos_in: InDataPort<Position_dot_impl>;
	gps_pos_out: OutDataPort<Position_dot_impl>;
	[Guarantee{comment="gps_pos_out_Def"}] REQ1 : Bool := close_locations.node.f(gps_pos_out.data, satellite_pos_in.data);
	
			
	guarantee: Bool := REQ1;
	
			
};

type GPS  exhibits(GPSTrait);
trait RadioTrait  refines(Synchronous, Component, Contract, System) {
	comm_in: InDataPort<RadioResponse_dot_impl>;
	radio_in: InDataPort<Bool>;
	comm_out: OutDataPort<Bool>;
	radio_out: OutDataPort<RadioResponse_dot_impl>;
	[Guarantee{comment="Radio receives data from remote communication channel"}] REQ1 : Bool := (comm_in.data.data_available = radio_out.data.data_available && comm_in.data.target_confirmed = radio_out.data.target_confirmed);
	
	[Guarantee{comment="Without a request, no radio data is available"}] REQ2 : Bool := !radio_in.data => !radio_out.data.data_available;
	
			
	guarantee: Bool := REQ1 && REQ2;
	
			
};

type Radio  exhibits(RadioTrait);
trait NavigationTrait  refines(Synchronous, Component, Contract, System) {
	pos_in: InDataPort<Position_dot_impl>;
	nav_dest_location: InDataPort<Position_dot_impl>;
	cmd_in: InDataPort<Bool>;
	state_in: InDataPort<Bool>;
	move_out: OutDataPort<Bool>;
	nav_location_out: OutDataPort<Position_dot_impl>;
	pos_act_out: OutDataPort<Position_dot_impl>;
	[Guarantee{comment="Navigation location remains the same if no command was received"}] REQ1 : Bool := init<Bool>(true,!pre<Bool>(cmd_in.data) => nav_location_out.data = pre<Position_dot_impl>(nav_location_out.data));
	
	[Guarantee{comment="Navigation location is computed from Estimated Position"}] REQ2 : Bool := close_locations.node.f(nav_location_out.data, pos_in.data);
	
			
	guarantee: Bool := REQ1 && REQ2;
	
			
};

type Navigation  exhibits(NavigationTrait);
trait FlightControlTrait  refines(Synchronous, Component, System) {
	motor_cmd: OutDataPort<Bool>;
	response_in: InDataPort<Bool>;
	state_out: OutDataPort<Bool>;
	move_in: InDataPort<Bool>;
};

type FlightControl  exhibits(FlightControlTrait);

