package iml.verdict;

import iml.utils.*;

type Identifier is String;

type DataTypeKind enum { Plain, Subrange, Enum, Record, UserDefined };

type PlainType enum { Int, Real, Bool };

type SubrangeType {
	lower_bound: Int;
	upper_bound: Int;
};

mk_subrange: (Int, Int) -> SubrangeType := fun (lb: Int, ub: Int) {
	some (s: SubrangeType) { s.lower_bound = lb && s.upper_bound = ub }
};

type RecordField {
	name: Identifier;
	dtype: DataType;
};

type EnumType is ArrayList<Identifier>; 

type RecordType is ArrayList<RecordField>;

type DataType {
	kind: DataTypeKind; 
	plain_type: PlainType;
	subrange_type: SubrangeType;
	enum_type: EnumType;
	record_type: RecordType;
	user_defined_type: TypeDeclaration;
};

BoolType: DataType := some(d: DataType) {
	d.kind = DataTypeKind.Plain &&
	d.plain_type = PlainType.Bool
};

IntegerType: DataType := some(d: DataType) {
	d.kind = DataTypeKind.Plain &&
	d.plain_type = PlainType.Int
};

RealType: DataType := some(d: DataType) {
	d.kind = DataTypeKind.Plain &&
	d.plain_type = PlainType.Real
};

type TypeDeclaration {
	name: Identifier;
	definition: Option<DataType>;
};

mk_datatype_from_decl: TypeDeclaration -> DataType := fun (decl: TypeDeclaration) {some (d: DataType) {
	d.kind = DataTypeKind.UserDefined &&
	d.user_defined_type = decl
}};
