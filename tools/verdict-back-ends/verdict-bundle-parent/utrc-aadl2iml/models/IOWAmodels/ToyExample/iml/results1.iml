package agree;
import iml.systems.*;
import iml.software.*;
import iml.synchdf.ontological.*;
import iml.contracts.*;
 
		
trait VERDICT_Properties.adversariallyTested{
		adversariallyTested : 	
};
		
trait VERDICT_Properties.authenticated{
		authenticated : 	
};
type enum {
	Software
	Hardware
	Human
	Hybrid
}
		
trait VERDICT_Properties.componentType{
		componentType : 	
};
		
trait VERDICT_Properties.antiFloodingDAL{
		antiFloodingDAL : 	
};
		
trait VERDICT_Properties.category{
		category : 	
};
		
trait VERDICT_Properties.encryption{
		encryption : 	
};
type enum {
	Xdata
	Control
	Request
}
		
trait VERDICT_Properties.flowType{
		flowType : 	
};
type enum {
	ThirdParty
	InHouse
}
		
trait VERDICT_Properties.manufacturer{
		manufacturer : 	
};
		
trait VERDICT_Properties.antiFuzzing{
		antiFuzzing : 	
};
		
trait VERDICT_Properties.heterogeneityDAL{
		heterogeneityDAL : 	
};
		
trait VERDICT_Properties.antiFuzzingDAL{
		antiFuzzingDAL : 	
};
		
trait VERDICT_Properties.hasSensitiveInfo{
		hasSensitiveInfo : 	
};
		
trait VERDICT_Properties.encryptionDAL{
		encryptionDAL : 	
};
		
trait VERDICT_Properties.heterogeneity{
		heterogeneity : 	
};
		
trait VERDICT_Properties.antiJammingDAL{
		antiJammingDAL : 	
};
type enum {
	Local
	Remote
}
		
trait VERDICT_Properties.connectionType{
		connectionType : 	
};
type enum {
	OnBoard
	Remote
}
		
trait VERDICT_Properties.situated{
		situated : 	
};
		
trait VERDICT_Properties.wifiFromOutsideTB{
		wifiFromOutsideTB : 	
};
		
trait VERDICT_Properties.antiFlooding{
		antiFlooding : 	
};
		
trait VERDICT_Properties.broadcastFromOutsideTB{
		broadcastFromOutsideTB : 	
};
		
trait VERDICT_Properties.antiJamming{
		antiJamming : 	
};
		
trait VERDICT_Properties.insideTrustedBoundary{
		insideTrustedBoundary : 	
};
		
trait VERDICT_Properties.dataEncrypted{
		dataEncrypted : 	
};

