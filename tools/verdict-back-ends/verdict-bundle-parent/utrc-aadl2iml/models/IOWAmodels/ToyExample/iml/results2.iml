package agree;
import iml.systems.*;
import iml.software.*;
import iml.synchdf.ontological.*;
import iml.contracts.*;
 
trait BTrait  refines(Synchronous, Component, System) {
	x2: InDataPort<Int>;
	y2: InDataPort<Int>;
	z2: OutDataPort<Int>;
};

type B  exhibits(BTrait);
trait PointTrait  refines(Data) {
};

type Point  exhibits(PointTrait);
trait CTrait  refines(Synchronous, Component, Contract, System) {
	x3: InDataPort<Int>;
	y3: InDataPort<Int>;
	z3: OutDataPort<Int>;
	[Guarantee{comment="G2"}] REQ1 : Bool := z3.data > x3.data;
	
			
	guarantee: Bool := REQ1;
	
			
};

type C  exhibits(CTrait);
		
		
type B_dot_Impl   exhibits(BTrait){
	z2.data = x2.data + y2.data + one;
	
			
			
};

type Point_dot_Impl   exhibits(PointTrait){
	x : Int;
	y : Int;
};

trait ATrait  refines(Synchronous, Component, Contract, System) {
	x1: InDataPort<Int>;
	y1: OutDataPort<Int>;
	[Guarantee{comment="G1"}] REQ1 : Bool := y1.data > x1.data;
	
			
	guarantee: Bool := REQ1;
	
			
};

type A  exhibits(ATrait);
type C_dot_Impl   exhibits(CTrait){
	my_a1 : A;
	my_a2 : A;
	my_b : B_dot_Impl;
	c1 : Connector<InDataPort<Int>, InDataPort<Int>> := connect<InDataPort<Int>, InDataPort<Int>>(x3, my_a1.x1);
	assert{x3.data = my_a1.x1.data};
	c2 : Connector<InDataPort<Int>, InDataPort<Int>> := connect<InDataPort<Int>, InDataPort<Int>>(y3, my_a2.x1);
	assert{y3.data = my_a2.x1.data};
	c3 : Connector<OutDataPort<Int>, InDataPort<Int>> := connect<OutDataPort<Int>, InDataPort<Int>>(my_a1.y1, my_b.x2);
	assert{my_a1.y1.data = my_b.x2.data};
	c4 : Connector<OutDataPort<Int>, InDataPort<Int>> := connect<OutDataPort<Int>, InDataPort<Int>>(my_a2.y1, my_b.y2);
	assert{my_a2.y1.data = my_b.y2.data};
	c5 : Connector<OutDataPort<Int>, OutDataPort<Int>> := connect<OutDataPort<Int>, OutDataPort<Int>>(my_b.z2, z3);
	assert{my_b.z2.data = z3.data};
};


