package MC
public
	
	with SW;
	with UAV;
	with UAS;

	device Radio
		features
			MCA: requires bus access MC_Bus;
			RFA: requires bus access UAS::RF;
			recv_map_in: in event data port;
			recv_map_out: out event data port SW::Command.Impl;
			send_status_in: in event data port SW::Coordinate.Impl;
			send_status_out: out event data port;
	end Radio;

	device UART
		features
			MCA: requires bus access MC_Bus;
			UARTA: requires bus access UAV::Serial;
			waypoint_in: in event data port SW::MissionWindow.Impl;
			waypoint_out: out event data port;
			position_status_in: in event data port;
			position_status_out: out event data port SW::Coordinate.Impl;
	end UART;

	processor MC_Proc
		features
			MCA: requires bus access MC_Bus;			
	end MC_Proc;
	
	memory MC_Mem
		features
			MCA: requires bus access MC_Bus;		
	end MC_Mem;
	
	bus MC_Bus
	end MC_Bus;

	system MissionComputer
		features
			recv_map: in event data port;
			position_status: in event data port;
			waypoint: out event data port;
			send_status: out event data port;
			UARTA: requires bus access UAV::Serial;
			RFA: requires bus access UAS::RF;

	end MissionComputer;
	
	system implementation MissionComputer.impl
		
		subcomponents
			RADIO_HW: device Radio;
			UART_HW: device UART;
			PROC_HW: processor MC_Proc;
			MEM_HW: memory MC_Mem;
			BUS_HW: bus MC_Bus;
			PROC_SW: process SW::MC_SW;
			
		connections
			bac1: bus access RADIO_HW.MCA <-> BUS_HW;
			bac2: bus access UART_HW.MCA <-> BUS_HW;
			bac3: bus access PROC_HW.MCA <-> BUS_HW;
			bac4: bus access MEM_HW.MCA <-> BUS_HW;
			bac5: bus access RADIO_HW.RFA <-> RFA;
			bac6: bus access UART_HW.UARTA <-> UARTA;
			c1: port recv_map -> RADIO_HW.recv_map_in;
			c2: port RADIO_HW.recv_map_out -> PROC_SW.recv_map;
			c3: port PROC_SW.send_status -> RADIO_HW.send_status_in;
			c4: port RADIO_HW.send_status_out -> send_status;
			c5: port PROC_SW.waypoint -> UART_HW.waypoint_in;
			c6: port UART_HW.waypoint_out -> waypoint;
			c7: port position_status -> UART_HW.position_status_in;
			c8: port UART_HW.position_status_out -> PROC_SW.position_status;
		
	end MissionComputer.impl;
	
end MC;