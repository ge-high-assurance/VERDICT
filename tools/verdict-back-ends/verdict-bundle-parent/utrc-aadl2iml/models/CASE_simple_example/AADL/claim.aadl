package claim
  public 
  	
  	with CASE;
  	with SW;
    
    annex resolute {**
    	
    well_formed(x : component) <=
    	** x " only receives well-formed messages" **
		filter_exists(x) and not_bypassed(x) and filter_prop_checked() and system_prop_checked()
    

	-- Ideally, we would want to check that there's a filter anywhere between
	-- pairs of components (such as the ground station and flight planner).
	-- However, there's a bug in Resolute that prevents us from doing that.
	-- So for now, we just check to see if there is a filter immediately before 
	-- the component on the communication pathway.
	-- For now we will assume any type of filter will reject malformed messages.
	filter_exists(c : component) <=
		** "A filter exists on the communication pathway immediately before " c **
		-- get incoming connections
		let in_conns : {connection} = {conn for (conn : connections(c)) | destination_component(conn) = c};
		exists(conn : in_conns). is_filter(source_component(conn))

	-- Make sure there is no communication pathway that avoids the filter
	-- For now we will assume any type of filter will reject malformed messages
    not_bypassed(c : component) <=
	    ** "Filter cannot be bypassed" **
		-- get incoming connections of type Command
		let cmd_conns : {connection} = {conn for (conn : connections(c)) | 
										destination_component(conn) = x and has_type(conn) and type(conn) = SW::Command};
		-- show that all of these connections come from a filter
		forall(conn : cmd_conns). is_filter(source_component(conn))

    -- This should connect to some evidence that the filter was correctly generated
    -- and that the proof was emitted and checked.
    -- However, this funcionality has not yet been implemented
    filter_prop_checked() <=
	    ** "Filter property implemented by CakeML" **
	    forall (c : component). is_filter(c)
	       => has_property(c, CASE::COMP_IMPL) and property(c, CASE::COMP_IMPL) = "CAKEML"

    -- This connect to evidence that AGREE was previously run on the current version of the design.
    system_prop_checked() <=
    	** "AGREE properties passed" **
    	analysis("AgreeCheck")

	-- Checks if the specified component is a filter
	is_filter(c : component) : bool =
		has_property(c, COMP_TYPE) and property(c, COMP_TYPE) = "FILTER"
    
	**};
    
end claim;
    

