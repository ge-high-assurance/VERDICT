package SW ; import iml.contracts.* ; import iml.connectivity.* ; import iml.lang.* ; import iml.aadl.* ; import Data_Model ; type [ data ] Coordinate ; type [ data , implementation ] Coordinate_dot_Impl extends ( Coordinate ) { [ data , subcomponent ] lat : Int ; [ data , subcomponent ] long : Int ; [ data , subcomponent ] alt : Int ; } ; type [ data ] Map ; type [ data , implementation ] Map_dot_Impl extends ( Map ) { [ data , subcomponent ] wp1 : Coordinate_dot_Impl ; [ data , subcomponent ] wp2 : Coordinate_dot_Impl ; [ data , subcomponent ] wp3 : Coordinate_dot_Impl ; [ data , subcomponent ] wp4 : Coordinate_dot_Impl ; } ; type [ data ] FlightPattern ; type [ data ] Command ; type [ data , implementation ] Command_dot_Impl extends ( Command ) { [ data , subcomponent ] Map : Map_dot_Impl ; [ data , subcomponent ] Pattern : FlightPattern ; [ data , subcomponent ] HMAC : Bool ; } ; type [ data ] Mission ; type [ data , implementation ] Mission_dot_Impl extends ( Mission ) { [ data , subcomponent ] wp1 : Coordinate_dot_Impl ; [ data , subcomponent ] wp2 : Coordinate_dot_Impl ; [ data , subcomponent ] wp3 : Coordinate_dot_Impl ; [ data , subcomponent ] wp4 : Coordinate_dot_Impl ; [ data , subcomponent ] wp5 : Coordinate_dot_Impl ; [ data , subcomponent ] wp6 : Coordinate_dot_Impl ; [ data , subcomponent ] wp7 : Coordinate_dot_Impl ; [ data , subcomponent ] wp8 : Coordinate_dot_Impl ; [ data , subcomponent ] wp9 : Coordinate_dot_Impl ; [ data , subcomponent ] wp10 : Coordinate_dot_Impl ; } ; type [ data ] MissionWindow ; type [ data , implementation ] MissionWindow_dot_Impl extends ( MissionWindow ) { [ data , subcomponent ] wp1 : Coordinate_dot_Impl ; [ data , subcomponent ] wp2 : Coordinate_dot_Impl ; [ data , subcomponent ] wp3 : Coordinate_dot_Impl ; [ data , subcomponent ] wp4 : Coordinate_dot_Impl ; [ data , subcomponent ] crc : Bool ; } ; type [ thread ] RadioDriver { [ in , eventData , port ] recv_map_in : Command_dot_Impl ; [ out , eventData , port ] send_status_out : Coordinate_dot_Impl ; [ in , eventData , port ] send_status_in : Coordinate_dot_Impl ; [ out , eventData , port ] recv_map_out : Command_dot_Impl ; } ; type [ thread ] FlightPlanner { [ out , data , port ] flight_plan : Mission_dot_Impl ; [ in , eventData , port ] recv_map : Command_dot_Impl ; [ in , eventData , port ] position_status : Coordinate_dot_Impl ; } ; type [ thread ] WaypointManager { [ in , data , port ] flight_plan : Mission_dot_Impl ; [ out , eventData , port ] waypoint : MissionWindow_dot_Impl ; [ in , eventData , port ] position_status : Coordinate_dot_Impl ; } ; type [ thread ] UARTDriver { [ in , eventData , port ] position_status_in : Coordinate_dot_Impl ; [ out , eventData , port ] waypoint_out : MissionWindow_dot_Impl ; [ out , eventData , port ] position_status_out : Coordinate_dot_Impl ; [ in , eventData , port ] waypoint_in : MissionWindow_dot_Impl ; } ; type [ process ] MC_SW { [ in , eventData , port ] recv_map : Command_dot_Impl ; [ out , eventData , port ] send_status : Coordinate_dot_Impl ; [ out , eventData , port ] waypoint : MissionWindow_dot_Impl ; [ in , eventData , port ] position_status : Coordinate_dot_Impl ; } ; type [ process , implementation ] MC_SW_dot_Impl extends ( MC_SW ) { [ thread , subcomponent ] RADIO : RadioDriver ; [ thread , subcomponent ] FPLN : FlightPlanner ; [ thread , subcomponent ] WPM : WaypointManager ; [ thread , subcomponent ] UART : UARTDriver ; [ connection ] c1 : Connector < Command_dot_Impl > ; [ connection ] c2 : Connector < Coordinate_dot_Impl > ; [ connection ] c3 : Connector < Command_dot_Impl > ; [ connection ] c5 : Connector < Mission_dot_Impl > ; [ connection ] c6 : Connector < MissionWindow_dot_Impl > ; [ connection ] c7 : Connector < Coordinate_dot_Impl > ; [ connection ] c8 : Connector < Coordinate_dot_Impl > ; [ connection ] c9 : Connector < Coordinate_dot_Impl > ; [ connection ] c10 : Connector < MissionWindow_dot_Impl > ; [ connection ] c11 : Connector < Coordinate_dot_Impl > ; } ;