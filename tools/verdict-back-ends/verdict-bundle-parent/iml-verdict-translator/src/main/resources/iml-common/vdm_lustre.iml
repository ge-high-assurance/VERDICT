package iml.verdict;

import iml.utils.*;

type ExpressionKind enum {
	Id, BoolLiteral, IntLiteral, RealLiteral, ToInt, ToReal,
	RecordProjection, RecordLiteral, Minus, Negative, Plus,
	Times, Div, IntDiv, Mod, Not, And, Or, Xor, Implies,
	LessThan, GreaterThan,
	LessThanOrEqualTo, GreaterThanOrEqualTo,
	Equal, NotEqual, ConditionalExpr, Arrow, Pre, Call,
	ExpressionList
};

type RecordProjection {
	record_reference: Expression;
	field_id: Identifier; /* Indirect reference */
};

type FieldDefinition {
	field_id: Identifier; /* Indirect reference */
	field_value: Expression;
};

type RecordLiteral {
	record_type: Identifier; /* Indirect reference */
	field_definitions: ArrayList<FieldDefinition>;
};

type BinaryOperation {
	lhs_operand: Expression;
	rhs_operand: Expression;
};

type IfThenElse {
	condition: Expression;
	thenBranch: Expression;
	elseBranch: Expression;
};

type NodeCall {
	node: Identifier; // Indirect Reference
	arguments: ArrayList<Expression>; 
};

type Expression {
	kind: ExpressionKind;
	identifier: Identifier;
	bool_literal: Bool;
	int_literal: Int;
	real_literal: Real;
	to_int: Expression;
	to_real: Expression;
	record_projection: RecordProjection;
	record_literal: RecordLiteral;
	minus: BinaryOperation;
	negative: Expression;
	plus: BinaryOperation;
	times: BinaryOperation;
	div: BinaryOperation;
	int_div: BinaryOperation;
	modulo: BinaryOperation;
	not: Expression;
	and: BinaryOperation;
	or: BinaryOperation;
	xor: BinaryOperation;
	implies: BinaryOperation;
	less_than: BinaryOperation;
	greater_than: BinaryOperation;
	less_than_or_equal_to: BinaryOperation;
	greater_than_or_equal_to: BinaryOperation;
	equal: BinaryOperation;
	not_equal: BinaryOperation;
	conditional_expr: IfThenElse;
	arrow: BinaryOperation;
	pre: Expression;
	call: NodeCall;
	expression_list: ArrayList<Expression>;
};

mk_id_expr: Identifier -> Expression := fun (id: Identifier) {some (e: Expression) {
	e.kind = ExpressionKind.Id &&
	e.identifier = id
}};

mk_int_expr: Int -> Expression := fun (i: Int) {some (e: Expression) {
	e.kind = ExpressionKind.IntLiteral &&
	e.int_literal = i
}};

mk_gt_expr: (Expression, Expression) -> Expression :=
	fun (lhs_op: Expression, rhs_op: Expression) {some (e: Expression) {
		e.kind = ExpressionKind.GreaterThan &&
		e.greater_than = some (o: BinaryOperation) {
			o.lhs_operand = lhs_op &&
			o.rhs_operand = rhs_op
		}
	}};

mk_cond_expr: (Expression, Expression, Expression) -> Expression :=
	fun (cond: Expression, thenExpr: Expression, elseExpr: Expression) {some (e: Expression) {
		e.kind = ExpressionKind.ConditionalExpr &&
		e.conditional_expr = some(ite: IfThenElse) {
			ite.condition = cond &&
			ite.thenBranch = thenExpr &&
			ite.elseBranch = elseExpr 
		}
	}} ;

type ConstantDeclaration {
	name: Identifier;
	dtype: DataType;
	definition: Option<Expression>;
};

type InputParameter {
	name: Identifier;
	dtype: DataType;
	is_constant: Bool;
};

type OutputParameter {
	name: Identifier;
	dtype: DataType;
};

type SymbolDefinition {
	name: Identifier;
	is_constant: Bool;
	dtype: DataType;
	definition: Expression;
};

type ContractItem {
	name: Option<Identifier>;
	expression: Expression;
};

type ContractImport {
	contract: Identifier; /* Indirect reference */
	input_arguments: ArrayList<Expression>;
	output_arguments: ArrayList<Expression>;
}

type ContractMode {
	requires: ArrayList<ContractItem>;
	ensures: ArrayList<ContractItem>;
};

type ContractSpec {
	constant_declarations: ArrayList<SymbolDefinition>;
	variable_declarations: ArrayList<SymbolDefinition>;
	assumes: ArrayList<ContractItem>;
	guarantees: ArrayList<ContractItem>;
	modes: ArrayList<ContractMode>;
	imports: ArrayList<ContractImport>;
};

type Contract {
	name: Identifier;
	input_parameters: ArrayList<InputParameter>;
	output_parameters: ArrayList<OutputParameter>;
	specification: ContractSpec;
};

type VariableDeclaration {
	name: Identifier;
	dtype: DataType;
};

type NodeEquation {
	lhs: ArrayList<Identifier>; /* Indirect Reference */
	rhs: Expression;
};

type NodeProperty {
	name: Option<Identifier>;
	expression: Expression;
};

type NodeBody {
	constant_declarations: ArrayList<ConstantDeclaration>;
	variable_declarations: ArrayList<VariableDeclaration>;
	assertions: ArrayList<Expression>;
	equations: ArrayList<NodeEquation>;
	properties: ArrayList<NodeProperty>;
};

type Node {
	name: Identifier;
	is_function: Bool;
	is_main: Bool;
	input_parameters: ArrayList<InputParameter>;
	output_parameters: ArrayList<OutputParameter>;
	contract: Option<ContractSpec>;
	body: Option<NodeBody>;
};

type LustreProgram {
	type_declarations: ArrayList<TypeDeclaration>;
	constant_declarations: ArrayList<ConstantDeclaration>;
	contract_declarations: ArrayList<Contract>;
	node_declarations: ArrayList<Node>;
};
