package HawkeyeUAV;

import iml.utils.*;
import iml.verdict.*;

model: Model := some (m: Model) {
  m.name = "HawkeyeUAV" &&
  m.type_declarations.length = 12 &&
  m.type_declarations.element[0] = some (td: TypeDeclaration) {
    td.name = "Movement" &&
    td.definition = mk_some<DataType>(some (dt: DataType) {
      dt.kind = DataTypeKind.Enum &&
      dt.enum_type.length = 4 &&
      dt.enum_type.element[0] = "Turn_Right" &&
      dt.enum_type.element[1] = "Turn_Left" &&
      dt.enum_type.element[2] = "Move_Forward" &&
      dt.enum_type.element[3] = "Stop"
    })
  } &&
  m.type_declarations.element[1] = some (td: TypeDeclaration) {
    td.name = "Direction" &&
    td.definition = mk_some<DataType>(some (dt: DataType) {
      dt.kind = DataTypeKind.Enum &&
      dt.enum_type.length = 4 &&
      dt.enum_type.element[0] = "North" &&
      dt.enum_type.element[1] = "South" &&
      dt.enum_type.element[2] = "East" &&
      dt.enum_type.element[3] = "West"
    })
  } &&
  m.type_declarations.element[2] = some (td: TypeDeclaration) {
    td.name = "Action" &&
    td.definition = mk_some<DataType>(some (dt: DataType) {
      dt.kind = DataTypeKind.Enum &&
      dt.enum_type.length = 4 &&
      dt.enum_type.element[0] = "Camera" &&
      dt.enum_type.element[1] = "Weapon" &&
      dt.enum_type.element[2] = "Land" &&
      dt.enum_type.element[3] = "None"
    })
  } &&
  m.type_declarations.element[3] = some (td: TypeDeclaration) {
    td.name = "Position" &&
    td.definition = mk_some<DataType>(some (dt: DataType) {
      dt.kind = DataTypeKind.Record &&
      dt.record_type.length = 2 &&
      dt.record_type.element[0] = some (rf: RecordField) {
        rf.name = "x" &&
        rf.dtype = IntegerType
      } &&
      dt.record_type.element[1] = some (rf: RecordField) {
        rf.name = "y" &&
        rf.dtype = IntegerType
      }
    })
  } &&
  m.type_declarations.element[4] = some (td: TypeDeclaration) {
    td.name = "TaskStatus" &&
    td.definition = mk_some<DataType>(some (dt: DataType) {
      dt.kind = DataTypeKind.Enum &&
      dt.enum_type.length = 4 &&
      dt.enum_type.element[0] = "Successful" &&
      dt.enum_type.element[1] = "Aborted" &&
      dt.enum_type.element[2] = "InProgress" &&
      dt.enum_type.element[3] = "Started"
    })
  } &&
  m.type_declarations.element[5] = some (td: TypeDeclaration) {
    td.name = "Task" &&
    td.definition = mk_some<DataType>(some (dt: DataType) {
      dt.kind = DataTypeKind.Record &&
      dt.record_type.length = 3 &&
      dt.record_type.element[0] = some (rf: RecordField) {
        rf.name = "waypoint" &&
        rf.dtype = some (dt: DataType) {
          dt.kind = DataTypeKind.UserDefined &&
          dt.user_defined_type = m.type_declarations.element[3]
      }
    } &&
    dt.record_type.element[1] = some (rf: RecordField) {
      rf.name = "action" &&
      rf.dtype = some (dt: DataType) {
        dt.kind = DataTypeKind.UserDefined &&
        dt.user_defined_type = m.type_declarations.element[2]
    }
  } &&
  dt.record_type.element[2] = some (rf: RecordField) {
    rf.name = "status" &&
    rf.dtype = some (dt: DataType) {
      dt.kind = DataTypeKind.UserDefined &&
      dt.user_defined_type = m.type_declarations.element[4]
  }
}})} &&
m.type_declarations.element[6] = some (td: TypeDeclaration) {
  td.name = "MotorCommand" &&
  td.definition = mk_some<DataType>(some (dt: DataType) {
    dt.kind = DataTypeKind.Enum &&
    dt.enum_type.length = 7 &&
    dt.enum_type.element[0] = "IncreaseX" &&
    dt.enum_type.element[1] = "DecreaseX" &&
    dt.enum_type.element[2] = "IncreaseY" &&
    dt.enum_type.element[3] = "DecreaseY" &&
    dt.enum_type.element[4] = "IncreaseYaw" &&
    dt.enum_type.element[5] = "DecreaseYaw" &&
    dt.enum_type.element[6] = "NoChange"
  })} &&
m.type_declarations.element[7] = some (td: TypeDeclaration) {
  td.name = "UAVState" &&
  td.definition = mk_some<DataType>(some (dt: DataType) {
    dt.kind = DataTypeKind.Enum &&
    dt.enum_type.length = 3 &&
    dt.enum_type.element[0] = "s_RETURN_TO_LAUNCH" &&
    dt.enum_type.element[1] = "s_AUTO_FLIGHT_MODE" &&
    dt.enum_type.element[2] = "s_MANUAL_FLIGHT_MODE"
  })} &&
m.type_declarations.element[8] = some (td: TypeDeclaration) {
  td.name = "YawAngle" &&
  td.definition = mk_some<DataType>(some (dt: DataType) {
    dt.kind = DataTypeKind.Enum &&
    dt.enum_type.length = 4 &&
    dt.enum_type.element[0] = "Y_0" &&
    dt.enum_type.element[1] = "Y_90" &&
    dt.enum_type.element[2] = "Y_180" &&
    dt.enum_type.element[3] = "Y_270"
  })} &&
m.type_declarations.element[9] = some (td: TypeDeclaration) {
  td.name = "Tasks" &&
  td.definition = mk_some<DataType>(some (dt: DataType) {
    dt.kind = DataTypeKind.Record &&
    dt.record_type.length = 3 &&
    dt.record_type.element[0] = some (rf: RecordField) {
      rf.name = "task1" &&
      rf.dtype = some (dt: DataType) {
        dt.kind = DataTypeKind.UserDefined &&
        dt.user_defined_type = m.type_declarations.element[5]
    }
  } &&
  dt.record_type.element[1] = some (rf: RecordField) {
    rf.name = "task2" &&
    rf.dtype = some (dt: DataType) {
      dt.kind = DataTypeKind.UserDefined &&
      dt.user_defined_type = m.type_declarations.element[5]
  }} &&
dt.record_type.element[2] = some (rf: RecordField) {
  rf.name = "task3" &&
  rf.dtype = some (dt: DataType) {
    dt.kind = DataTypeKind.UserDefined &&
    dt.user_defined_type = m.type_declarations.element[5]}}})} &&
m.type_declarations.element[10] = some (td: TypeDeclaration) {
  td.name = "ATE6Type" &&
  td.definition = mk_some<DataType>(some (dt: DataType) {
    dt.kind = DataTypeKind.Enum &&
    dt.enum_type.length = 2 &&
    dt.enum_type.element[0] = "RC_Abnormal" &&
    dt.enum_type.element[1] = "RC_Normal"
  })} &&
m.type_declarations.element[11] = some (td: TypeDeclaration) {
  td.name = "ATE7Type" &&
  td.definition = mk_some<DataType>(some (dt: DataType) {
    dt.kind = DataTypeKind.Enum &&
    dt.enum_type.length = 2 &&
    dt.enum_type.element[0] = "Inadequate" &&
    dt.enum_type.element[1] = "Adequate"
  })} &&m.component_types.length = 15 &&
m.component_types.element[0] = some (ct: ComponentType) {
  ct.name = "Actuators" &&
  ct.ports.length = 6 &&
  ct.ports.element[0] = some(p: Port) {
    p.name = "cmd" &&
    p.mode = PortMode.In &&
    p.ptype = mk_some<DataType>(some (dt: DataType) {
      dt.kind = DataTypeKind.UserDefined &&
      dt.user_defined_type = m.type_declarations.element[6]
  })} &&
ct.ports.element[1] = some(p: Port) {
  p.name = "payloadCmdFC" &&
  p.mode = PortMode.In &&
  p.ptype = mk_some<DataType>(some (dt: DataType) {
    dt.kind = DataTypeKind.UserDefined &&
    dt.user_defined_type = m.type_declarations.element[2]})} &&
ct.ports.element[2] = some(p: Port) {
  p.name = "mstate" &&
  p.mode = PortMode.In &&
  p.ptype = mk_some<DataType>(some (dt: DataType) {
    dt.kind = DataTypeKind.UserDefined &&
    dt.user_defined_type = m.type_declarations.element[7]})} &&
ct.ports.element[3] = some(p: Port) {
  p.name = "payloadCmdRC" &&
  p.mode = PortMode.In &&
  p.ptype = mk_some<DataType>(some (dt: DataType) {
    dt.kind = DataTypeKind.UserDefined &&
    dt.user_defined_type = m.type_declarations.element[2]})} &&
ct.ports.element[4] = some(p: Port) {
  p.name = "battery_level" &&
  p.mode = PortMode.Out &&
  p.ptype = mk_some<DataType>(IntegerType)} &&
ct.ports.element[5] = some(p: Port) {
  p.name = "payload_performed" &&
  p.mode = PortMode.Out &&
  p.ptype = mk_some<DataType>(BoolType)} &&
ct.contract = mk_some<ContractSpec>(some (csp: ContractSpec) {
  csp.constant_declarations.length = 0 &&
  csp.variable_declarations.length = 6 &&
  csp.variable_declarations.element[0] = some (sd: SymbolDefinition) {
    sd.name = "payloadCMD" &&
    sd.dtype = some (dt: DataType) {
      dt.kind = DataTypeKind.UserDefined &&
      dt.user_defined_type = m.type_declarations.element[2]
  } &&
  sd.definition = some (e: Expression) {
    e.kind = ExpressionKind.ConditionalExpr &&
    e.conditional_expr = some (ite: IfThenElse) {
      ite.condition = some (e: Expression) {
        e.kind = ExpressionKind.Equal &&
        e.equal = some (bo: BinaryOperation) {
          bo.lhs_operand = some (e: Expression) {
            e.kind = ExpressionKind.Id &&
            e.identifier = "mstate"
          } &&
          bo.rhs_operand = some (e: Expression) {
            e.kind = ExpressionKind.Id &&
            e.identifier = "s_MANUAL_FLIGHT_MODE"
          }
        }
      } &&
      ite.thenBranch = some (e: Expression) {
        e.kind = ExpressionKind.Id &&
        e.identifier = "payloadCmdRC"
      } &&
      ite.elseBranch = some (e: Expression) {
        e.kind = ExpressionKind.Id &&
        e.identifier = "payloadCmdFC"
      }
    }
  }} &&
csp.variable_declarations.element[1] = some (sd: SymbolDefinition) {
  sd.name = "prev_battery_level" &&
  sd.dtype = IntegerType &&
  sd.definition = some (e: Expression) {
    e.kind = ExpressionKind.Arrow &&
    e.arrow = some (bo: BinaryOperation) {
      bo.lhs_operand = some (e: Expression) {
        e.kind = ExpressionKind.Id &&
        e.identifier = "INITIAL_BATTERY_LEVEL"
      } &&
      bo.rhs_operand = some (e: Expression) {
        e.kind = ExpressionKind.Pre &&
        e.pre = some (e: Expression) {
          e.kind = ExpressionKind.Id &&
          e.identifier = "battery_level"
        }
      }
    }
  }} &&
csp.variable_declarations.element[2] = some (sd: SymbolDefinition) {
  sd.name = "battery4pos_consumed" &&
  sd.dtype = BoolType &&
  sd.definition = some (e: Expression) {
    e.kind = ExpressionKind.Or &&
    e.or = some (bo: BinaryOperation) {
      bo.lhs_operand = some (e: Expression) {
        e.kind = ExpressionKind.Or &&
        e.or = some (bo: BinaryOperation) {
          bo.lhs_operand = some (e: Expression) {
            e.kind = ExpressionKind.Or &&
            e.or = some (bo: BinaryOperation) {
              bo.lhs_operand = some (e: Expression) {
                e.kind = ExpressionKind.Or &&
                e.or = some (bo: BinaryOperation) {
                  bo.lhs_operand = some (e: Expression) {
                    e.kind = ExpressionKind.Equal &&
                    e.equal = some (bo: BinaryOperation) {
                      bo.lhs_operand = some (e: Expression) {
                        e.kind = ExpressionKind.Id &&
                        e.identifier = "cmd"
                      } &&
                      bo.rhs_operand = some (e: Expression) {
                        e.kind = ExpressionKind.Id &&
                        e.identifier = "IncreaseY"
                      }
                    }
                  } &&
                  bo.rhs_operand = some (e: Expression) {
                    e.kind = ExpressionKind.Equal &&
                    e.equal = some (bo: BinaryOperation) {
                      bo.lhs_operand = some (e: Expression) {
                        e.kind = ExpressionKind.Id &&
                        e.identifier = "cmd"
                      } &&
                      bo.rhs_operand = some (e: Expression) {
                        e.kind = ExpressionKind.Id &&
                        e.identifier = "IncreaseX"
                      }
                    }
                  }
                }
              } &&
              bo.rhs_operand = some (e: Expression) {
                e.kind = ExpressionKind.Equal &&
                e.equal = some (bo: BinaryOperation) {
                  bo.lhs_operand = some (e: Expression) {
                    e.kind = ExpressionKind.Id &&
                    e.identifier = "cmd"
                  } &&
                  bo.rhs_operand = some (e: Expression) {
                    e.kind = ExpressionKind.Id &&
                    e.identifier = "DecreaseY"
                  }
                }
              }
            }
          } &&
          bo.rhs_operand = some (e: Expression) {
            e.kind = ExpressionKind.Equal &&
            e.equal = some (bo: BinaryOperation) {
              bo.lhs_operand = some (e: Expression) {
                e.kind = ExpressionKind.Id &&
                e.identifier = "cmd"
              } &&
              bo.rhs_operand = some (e: Expression) {
                e.kind = ExpressionKind.Id &&
                e.identifier = "DecreaseX"
              }
            }
          }
        }
      } &&
      bo.rhs_operand = some (e: Expression) {
        e.kind = ExpressionKind.Equal &&
        e.equal = some (bo: BinaryOperation) {
          bo.lhs_operand = some (e: Expression) {
            e.kind = ExpressionKind.Id &&
            e.identifier = "cmd"
          } &&
          bo.rhs_operand = some (e: Expression) {
            e.kind = ExpressionKind.Id &&
            e.identifier = "NoChange"
          }
        }
      }
    }
  }} &&
csp.variable_declarations.element[3] = some (sd: SymbolDefinition) {
  sd.name = "battery4dir_consumed" &&
  sd.dtype = BoolType &&
  sd.definition = some (e: Expression) {
    e.kind = ExpressionKind.Or &&
    e.or = some (bo: BinaryOperation) {
      bo.lhs_operand = some (e: Expression) {
        e.kind = ExpressionKind.Equal &&
        e.equal = some (bo: BinaryOperation) {
          bo.lhs_operand = some (e: Expression) {
            e.kind = ExpressionKind.Id &&
            e.identifier = "cmd"
          } &&
          bo.rhs_operand = some (e: Expression) {
            e.kind = ExpressionKind.Id &&
            e.identifier = "IncreaseYaw"
          }
        }
      } &&
      bo.rhs_operand = some (e: Expression) {
        e.kind = ExpressionKind.Equal &&
        e.equal = some (bo: BinaryOperation) {
          bo.lhs_operand = some (e: Expression) {
            e.kind = ExpressionKind.Id &&
            e.identifier = "cmd"
          } &&
          bo.rhs_operand = some (e: Expression) {
            e.kind = ExpressionKind.Id &&
            e.identifier = "DecreaseYaw"
          }
        }
      }
    }
  }} &&
csp.variable_declarations.element[4] = some (sd: SymbolDefinition) {
  sd.name = "battery_consumed" &&
  sd.dtype = BoolType &&
  sd.definition = some (e: Expression) {
    e.kind = ExpressionKind.Or &&
    e.or = some (bo: BinaryOperation) {
      bo.lhs_operand = some (e: Expression) {
        e.kind = ExpressionKind.Or &&
        e.or = some (bo: BinaryOperation) {
          bo.lhs_operand = some (e: Expression) {
            e.kind = ExpressionKind.Id &&
            e.identifier = "battery4pos_consumed"
          } &&
          bo.rhs_operand = some (e: Expression) {
            e.kind = ExpressionKind.Id &&
            e.identifier = "battery4dir_consumed"
          }
        }
      } &&
      bo.rhs_operand = some (e: Expression) {
        e.kind = ExpressionKind.Id &&
        e.identifier = "payload_performed"
      }
    }
  }} &&
csp.variable_declarations.element[5] = some (sd: SymbolDefinition) {
  sd.name = "battery_level_diff" &&
  sd.dtype = IntegerType &&
  sd.definition = some (e: Expression) {
    e.kind = ExpressionKind.Minus &&
    e.minus = some (bo: BinaryOperation) {
      bo.lhs_operand = some (e: Expression) {
        e.kind = ExpressionKind.Id &&
        e.identifier = "prev_battery_level"
      } &&
      bo.rhs_operand = some (e: Expression) {
        e.kind = ExpressionKind.Id &&
        e.identifier = "battery_level"
      }
    }
  }} &&csp.assumes.length = 0 &&csp.guarantees.length = 3 &&
csp.guarantees.element[0] = some (ci: ContractItem) {
  ci.name = mk_some<Identifier>("payload_performed_Def") &&
  ci.expression = some (e: Expression) {
    e.kind = ExpressionKind.Equal &&
    e.equal = some (bo: BinaryOperation) {
      bo.lhs_operand = some (e: Expression) {
        e.kind = ExpressionKind.Id &&
        e.identifier = "payload_performed"
      } &&
      bo.rhs_operand = some (e: Expression) {
        e.kind = ExpressionKind.And &&
        e.and = some (bo: BinaryOperation) {
          bo.lhs_operand = some (e: Expression) {
            e.kind = ExpressionKind.NotEqual &&
            e.not_equal = some (bo: BinaryOperation) {
              bo.lhs_operand = some (e: Expression) {
                e.kind = ExpressionKind.Id &&
                e.identifier = "payloadCMD"
              } &&
              bo.rhs_operand = some (e: Expression) {
                e.kind = ExpressionKind.Id &&
                e.identifier = "None"
              }
            }
          } &&
          bo.rhs_operand = some (e: Expression) {
            e.kind = ExpressionKind.Equal &&
            e.equal = some (bo: BinaryOperation) {
              bo.lhs_operand = some (e: Expression) {
                e.kind = ExpressionKind.Id &&
                e.identifier = "cmd"
              } &&
              bo.rhs_operand = some (e: Expression) {
                e.kind = ExpressionKind.Id &&
                e.identifier = "NoChange"
              }
            }
          }
        }
      }
    }
  }} &&
csp.guarantees.element[1] = some (ci: ContractItem) {
  ci.name = mk_some<Identifier>("battery_level_Def1") &&
  ci.expression = some (e: Expression) {
    e.kind = ExpressionKind.Implies &&
    e.implies = some (bo: BinaryOperation) {
      bo.lhs_operand = some (e: Expression) {
        e.kind = ExpressionKind.Not &&
        e.not = some (e: Expression) {
          e.kind = ExpressionKind.Id &&
          e.identifier = "battery_consumed"
        }
      } &&
      bo.rhs_operand = some (e: Expression) {
        e.kind = ExpressionKind.Equal &&
        e.equal = some (bo: BinaryOperation) {
          bo.lhs_operand = some (e: Expression) {
            e.kind = ExpressionKind.Id &&
            e.identifier = "battery_level_diff"
          } &&
          bo.rhs_operand = some (e: Expression) {
            e.kind = ExpressionKind.IntLiteral &&
            e.int_literal = 0
          }
        }
      }
    }
  }} &&
csp.guarantees.element[2] = some (ci: ContractItem) {
  ci.name = mk_some<Identifier>("battery_level_Def2") &&
  ci.expression = some (e: Expression) {
    e.kind = ExpressionKind.Implies &&
    e.implies = some (bo: BinaryOperation) {
      bo.lhs_operand = some (e: Expression) {
        e.kind = ExpressionKind.Id &&
        e.identifier = "battery_consumed"
      } &&
      bo.rhs_operand = some (e: Expression) {
        e.kind = ExpressionKind.And &&
        e.and = some (bo: BinaryOperation) {
          bo.lhs_operand = some (e: Expression) {
            e.kind = ExpressionKind.LessThanOrEqualTo &&
            e.less_than_or_equal_to = some (bo: BinaryOperation) {
              bo.lhs_operand = some (e: Expression) {
                e.kind = ExpressionKind.Id &&
                e.identifier = "BATTERY_CONSUMPTION_LOWER_BOUND"
              } &&
              bo.rhs_operand = some (e: Expression) {
                e.kind = ExpressionKind.Id &&
                e.identifier = "battery_level_diff"
              }
            }
          } &&
          bo.rhs_operand = some (e: Expression) {
            e.kind = ExpressionKind.LessThanOrEqualTo &&
            e.less_than_or_equal_to = some (bo: BinaryOperation) {
              bo.lhs_operand = some (e: Expression) {
                e.kind = ExpressionKind.Id &&
                e.identifier = "battery_level_diff"
              } &&
              bo.rhs_operand = some (e: Expression) {
                e.kind = ExpressionKind.Id &&
                e.identifier = "BATTERY_CONSUMPTION_UPPER_BOUND"
              }
            }
          }
        }
      }
    }
  }} &&csp.modes.length = 0 &&csp.imports.length = 0})} &&
m.component_types.element[1] = some (ct: ComponentType) {
  ct.name = "BatteryHealthCheck" &&
  ct.ports.length = 2 &&
  ct.ports.element[0] = some(p: Port) {
    p.name = "battery_level" &&
    p.mode = PortMode.In &&
    p.ptype = mk_some<DataType>(IntegerType)
  } &&
  ct.ports.element[1] = some(p: Port) {
    p.name = "ATE7" &&
    p.mode = PortMode.Out &&
    p.ptype = mk_some<DataType>(some (dt: DataType) {
      dt.kind = DataTypeKind.UserDefined &&
      dt.user_defined_type = m.type_declarations.element[11]
  })} &&
ct.contract = mk_some<ContractSpec>(some (csp: ContractSpec) {
  csp.constant_declarations.length = 0 &&
  csp.variable_declarations.length = 1 &&
  csp.variable_declarations.element[0] = some (sd: SymbolDefinition) {
    sd.name = "next_ATE7" &&
    sd.dtype = some (dt: DataType) {
      dt.kind = DataTypeKind.UserDefined &&
      dt.user_defined_type = m.type_declarations.element[11]
  } &&
  sd.definition = some (e: Expression) {
    e.kind = ExpressionKind.ConditionalExpr &&
    e.conditional_expr = some (ite: IfThenElse) {
      ite.condition = some (e: Expression) {
        e.kind = ExpressionKind.LessThan &&
        e.less_than = some (bo: BinaryOperation) {
          bo.lhs_operand = some (e: Expression) {
            e.kind = ExpressionKind.Id &&
            e.identifier = "battery_level"
          } &&
          bo.rhs_operand = some (e: Expression) {
            e.kind = ExpressionKind.Id &&
            e.identifier = "BATTERY_LEVEL_THRESHOLD"
          }
        }
      } &&
      ite.thenBranch = some (e: Expression) {
        e.kind = ExpressionKind.Id &&
        e.identifier = "Adequate"
      } &&
      ite.elseBranch = some (e: Expression) {
        e.kind = ExpressionKind.Id &&
        e.identifier = "Inadequate"
      }
    }
  }} &&csp.assumes.length = 0 &&csp.guarantees.length = 1 &&
csp.guarantees.element[0] = some (ci: ContractItem) {
  ci.name = mk_some<Identifier>("ATE7_Def") &&
  ci.expression = some (e: Expression) {
    e.kind = ExpressionKind.Equal &&
    e.equal = some (bo: BinaryOperation) {
      bo.lhs_operand = some (e: Expression) {
        e.kind = ExpressionKind.Id &&
        e.identifier = "ATE7"
      } &&
      bo.rhs_operand = some (e: Expression) {
        e.kind = ExpressionKind.Arrow &&
        e.arrow = some (bo: BinaryOperation) {
          bo.lhs_operand = some (e: Expression) {
            e.kind = ExpressionKind.Id &&
            e.identifier = "Adequate"
          } &&
          bo.rhs_operand = some (e: Expression) {
            e.kind = ExpressionKind.Pre &&
            e.pre = some (e: Expression) {
              e.kind = ExpressionKind.Id &&
              e.identifier = "next_ATE7"
            }
          }
        }
      }
    }
  }} &&csp.modes.length = 0 &&csp.imports.length = 0})} &&
m.component_types.element[2] = some (ct: ComponentType) {
  ct.name = "DME_VOR" &&
  ct.ports.length = 4 &&
  ct.ports.element[0] = some(p: Port) {
    p.name = "location_source_pos" &&
    p.mode = PortMode.In &&
    p.ptype = mk_some<DataType>(some (dt: DataType) {
      dt.kind = DataTypeKind.UserDefined &&
      dt.user_defined_type = m.type_declarations.element[3]
  })} &&
ct.ports.element[1] = some(p: Port) {
  p.name = "location_source_dir" &&
  p.mode = PortMode.In &&
  p.ptype = mk_some<DataType>(some (dt: DataType) {
    dt.kind = DataTypeKind.UserDefined &&
    dt.user_defined_type = m.type_declarations.element[1]})} &&
ct.ports.element[2] = some(p: Port) {
  p.name = "pos" &&
  p.mode = PortMode.Out &&
  p.ptype = mk_some<DataType>(some (dt: DataType) {
    dt.kind = DataTypeKind.UserDefined &&
    dt.user_defined_type = m.type_declarations.element[3]})} &&
ct.ports.element[3] = some(p: Port) {
  p.name = "dir" &&
  p.mode = PortMode.Out &&
  p.ptype = mk_some<DataType>(some (dt: DataType) {
    dt.kind = DataTypeKind.UserDefined &&
    dt.user_defined_type = m.type_declarations.element[1]})} &&
ct.contract = mk_some<ContractSpec>(some (csp: ContractSpec) {
  csp.constant_declarations.length = 0 &&
  csp.variable_declarations.length = 0 &&
  csp.assumes.length = 0 &&
  csp.guarantees.length = 2 &&
  csp.guarantees.element[0] = some (ci: ContractItem) {
    ci.name = mk_some<Identifier>("pos_Def") &&
    ci.expression = some (e: Expression) {
      e.kind = ExpressionKind.Equal &&
      e.equal = some (bo: BinaryOperation) {
        bo.lhs_operand = some (e: Expression) {
          e.kind = ExpressionKind.Id &&
          e.identifier = "pos"
        } &&
        bo.rhs_operand = some (e: Expression) {
          e.kind = ExpressionKind.Id &&
          e.identifier = "location_source_pos"
        }
      }
    }
  } &&
  csp.guarantees.element[1] = some (ci: ContractItem) {
    ci.name = mk_some<Identifier>("dir_Def") &&
    ci.expression = some (e: Expression) {
      e.kind = ExpressionKind.Equal &&
      e.equal = some (bo: BinaryOperation) {
        bo.lhs_operand = some (e: Expression) {
          e.kind = ExpressionKind.Id &&
          e.identifier = "dir"
        } &&
        bo.rhs_operand = some (e: Expression) {
          e.kind = ExpressionKind.Id &&
          e.identifier = "location_source_dir"
        }
      }
    }
  } &&
  csp.modes.length = 0 &&
  csp.imports.length = 0})} &&
m.component_types.element[3] = some (ct: ComponentType) {
  ct.name = "FlightController" &&
  ct.ports.length = 6 &&
  ct.ports.element[0] = some(p: Port) {
    p.name = "dest_reached" &&
    p.mode = PortMode.In &&
    p.ptype = mk_some<DataType>(BoolType)
  } &&
  ct.ports.element[1] = some(p: Port) {
    p.name = "payload_performed" &&
    p.mode = PortMode.In &&
    p.ptype = mk_some<DataType>(BoolType)
  } &&
  ct.ports.element[2] = some(p: Port) {
    p.name = "tasks" &&
    p.mode = PortMode.In &&
    p.ptype = mk_some<DataType>(some (dt: DataType) {
      dt.kind = DataTypeKind.UserDefined &&
      dt.user_defined_type = m.type_declarations.element[9]
  })} &&
ct.ports.element[3] = some(p: Port) {
  p.name = "mstate" &&
  p.mode = PortMode.In &&
  p.ptype = mk_some<DataType>(some (dt: DataType) {
    dt.kind = DataTypeKind.UserDefined &&
    dt.user_defined_type = m.type_declarations.element[7]})} &&
ct.ports.element[4] = some(p: Port) {
  p.name = "payloadCmd" &&
  p.mode = PortMode.Out &&
  p.ptype = mk_some<DataType>(some (dt: DataType) {
    dt.kind = DataTypeKind.UserDefined &&
    dt.user_defined_type = m.type_declarations.element[2]})} &&
ct.ports.element[5] = some(p: Port) {
  p.name = "waypoint" &&
  p.mode = PortMode.Out &&
  p.ptype = mk_some<DataType>(some (dt: DataType) {
    dt.kind = DataTypeKind.UserDefined &&
    dt.user_defined_type = m.type_declarations.element[3]})} &&
ct.contract = mk_some<ContractSpec>(some (csp: ContractSpec) {
  csp.constant_declarations.length = 0 &&
  csp.variable_declarations.length = 24 &&
  csp.variable_declarations.element[0] = some (sd: SymbolDefinition) {
    sd.name = "curr_dest_reached" &&
    sd.dtype = BoolType &&
    sd.definition = some (e: Expression) {
      e.kind = ExpressionKind.Arrow &&
      e.arrow = some (bo: BinaryOperation) {
        bo.lhs_operand = some (e: Expression) {
          e.kind = ExpressionKind.BoolLiteral &&
          e.bool_literal = false
        } &&
        bo.rhs_operand = some (e: Expression) {
          e.kind = ExpressionKind.Pre &&
          e.pre = some (e: Expression) {
            e.kind = ExpressionKind.Id &&
            e.identifier = "dest_reached"
          }
        }
      }
    }
  } &&
  csp.variable_declarations.element[1] = some (sd: SymbolDefinition) {
    sd.name = "curr_payload_performed" &&
    sd.dtype = BoolType &&
    sd.definition = some (e: Expression) {
      e.kind = ExpressionKind.Arrow &&
      e.arrow = some (bo: BinaryOperation) {
        bo.lhs_operand = some (e: Expression) {
          e.kind = ExpressionKind.BoolLiteral &&
          e.bool_literal = false
        } &&
        bo.rhs_operand = some (e: Expression) {
          e.kind = ExpressionKind.Pre &&
          e.pre = some (e: Expression) {
            e.kind = ExpressionKind.Id &&
            e.identifier = "payload_performed"
          }
        }
      }
    }
  } &&
  csp.variable_declarations.element[2] = some (sd: SymbolDefinition) {
    sd.name = "task1" &&
    sd.dtype = some (dt: DataType) {
      dt.kind = DataTypeKind.UserDefined &&
      dt.user_defined_type = m.type_declarations.element[5]
  } &&
  sd.definition = some (e: Expression) {
    e.kind = ExpressionKind.Arrow &&
    e.arrow = some (bo: BinaryOperation) {
      bo.lhs_operand = some (e: Expression) {
        e.kind = ExpressionKind.RecordProjection &&
        e.record_projection = some (rp: RecordProjection) {
          rp.record_reference = some (e: Expression) {
            e.kind = ExpressionKind.Id &&
            e.identifier = "tasks"
          } &&
          rp.field_id = "task1"
        }
      } &&
      bo.rhs_operand = some (e: Expression) {
        e.kind = ExpressionKind.Pre &&
        e.pre = some (e: Expression) {
          e.kind = ExpressionKind.Id &&
          e.identifier = "upd_task1"
        }
      }
    }
  }} &&
csp.variable_declarations.element[3] = some (sd: SymbolDefinition) {
  sd.name = "task2" &&
  sd.dtype = some (dt: DataType) {
    dt.kind = DataTypeKind.UserDefined &&
    dt.user_defined_type = m.type_declarations.element[5]} &&
sd.definition = some (e: Expression) {
  e.kind = ExpressionKind.Arrow &&
  e.arrow = some (bo: BinaryOperation) {
    bo.lhs_operand = some (e: Expression) {
      e.kind = ExpressionKind.RecordProjection &&
      e.record_projection = some (rp: RecordProjection) {
        rp.record_reference = some (e: Expression) {
          e.kind = ExpressionKind.Id &&
          e.identifier = "tasks"
        } &&
        rp.field_id = "task2"
      }
    } &&
    bo.rhs_operand = some (e: Expression) {
      e.kind = ExpressionKind.Pre &&
      e.pre = some (e: Expression) {
        e.kind = ExpressionKind.Id &&
        e.identifier = "upd_task2"
      }
    }
  }}} &&
csp.variable_declarations.element[4] = some (sd: SymbolDefinition) {
  sd.name = "task3" &&
  sd.dtype = some (dt: DataType) {
    dt.kind = DataTypeKind.UserDefined &&
    dt.user_defined_type = m.type_declarations.element[5]} &&
sd.definition = some (e: Expression) {
  e.kind = ExpressionKind.Arrow &&
  e.arrow = some (bo: BinaryOperation) {
    bo.lhs_operand = some (e: Expression) {
      e.kind = ExpressionKind.RecordProjection &&
      e.record_projection = some (rp: RecordProjection) {
        rp.record_reference = some (e: Expression) {
          e.kind = ExpressionKind.Id &&
          e.identifier = "tasks"
        } &&
        rp.field_id = "task3"
      }
    } &&
    bo.rhs_operand = some (e: Expression) {
      e.kind = ExpressionKind.Pre &&
      e.pre = some (e: Expression) {
        e.kind = ExpressionKind.Id &&
        e.identifier = "upd_task3"
      }
    }
  }}} &&
csp.variable_declarations.element[5] = some (sd: SymbolDefinition) {
  sd.name = "s_auto_task1_started" &&
  sd.dtype = BoolType &&
  sd.definition = some (e: Expression) {
    e.kind = ExpressionKind.And &&
    e.and = some (bo: BinaryOperation) {
      bo.lhs_operand = some (e: Expression) {
        e.kind = ExpressionKind.And &&
        e.and = some (bo: BinaryOperation) {
          bo.lhs_operand = some (e: Expression) {
            e.kind = ExpressionKind.Equal &&
            e.equal = some (bo: BinaryOperation) {
              bo.lhs_operand = some (e: Expression) {
                e.kind = ExpressionKind.Id &&
                e.identifier = "mstate"
              } &&
              bo.rhs_operand = some (e: Expression) {
                e.kind = ExpressionKind.Id &&
                e.identifier = "s_AUTO_FLIGHT_MODE"
              }
            }
          } &&
          bo.rhs_operand = some (e: Expression) {
            e.kind = ExpressionKind.Equal &&
            e.equal = some (bo: BinaryOperation) {
              bo.lhs_operand = some (e: Expression) {
                e.kind = ExpressionKind.RecordProjection &&
                e.record_projection = some (rp: RecordProjection) {
                  rp.record_reference = some (e: Expression) {
                    e.kind = ExpressionKind.Id &&
                    e.identifier = "task1"
                  } &&
                  rp.field_id = "status"
                }
              } &&
              bo.rhs_operand = some (e: Expression) {
                e.kind = ExpressionKind.Id &&
                e.identifier = "Started"
              }
            }
          }
        }
      } &&
      bo.rhs_operand = some (e: Expression) {
        e.kind = ExpressionKind.Or &&
        e.or = some (bo: BinaryOperation) {
          bo.lhs_operand = some (e: Expression) {
            e.kind = ExpressionKind.Not &&
            e.not = some (e: Expression) {
              e.kind = ExpressionKind.Id &&
              e.identifier = "curr_dest_reached"
            }
          } &&
          bo.rhs_operand = some (e: Expression) {
            e.kind = ExpressionKind.Not &&
            e.not = some (e: Expression) {
              e.kind = ExpressionKind.Id &&
              e.identifier = "curr_payload_performed"
            }
          }
        }
      }
    }
  }} &&
csp.variable_declarations.element[6] = some (sd: SymbolDefinition) {
  sd.name = "s_auto_task1_inprogress" &&
  sd.dtype = BoolType &&
  sd.definition = some (e: Expression) {
    e.kind = ExpressionKind.And &&
    e.and = some (bo: BinaryOperation) {
      bo.lhs_operand = some (e: Expression) {
        e.kind = ExpressionKind.And &&
        e.and = some (bo: BinaryOperation) {
          bo.lhs_operand = some (e: Expression) {
            e.kind = ExpressionKind.Equal &&
            e.equal = some (bo: BinaryOperation) {
              bo.lhs_operand = some (e: Expression) {
                e.kind = ExpressionKind.Id &&
                e.identifier = "mstate"
              } &&
              bo.rhs_operand = some (e: Expression) {
                e.kind = ExpressionKind.Id &&
                e.identifier = "s_AUTO_FLIGHT_MODE"
              }
            }
          } &&
          bo.rhs_operand = some (e: Expression) {
            e.kind = ExpressionKind.Equal &&
            e.equal = some (bo: BinaryOperation) {
              bo.lhs_operand = some (e: Expression) {
                e.kind = ExpressionKind.RecordProjection &&
                e.record_projection = some (rp: RecordProjection) {
                  rp.record_reference = some (e: Expression) {
                    e.kind = ExpressionKind.Id &&
                    e.identifier = "task1"
                  } &&
                  rp.field_id = "status"
                }
              } &&
              bo.rhs_operand = some (e: Expression) {
                e.kind = ExpressionKind.Id &&
                e.identifier = "InProgress"
              }
            }
          }
        }
      } &&
      bo.rhs_operand = some (e: Expression) {
        e.kind = ExpressionKind.Or &&
        e.or = some (bo: BinaryOperation) {
          bo.lhs_operand = some (e: Expression) {
            e.kind = ExpressionKind.Not &&
            e.not = some (e: Expression) {
              e.kind = ExpressionKind.Id &&
              e.identifier = "curr_dest_reached"
            }
          } &&
          bo.rhs_operand = some (e: Expression) {
            e.kind = ExpressionKind.Not &&
            e.not = some (e: Expression) {
              e.kind = ExpressionKind.Id &&
              e.identifier = "curr_payload_performed"
            }
          }
        }
      }
    }
  }} &&
csp.variable_declarations.element[7] = some (sd: SymbolDefinition) {
  sd.name = "s_auto_task1_successful" &&
  sd.dtype = BoolType &&
  sd.definition = some (e: Expression) {
    e.kind = ExpressionKind.And &&
    e.and = some (bo: BinaryOperation) {
      bo.lhs_operand = some (e: Expression) {
        e.kind = ExpressionKind.And &&
        e.and = some (bo: BinaryOperation) {
          bo.lhs_operand = some (e: Expression) {
            e.kind = ExpressionKind.And &&
            e.and = some (bo: BinaryOperation) {
              bo.lhs_operand = some (e: Expression) {
                e.kind = ExpressionKind.Equal &&
                e.equal = some (bo: BinaryOperation) {
                  bo.lhs_operand = some (e: Expression) {
                    e.kind = ExpressionKind.Id &&
                    e.identifier = "mstate"
                  } &&
                  bo.rhs_operand = some (e: Expression) {
                    e.kind = ExpressionKind.Id &&
                    e.identifier = "s_AUTO_FLIGHT_MODE"
                  }
                }
              } &&
              bo.rhs_operand = some (e: Expression) {
                e.kind = ExpressionKind.Equal &&
                e.equal = some (bo: BinaryOperation) {
                  bo.lhs_operand = some (e: Expression) {
                    e.kind = ExpressionKind.RecordProjection &&
                    e.record_projection = some (rp: RecordProjection) {
                      rp.record_reference = some (e: Expression) {
                        e.kind = ExpressionKind.Id &&
                        e.identifier = "task1"
                      } &&
                      rp.field_id = "status"
                    }
                  } &&
                  bo.rhs_operand = some (e: Expression) {
                    e.kind = ExpressionKind.Id &&
                    e.identifier = "InProgress"
                  }
                }
              }
            }
          } &&
          bo.rhs_operand = some (e: Expression) {
            e.kind = ExpressionKind.Id &&
            e.identifier = "curr_dest_reached"
          }
        }
      } &&
      bo.rhs_operand = some (e: Expression) {
        e.kind = ExpressionKind.Id &&
        e.identifier = "curr_payload_performed"
      }
    }
  }} &&
csp.variable_declarations.element[8] = some (sd: SymbolDefinition) {
  sd.name = "s_auto_task1_aborted" &&
  sd.dtype = BoolType &&
  sd.definition = some (e: Expression) {
    e.kind = ExpressionKind.And &&
    e.and = some (bo: BinaryOperation) {
      bo.lhs_operand = some (e: Expression) {
        e.kind = ExpressionKind.And &&
        e.and = some (bo: BinaryOperation) {
          bo.lhs_operand = some (e: Expression) {
            e.kind = ExpressionKind.And &&
            e.and = some (bo: BinaryOperation) {
              bo.lhs_operand = some (e: Expression) {
                e.kind = ExpressionKind.Equal &&
                e.equal = some (bo: BinaryOperation) {
                  bo.lhs_operand = some (e: Expression) {
                    e.kind = ExpressionKind.Id &&
                    e.identifier = "mstate"
                  } &&
                  bo.rhs_operand = some (e: Expression) {
                    e.kind = ExpressionKind.Id &&
                    e.identifier = "s_AUTO_FLIGHT_MODE"
                  }
                }
              } &&
              bo.rhs_operand = some (e: Expression) {
                e.kind = ExpressionKind.Equal &&
                e.equal = some (bo: BinaryOperation) {
                  bo.lhs_operand = some (e: Expression) {
                    e.kind = ExpressionKind.RecordProjection &&
                    e.record_projection = some (rp: RecordProjection) {
                      rp.record_reference = some (e: Expression) {
                        e.kind = ExpressionKind.Id &&
                        e.identifier = "task1"
                      } &&
                      rp.field_id = "status"
                    }
                  } &&
                  bo.rhs_operand = some (e: Expression) {
                    e.kind = ExpressionKind.Id &&
                    e.identifier = "InProgress"
                  }
                }
              }
            }
          } &&
          bo.rhs_operand = some (e: Expression) {
            e.kind = ExpressionKind.Id &&
            e.identifier = "curr_dest_reached"
          }
        }
      } &&
      bo.rhs_operand = some (e: Expression) {
        e.kind = ExpressionKind.Not &&
        e.not = some (e: Expression) {
          e.kind = ExpressionKind.Id &&
          e.identifier = "curr_payload_performed"
        }
      }
    }
  }} &&
csp.variable_declarations.element[9] = some (sd: SymbolDefinition) {
  sd.name = "s_auto_task2_started" &&
  sd.dtype = BoolType &&
  sd.definition = some (e: Expression) {
    e.kind = ExpressionKind.And &&
    e.and = some (bo: BinaryOperation) {
      bo.lhs_operand = some (e: Expression) {
        e.kind = ExpressionKind.And &&
        e.and = some (bo: BinaryOperation) {
          bo.lhs_operand = some (e: Expression) {
            e.kind = ExpressionKind.And &&
            e.and = some (bo: BinaryOperation) {
              bo.lhs_operand = some (e: Expression) {
                e.kind = ExpressionKind.Equal &&
                e.equal = some (bo: BinaryOperation) {
                  bo.lhs_operand = some (e: Expression) {
                    e.kind = ExpressionKind.Id &&
                    e.identifier = "mstate"
                  } &&
                  bo.rhs_operand = some (e: Expression) {
                    e.kind = ExpressionKind.Id &&
                    e.identifier = "s_AUTO_FLIGHT_MODE"
                  }
                }
              } &&
              bo.rhs_operand = some (e: Expression) {
                e.kind = ExpressionKind.Equal &&
                e.equal = some (bo: BinaryOperation) {
                  bo.lhs_operand = some (e: Expression) {
                    e.kind = ExpressionKind.RecordProjection &&
                    e.record_projection = some (rp: RecordProjection) {
                      rp.record_reference = some (e: Expression) {
                        e.kind = ExpressionKind.Id &&
                        e.identifier = "task1"
                      } &&
                      rp.field_id = "status"
                    }
                  } &&
                  bo.rhs_operand = some (e: Expression) {
                    e.kind = ExpressionKind.Id &&
                    e.identifier = "Successful"
                  }
                }
              }
            }
          } &&
          bo.rhs_operand = some (e: Expression) {
            e.kind = ExpressionKind.Equal &&
            e.equal = some (bo: BinaryOperation) {
              bo.lhs_operand = some (e: Expression) {
                e.kind = ExpressionKind.RecordProjection &&
                e.record_projection = some (rp: RecordProjection) {
                  rp.record_reference = some (e: Expression) {
                    e.kind = ExpressionKind.Id &&
                    e.identifier = "task2"
                  } &&
                  rp.field_id = "status"
                }
              } &&
              bo.rhs_operand = some (e: Expression) {
                e.kind = ExpressionKind.Id &&
                e.identifier = "Started"
              }
            }
          }
        }
      } &&
      bo.rhs_operand = some (e: Expression) {
        e.kind = ExpressionKind.Or &&
        e.or = some (bo: BinaryOperation) {
          bo.lhs_operand = some (e: Expression) {
            e.kind = ExpressionKind.Not &&
            e.not = some (e: Expression) {
              e.kind = ExpressionKind.Id &&
              e.identifier = "curr_dest_reached"
            }
          } &&
          bo.rhs_operand = some (e: Expression) {
            e.kind = ExpressionKind.Not &&
            e.not = some (e: Expression) {
              e.kind = ExpressionKind.Id &&
              e.identifier = "curr_payload_performed"
            }
          }
        }
      }
    }
  }} &&
csp.variable_declarations.element[10] = some (sd: SymbolDefinition) {
  sd.name = "s_auto_task2_inprogress" &&
  sd.dtype = BoolType &&
  sd.definition = some (e: Expression) {
    e.kind = ExpressionKind.And &&
    e.and = some (bo: BinaryOperation) {
      bo.lhs_operand = some (e: Expression) {
        e.kind = ExpressionKind.And &&
        e.and = some (bo: BinaryOperation) {
          bo.lhs_operand = some (e: Expression) {
            e.kind = ExpressionKind.And &&
            e.and = some (bo: BinaryOperation) {
              bo.lhs_operand = some (e: Expression) {
                e.kind = ExpressionKind.Equal &&
                e.equal = some (bo: BinaryOperation) {
                  bo.lhs_operand = some (e: Expression) {
                    e.kind = ExpressionKind.Id &&
                    e.identifier = "mstate"
                  } &&
                  bo.rhs_operand = some (e: Expression) {
                    e.kind = ExpressionKind.Id &&
                    e.identifier = "s_AUTO_FLIGHT_MODE"
                  }
                }
              } &&
              bo.rhs_operand = some (e: Expression) {
                e.kind = ExpressionKind.Equal &&
                e.equal = some (bo: BinaryOperation) {
                  bo.lhs_operand = some (e: Expression) {
                    e.kind = ExpressionKind.RecordProjection &&
                    e.record_projection = some (rp: RecordProjection) {
                      rp.record_reference = some (e: Expression) {
                        e.kind = ExpressionKind.Id &&
                        e.identifier = "task1"
                      } &&
                      rp.field_id = "status"
                    }
                  } &&
                  bo.rhs_operand = some (e: Expression) {
                    e.kind = ExpressionKind.Id &&
                    e.identifier = "Successful"
                  }
                }
              }
            }
          } &&
          bo.rhs_operand = some (e: Expression) {
            e.kind = ExpressionKind.Equal &&
            e.equal = some (bo: BinaryOperation) {
              bo.lhs_operand = some (e: Expression) {
                e.kind = ExpressionKind.RecordProjection &&
                e.record_projection = some (rp: RecordProjection) {
                  rp.record_reference = some (e: Expression) {
                    e.kind = ExpressionKind.Id &&
                    e.identifier = "task2"
                  } &&
                  rp.field_id = "status"
                }
              } &&
              bo.rhs_operand = some (e: Expression) {
                e.kind = ExpressionKind.Id &&
                e.identifier = "InProgress"
              }
            }
          }
        }
      } &&
      bo.rhs_operand = some (e: Expression) {
        e.kind = ExpressionKind.Or &&
        e.or = some (bo: BinaryOperation) {
          bo.lhs_operand = some (e: Expression) {
            e.kind = ExpressionKind.Not &&
            e.not = some (e: Expression) {
              e.kind = ExpressionKind.Id &&
              e.identifier = "curr_dest_reached"
            }
          } &&
          bo.rhs_operand = some (e: Expression) {
            e.kind = ExpressionKind.Not &&
            e.not = some (e: Expression) {
              e.kind = ExpressionKind.Id &&
              e.identifier = "curr_payload_performed"
            }
          }
        }
      }
    }
  }} &&
csp.variable_declarations.element[11] = some (sd: SymbolDefinition) {
  sd.name = "s_auto_task2_successful" &&
  sd.dtype = BoolType &&
  sd.definition = some (e: Expression) {
    e.kind = ExpressionKind.And &&
    e.and = some (bo: BinaryOperation) {
      bo.lhs_operand = some (e: Expression) {
        e.kind = ExpressionKind.And &&
        e.and = some (bo: BinaryOperation) {
          bo.lhs_operand = some (e: Expression) {
            e.kind = ExpressionKind.And &&
            e.and = some (bo: BinaryOperation) {
              bo.lhs_operand = some (e: Expression) {
                e.kind = ExpressionKind.And &&
                e.and = some (bo: BinaryOperation) {
                  bo.lhs_operand = some (e: Expression) {
                    e.kind = ExpressionKind.Equal &&
                    e.equal = some (bo: BinaryOperation) {
                      bo.lhs_operand = some (e: Expression) {
                        e.kind = ExpressionKind.Id &&
                        e.identifier = "mstate"
                      } &&
                      bo.rhs_operand = some (e: Expression) {
                        e.kind = ExpressionKind.Id &&
                        e.identifier = "s_AUTO_FLIGHT_MODE"
                      }
                    }
                  } &&
                  bo.rhs_operand = some (e: Expression) {
                    e.kind = ExpressionKind.Equal &&
                    e.equal = some (bo: BinaryOperation) {
                      bo.lhs_operand = some (e: Expression) {
                        e.kind = ExpressionKind.RecordProjection &&
                        e.record_projection = some (rp: RecordProjection) {
                          rp.record_reference = some (e: Expression) {
                            e.kind = ExpressionKind.Id &&
                            e.identifier = "task1"
                          } &&
                          rp.field_id = "status"
                        }
                      } &&
                      bo.rhs_operand = some (e: Expression) {
                        e.kind = ExpressionKind.Id &&
                        e.identifier = "Successful"
                      }
                    }
                  }
                }
              } &&
              bo.rhs_operand = some (e: Expression) {
                e.kind = ExpressionKind.Equal &&
                e.equal = some (bo: BinaryOperation) {
                  bo.lhs_operand = some (e: Expression) {
                    e.kind = ExpressionKind.RecordProjection &&
                    e.record_projection = some (rp: RecordProjection) {
                      rp.record_reference = some (e: Expression) {
                        e.kind = ExpressionKind.Id &&
                        e.identifier = "task2"
                      } &&
                      rp.field_id = "status"
                    }
                  } &&
                  bo.rhs_operand = some (e: Expression) {
                    e.kind = ExpressionKind.Id &&
                    e.identifier = "InProgress"
                  }
                }
              }
            }
          } &&
          bo.rhs_operand = some (e: Expression) {
            e.kind = ExpressionKind.Id &&
            e.identifier = "curr_dest_reached"
          }
        }
      } &&
      bo.rhs_operand = some (e: Expression) {
        e.kind = ExpressionKind.Id &&
        e.identifier = "curr_payload_performed"
      }
    }
  }} &&
csp.variable_declarations.element[12] = some (sd: SymbolDefinition) {
  sd.name = "s_auto_task2_aborted" &&
  sd.dtype = BoolType &&
  sd.definition = some (e: Expression) {
    e.kind = ExpressionKind.And &&
    e.and = some (bo: BinaryOperation) {
      bo.lhs_operand = some (e: Expression) {
        e.kind = ExpressionKind.And &&
        e.and = some (bo: BinaryOperation) {
          bo.lhs_operand = some (e: Expression) {
            e.kind = ExpressionKind.And &&
            e.and = some (bo: BinaryOperation) {
              bo.lhs_operand = some (e: Expression) {
                e.kind = ExpressionKind.And &&
                e.and = some (bo: BinaryOperation) {
                  bo.lhs_operand = some (e: Expression) {
                    e.kind = ExpressionKind.Equal &&
                    e.equal = some (bo: BinaryOperation) {
                      bo.lhs_operand = some (e: Expression) {
                        e.kind = ExpressionKind.Id &&
                        e.identifier = "mstate"
                      } &&
                      bo.rhs_operand = some (e: Expression) {
                        e.kind = ExpressionKind.Id &&
                        e.identifier = "s_AUTO_FLIGHT_MODE"
                      }
                    }
                  } &&
                  bo.rhs_operand = some (e: Expression) {
                    e.kind = ExpressionKind.Equal &&
                    e.equal = some (bo: BinaryOperation) {
                      bo.lhs_operand = some (e: Expression) {
                        e.kind = ExpressionKind.RecordProjection &&
                        e.record_projection = some (rp: RecordProjection) {
                          rp.record_reference = some (e: Expression) {
                            e.kind = ExpressionKind.Id &&
                            e.identifier = "task1"
                          } &&
                          rp.field_id = "status"
                        }
                      } &&
                      bo.rhs_operand = some (e: Expression) {
                        e.kind = ExpressionKind.Id &&
                        e.identifier = "Successful"
                      }
                    }
                  }
                }
              } &&
              bo.rhs_operand = some (e: Expression) {
                e.kind = ExpressionKind.Equal &&
                e.equal = some (bo: BinaryOperation) {
                  bo.lhs_operand = some (e: Expression) {
                    e.kind = ExpressionKind.RecordProjection &&
                    e.record_projection = some (rp: RecordProjection) {
                      rp.record_reference = some (e: Expression) {
                        e.kind = ExpressionKind.Id &&
                        e.identifier = "task2"
                      } &&
                      rp.field_id = "status"
                    }
                  } &&
                  bo.rhs_operand = some (e: Expression) {
                    e.kind = ExpressionKind.Id &&
                    e.identifier = "InProgress"
                  }
                }
              }
            }
          } &&
          bo.rhs_operand = some (e: Expression) {
            e.kind = ExpressionKind.Id &&
            e.identifier = "curr_dest_reached"
          }
        }
      } &&
      bo.rhs_operand = some (e: Expression) {
        e.kind = ExpressionKind.Not &&
        e.not = some (e: Expression) {
          e.kind = ExpressionKind.Id &&
          e.identifier = "curr_payload_performed"
        }
      }
    }
  }} &&
csp.variable_declarations.element[13] = some (sd: SymbolDefinition) {
  sd.name = "s_auto_task3_started" &&
  sd.dtype = BoolType &&
  sd.definition = some (e: Expression) {
    e.kind = ExpressionKind.And &&
    e.and = some (bo: BinaryOperation) {
      bo.lhs_operand = some (e: Expression) {
        e.kind = ExpressionKind.And &&
        e.and = some (bo: BinaryOperation) {
          bo.lhs_operand = some (e: Expression) {
            e.kind = ExpressionKind.And &&
            e.and = some (bo: BinaryOperation) {
              bo.lhs_operand = some (e: Expression) {
                e.kind = ExpressionKind.And &&
                e.and = some (bo: BinaryOperation) {
                  bo.lhs_operand = some (e: Expression) {
                    e.kind = ExpressionKind.Equal &&
                    e.equal = some (bo: BinaryOperation) {
                      bo.lhs_operand = some (e: Expression) {
                        e.kind = ExpressionKind.Id &&
                        e.identifier = "mstate"
                      } &&
                      bo.rhs_operand = some (e: Expression) {
                        e.kind = ExpressionKind.Id &&
                        e.identifier = "s_AUTO_FLIGHT_MODE"
                      }
                    }
                  } &&
                  bo.rhs_operand = some (e: Expression) {
                    e.kind = ExpressionKind.Equal &&
                    e.equal = some (bo: BinaryOperation) {
                      bo.lhs_operand = some (e: Expression) {
                        e.kind = ExpressionKind.RecordProjection &&
                        e.record_projection = some (rp: RecordProjection) {
                          rp.record_reference = some (e: Expression) {
                            e.kind = ExpressionKind.Id &&
                            e.identifier = "task1"
                          } &&
                          rp.field_id = "status"
                        }
                      } &&
                      bo.rhs_operand = some (e: Expression) {
                        e.kind = ExpressionKind.Id &&
                        e.identifier = "Successful"
                      }
                    }
                  }
                }
              } &&
              bo.rhs_operand = some (e: Expression) {
                e.kind = ExpressionKind.Equal &&
                e.equal = some (bo: BinaryOperation) {
                  bo.lhs_operand = some (e: Expression) {
                    e.kind = ExpressionKind.RecordProjection &&
                    e.record_projection = some (rp: RecordProjection) {
                      rp.record_reference = some (e: Expression) {
                        e.kind = ExpressionKind.Id &&
                        e.identifier = "task2"
                      } &&
                      rp.field_id = "status"
                    }
                  } &&
                  bo.rhs_operand = some (e: Expression) {
                    e.kind = ExpressionKind.Id &&
                    e.identifier = "Successful"
                  }
                }
              }
            }
          } &&
          bo.rhs_operand = some (e: Expression) {
            e.kind = ExpressionKind.Equal &&
            e.equal = some (bo: BinaryOperation) {
              bo.lhs_operand = some (e: Expression) {
                e.kind = ExpressionKind.RecordProjection &&
                e.record_projection = some (rp: RecordProjection) {
                  rp.record_reference = some (e: Expression) {
                    e.kind = ExpressionKind.Id &&
                    e.identifier = "task3"
                  } &&
                  rp.field_id = "status"
                }
              } &&
              bo.rhs_operand = some (e: Expression) {
                e.kind = ExpressionKind.Id &&
                e.identifier = "Started"
              }
            }
          }
        }
      } &&
      bo.rhs_operand = some (e: Expression) {
        e.kind = ExpressionKind.Or &&
        e.or = some (bo: BinaryOperation) {
          bo.lhs_operand = some (e: Expression) {
            e.kind = ExpressionKind.Not &&
            e.not = some (e: Expression) {
              e.kind = ExpressionKind.Id &&
              e.identifier = "curr_dest_reached"
            }
          } &&
          bo.rhs_operand = some (e: Expression) {
            e.kind = ExpressionKind.Not &&
            e.not = some (e: Expression) {
              e.kind = ExpressionKind.Id &&
              e.identifier = "curr_payload_performed"
            }
          }
        }
      }
    }
  }} &&
csp.variable_declarations.element[14] = some (sd: SymbolDefinition) {
  sd.name = "s_auto_task3_inprogress" &&
  sd.dtype = BoolType &&
  sd.definition = some (e: Expression) {
    e.kind = ExpressionKind.And &&
    e.and = some (bo: BinaryOperation) {
      bo.lhs_operand = some (e: Expression) {
        e.kind = ExpressionKind.And &&
        e.and = some (bo: BinaryOperation) {
          bo.lhs_operand = some (e: Expression) {
            e.kind = ExpressionKind.And &&
            e.and = some (bo: BinaryOperation) {
              bo.lhs_operand = some (e: Expression) {
                e.kind = ExpressionKind.And &&
                e.and = some (bo: BinaryOperation) {
                  bo.lhs_operand = some (e: Expression) {
                    e.kind = ExpressionKind.Equal &&
                    e.equal = some (bo: BinaryOperation) {
                      bo.lhs_operand = some (e: Expression) {
                        e.kind = ExpressionKind.Id &&
                        e.identifier = "mstate"
                      } &&
                      bo.rhs_operand = some (e: Expression) {
                        e.kind = ExpressionKind.Id &&
                        e.identifier = "s_AUTO_FLIGHT_MODE"
                      }
                    }
                  } &&
                  bo.rhs_operand = some (e: Expression) {
                    e.kind = ExpressionKind.Equal &&
                    e.equal = some (bo: BinaryOperation) {
                      bo.lhs_operand = some (e: Expression) {
                        e.kind = ExpressionKind.RecordProjection &&
                        e.record_projection = some (rp: RecordProjection) {
                          rp.record_reference = some (e: Expression) {
                            e.kind = ExpressionKind.Id &&
                            e.identifier = "task1"
                          } &&
                          rp.field_id = "status"
                        }
                      } &&
                      bo.rhs_operand = some (e: Expression) {
                        e.kind = ExpressionKind.Id &&
                        e.identifier = "Successful"
                      }
                    }
                  }
                }
              } &&
              bo.rhs_operand = some (e: Expression) {
                e.kind = ExpressionKind.Equal &&
                e.equal = some (bo: BinaryOperation) {
                  bo.lhs_operand = some (e: Expression) {
                    e.kind = ExpressionKind.RecordProjection &&
                    e.record_projection = some (rp: RecordProjection) {
                      rp.record_reference = some (e: Expression) {
                        e.kind = ExpressionKind.Id &&
                        e.identifier = "task2"
                      } &&
                      rp.field_id = "status"
                    }
                  } &&
                  bo.rhs_operand = some (e: Expression) {
                    e.kind = ExpressionKind.Id &&
                    e.identifier = "Successful"
                  }
                }
              }
            }
          } &&
          bo.rhs_operand = some (e: Expression) {
            e.kind = ExpressionKind.Equal &&
            e.equal = some (bo: BinaryOperation) {
              bo.lhs_operand = some (e: Expression) {
                e.kind = ExpressionKind.RecordProjection &&
                e.record_projection = some (rp: RecordProjection) {
                  rp.record_reference = some (e: Expression) {
                    e.kind = ExpressionKind.Id &&
                    e.identifier = "task3"
                  } &&
                  rp.field_id = "status"
                }
              } &&
              bo.rhs_operand = some (e: Expression) {
                e.kind = ExpressionKind.Id &&
                e.identifier = "InProgress"
              }
            }
          }
        }
      } &&
      bo.rhs_operand = some (e: Expression) {
        e.kind = ExpressionKind.Or &&
        e.or = some (bo: BinaryOperation) {
          bo.lhs_operand = some (e: Expression) {
            e.kind = ExpressionKind.Not &&
            e.not = some (e: Expression) {
              e.kind = ExpressionKind.Id &&
              e.identifier = "curr_dest_reached"
            }
          } &&
          bo.rhs_operand = some (e: Expression) {
            e.kind = ExpressionKind.Not &&
            e.not = some (e: Expression) {
              e.kind = ExpressionKind.Id &&
              e.identifier = "curr_payload_performed"
            }
          }
        }
      }
    }
  }} &&
csp.variable_declarations.element[15] = some (sd: SymbolDefinition) {
  sd.name = "s_auto_task3_successful" &&
  sd.dtype = BoolType &&
  sd.definition = some (e: Expression) {
    e.kind = ExpressionKind.And &&
    e.and = some (bo: BinaryOperation) {
      bo.lhs_operand = some (e: Expression) {
        e.kind = ExpressionKind.And &&
        e.and = some (bo: BinaryOperation) {
          bo.lhs_operand = some (e: Expression) {
            e.kind = ExpressionKind.And &&
            e.and = some (bo: BinaryOperation) {
              bo.lhs_operand = some (e: Expression) {
                e.kind = ExpressionKind.And &&
                e.and = some (bo: BinaryOperation) {
                  bo.lhs_operand = some (e: Expression) {
                    e.kind = ExpressionKind.And &&
                    e.and = some (bo: BinaryOperation) {
                      bo.lhs_operand = some (e: Expression) {
                        e.kind = ExpressionKind.Equal &&
                        e.equal = some (bo: BinaryOperation) {
                          bo.lhs_operand = some (e: Expression) {
                            e.kind = ExpressionKind.Id &&
                            e.identifier = "mstate"
                          } &&
                          bo.rhs_operand = some (e: Expression) {
                            e.kind = ExpressionKind.Id &&
                            e.identifier = "s_AUTO_FLIGHT_MODE"
                          }
                        }
                      } &&
                      bo.rhs_operand = some (e: Expression) {
                        e.kind = ExpressionKind.Equal &&
                        e.equal = some (bo: BinaryOperation) {
                          bo.lhs_operand = some (e: Expression) {
                            e.kind = ExpressionKind.RecordProjection &&
                            e.record_projection = some (rp: RecordProjection) {
                              rp.record_reference = some (e: Expression) {
                                e.kind = ExpressionKind.Id &&
                                e.identifier = "task1"
                              } &&
                              rp.field_id = "status"
                            }
                          } &&
                          bo.rhs_operand = some (e: Expression) {
                            e.kind = ExpressionKind.Id &&
                            e.identifier = "Successful"
                          }
                        }
                      }
                    }
                  } &&
                  bo.rhs_operand = some (e: Expression) {
                    e.kind = ExpressionKind.Equal &&
                    e.equal = some (bo: BinaryOperation) {
                      bo.lhs_operand = some (e: Expression) {
                        e.kind = ExpressionKind.RecordProjection &&
                        e.record_projection = some (rp: RecordProjection) {
                          rp.record_reference = some (e: Expression) {
                            e.kind = ExpressionKind.Id &&
                            e.identifier = "task2"
                          } &&
                          rp.field_id = "status"
                        }
                      } &&
                      bo.rhs_operand = some (e: Expression) {
                        e.kind = ExpressionKind.Id &&
                        e.identifier = "Successful"
                      }
                    }
                  }
                }
              } &&
              bo.rhs_operand = some (e: Expression) {
                e.kind = ExpressionKind.Equal &&
                e.equal = some (bo: BinaryOperation) {
                  bo.lhs_operand = some (e: Expression) {
                    e.kind = ExpressionKind.RecordProjection &&
                    e.record_projection = some (rp: RecordProjection) {
                      rp.record_reference = some (e: Expression) {
                        e.kind = ExpressionKind.Id &&
                        e.identifier = "task3"
                      } &&
                      rp.field_id = "status"
                    }
                  } &&
                  bo.rhs_operand = some (e: Expression) {
                    e.kind = ExpressionKind.Id &&
                    e.identifier = "InProgress"
                  }
                }
              }
            }
          } &&
          bo.rhs_operand = some (e: Expression) {
            e.kind = ExpressionKind.Id &&
            e.identifier = "curr_dest_reached"
          }
        }
      } &&
      bo.rhs_operand = some (e: Expression) {
        e.kind = ExpressionKind.Id &&
        e.identifier = "curr_payload_performed"
      }
    }
  }} &&
csp.variable_declarations.element[16] = some (sd: SymbolDefinition) {
  sd.name = "s_auto_task3_aborted" &&
  sd.dtype = BoolType &&
  sd.definition = some (e: Expression) {
    e.kind = ExpressionKind.And &&
    e.and = some (bo: BinaryOperation) {
      bo.lhs_operand = some (e: Expression) {
        e.kind = ExpressionKind.And &&
        e.and = some (bo: BinaryOperation) {
          bo.lhs_operand = some (e: Expression) {
            e.kind = ExpressionKind.And &&
            e.and = some (bo: BinaryOperation) {
              bo.lhs_operand = some (e: Expression) {
                e.kind = ExpressionKind.And &&
                e.and = some (bo: BinaryOperation) {
                  bo.lhs_operand = some (e: Expression) {
                    e.kind = ExpressionKind.And &&
                    e.and = some (bo: BinaryOperation) {
                      bo.lhs_operand = some (e: Expression) {
                        e.kind = ExpressionKind.Equal &&
                        e.equal = some (bo: BinaryOperation) {
                          bo.lhs_operand = some (e: Expression) {
                            e.kind = ExpressionKind.Id &&
                            e.identifier = "mstate"
                          } &&
                          bo.rhs_operand = some (e: Expression) {
                            e.kind = ExpressionKind.Id &&
                            e.identifier = "s_AUTO_FLIGHT_MODE"
                          }
                        }
                      } &&
                      bo.rhs_operand = some (e: Expression) {
                        e.kind = ExpressionKind.Equal &&
                        e.equal = some (bo: BinaryOperation) {
                          bo.lhs_operand = some (e: Expression) {
                            e.kind = ExpressionKind.RecordProjection &&
                            e.record_projection = some (rp: RecordProjection) {
                              rp.record_reference = some (e: Expression) {
                                e.kind = ExpressionKind.Id &&
                                e.identifier = "task1"
                              } &&
                              rp.field_id = "status"
                            }
                          } &&
                          bo.rhs_operand = some (e: Expression) {
                            e.kind = ExpressionKind.Id &&
                            e.identifier = "Successful"
                          }
                        }
                      }
                    }
                  } &&
                  bo.rhs_operand = some (e: Expression) {
                    e.kind = ExpressionKind.Equal &&
                    e.equal = some (bo: BinaryOperation) {
                      bo.lhs_operand = some (e: Expression) {
                        e.kind = ExpressionKind.RecordProjection &&
                        e.record_projection = some (rp: RecordProjection) {
                          rp.record_reference = some (e: Expression) {
                            e.kind = ExpressionKind.Id &&
                            e.identifier = "task2"
                          } &&
                          rp.field_id = "status"
                        }
                      } &&
                      bo.rhs_operand = some (e: Expression) {
                        e.kind = ExpressionKind.Id &&
                        e.identifier = "Successful"
                      }
                    }
                  }
                }
              } &&
              bo.rhs_operand = some (e: Expression) {
                e.kind = ExpressionKind.Equal &&
                e.equal = some (bo: BinaryOperation) {
                  bo.lhs_operand = some (e: Expression) {
                    e.kind = ExpressionKind.RecordProjection &&
                    e.record_projection = some (rp: RecordProjection) {
                      rp.record_reference = some (e: Expression) {
                        e.kind = ExpressionKind.Id &&
                        e.identifier = "task3"
                      } &&
                      rp.field_id = "status"
                    }
                  } &&
                  bo.rhs_operand = some (e: Expression) {
                    e.kind = ExpressionKind.Id &&
                    e.identifier = "InProgress"
                  }
                }
              }
            }
          } &&
          bo.rhs_operand = some (e: Expression) {
            e.kind = ExpressionKind.Id &&
            e.identifier = "curr_dest_reached"
          }
        }
      } &&
      bo.rhs_operand = some (e: Expression) {
        e.kind = ExpressionKind.Not &&
        e.not = some (e: Expression) {
          e.kind = ExpressionKind.Id &&
          e.identifier = "curr_payload_performed"
        }
      }
    }
  }} &&
csp.variable_declarations.element[17] = some (sd: SymbolDefinition) {
  sd.name = "s_return_when_task1" &&
  sd.dtype = BoolType &&
  sd.definition = some (e: Expression) {
    e.kind = ExpressionKind.And &&
    e.and = some (bo: BinaryOperation) {
      bo.lhs_operand = some (e: Expression) {
        e.kind = ExpressionKind.Equal &&
        e.equal = some (bo: BinaryOperation) {
          bo.lhs_operand = some (e: Expression) {
            e.kind = ExpressionKind.Id &&
            e.identifier = "mstate"
          } &&
          bo.rhs_operand = some (e: Expression) {
            e.kind = ExpressionKind.Id &&
            e.identifier = "s_RETURN_TO_LAUNCH"
          }
        }
      } &&
      bo.rhs_operand = some (e: Expression) {
        e.kind = ExpressionKind.Equal &&
        e.equal = some (bo: BinaryOperation) {
          bo.lhs_operand = some (e: Expression) {
            e.kind = ExpressionKind.RecordProjection &&
            e.record_projection = some (rp: RecordProjection) {
              rp.record_reference = some (e: Expression) {
                e.kind = ExpressionKind.Id &&
                e.identifier = "task1"
              } &&
              rp.field_id = "status"
            }
          } &&
          bo.rhs_operand = some (e: Expression) {
            e.kind = ExpressionKind.Id &&
            e.identifier = "InProgress"
          }
        }
      }
    }
  }} &&
csp.variable_declarations.element[18] = some (sd: SymbolDefinition) {
  sd.name = "s_return_when_task2" &&
  sd.dtype = BoolType &&
  sd.definition = some (e: Expression) {
    e.kind = ExpressionKind.And &&
    e.and = some (bo: BinaryOperation) {
      bo.lhs_operand = some (e: Expression) {
        e.kind = ExpressionKind.Equal &&
        e.equal = some (bo: BinaryOperation) {
          bo.lhs_operand = some (e: Expression) {
            e.kind = ExpressionKind.Id &&
            e.identifier = "mstate"
          } &&
          bo.rhs_operand = some (e: Expression) {
            e.kind = ExpressionKind.Id &&
            e.identifier = "s_RETURN_TO_LAUNCH"
          }
        }
      } &&
      bo.rhs_operand = some (e: Expression) {
        e.kind = ExpressionKind.Equal &&
        e.equal = some (bo: BinaryOperation) {
          bo.lhs_operand = some (e: Expression) {
            e.kind = ExpressionKind.RecordProjection &&
            e.record_projection = some (rp: RecordProjection) {
              rp.record_reference = some (e: Expression) {
                e.kind = ExpressionKind.Id &&
                e.identifier = "task2"
              } &&
              rp.field_id = "status"
            }
          } &&
          bo.rhs_operand = some (e: Expression) {
            e.kind = ExpressionKind.Id &&
            e.identifier = "InProgress"
          }
        }
      }
    }
  }} &&
csp.variable_declarations.element[19] = some (sd: SymbolDefinition) {
  sd.name = "s_return_when_task3" &&
  sd.dtype = BoolType &&
  sd.definition = some (e: Expression) {
    e.kind = ExpressionKind.And &&
    e.and = some (bo: BinaryOperation) {
      bo.lhs_operand = some (e: Expression) {
        e.kind = ExpressionKind.Equal &&
        e.equal = some (bo: BinaryOperation) {
          bo.lhs_operand = some (e: Expression) {
            e.kind = ExpressionKind.Id &&
            e.identifier = "mstate"
          } &&
          bo.rhs_operand = some (e: Expression) {
            e.kind = ExpressionKind.Id &&
            e.identifier = "s_RETURN_TO_LAUNCH"
          }
        }
      } &&
      bo.rhs_operand = some (e: Expression) {
        e.kind = ExpressionKind.Equal &&
        e.equal = some (bo: BinaryOperation) {
          bo.lhs_operand = some (e: Expression) {
            e.kind = ExpressionKind.RecordProjection &&
            e.record_projection = some (rp: RecordProjection) {
              rp.record_reference = some (e: Expression) {
                e.kind = ExpressionKind.Id &&
                e.identifier = "task3"
              } &&
              rp.field_id = "status"
            }
          } &&
          bo.rhs_operand = some (e: Expression) {
            e.kind = ExpressionKind.Id &&
            e.identifier = "InProgress"
          }
        }
      }
    }
  }} &&
csp.variable_declarations.element[20] = some (sd: SymbolDefinition) {
  sd.name = "s_manual_mode" &&
  sd.dtype = BoolType &&
  sd.definition = some (e: Expression) {
    e.kind = ExpressionKind.Equal &&
    e.equal = some (bo: BinaryOperation) {
      bo.lhs_operand = some (e: Expression) {
        e.kind = ExpressionKind.Id &&
        e.identifier = "mstate"
      } &&
      bo.rhs_operand = some (e: Expression) {
        e.kind = ExpressionKind.Id &&
        e.identifier = "s_MANUAL_FLIGHT_MODE"
      }
    }
  }} &&
csp.variable_declarations.element[21] = some (sd: SymbolDefinition) {
  sd.name = "upd_task1" &&
  sd.dtype = some (dt: DataType) {
    dt.kind = DataTypeKind.UserDefined &&
    dt.user_defined_type = m.type_declarations.element[5]} &&
sd.definition = some (e: Expression) {
  e.kind = ExpressionKind.ConditionalExpr &&
  e.conditional_expr = some (ite: IfThenElse) {
    ite.condition = some (e: Expression) {
      e.kind = ExpressionKind.Id &&
      e.identifier = "s_auto_task1_started"
    } &&
    ite.thenBranch = some (e: Expression) {
      e.kind = ExpressionKind.Call &&
      e.call = some (cll: NodeCall) {
        cll.node = "set_task_status" &&
        cll.arguments.length = 2 &&
        cll.arguments.element[0] = some (e: Expression) {
          e.kind = ExpressionKind.Id &&
          e.identifier = "task1"
        } &&
        cll.arguments.element[1] = some (e: Expression) {
          e.kind = ExpressionKind.Id &&
          e.identifier = "InProgress"
        }
      }
    } &&
    ite.elseBranch = some (e: Expression) {
      e.kind = ExpressionKind.ConditionalExpr &&
      e.conditional_expr = some (ite: IfThenElse) {
        ite.condition = some (e: Expression) {
          e.kind = ExpressionKind.Id &&
          e.identifier = "s_auto_task1_successful"
        } &&
        ite.thenBranch = some (e: Expression) {
          e.kind = ExpressionKind.Call &&
          e.call = some (cll: NodeCall) {
            cll.node = "set_task_status" &&
            cll.arguments.length = 2 &&
            cll.arguments.element[0] = some (e: Expression) {
              e.kind = ExpressionKind.Id &&
              e.identifier = "task1"
            } &&
            cll.arguments.element[1] = some (e: Expression) {
              e.kind = ExpressionKind.Id &&
              e.identifier = "Successful"
            }
          }
        } &&
        ite.elseBranch = some (e: Expression) {
          e.kind = ExpressionKind.ConditionalExpr &&
          e.conditional_expr = some (ite: IfThenElse) {
            ite.condition = some (e: Expression) {
              e.kind = ExpressionKind.Or &&
              e.or = some (bo: BinaryOperation) {
                bo.lhs_operand = some (e: Expression) {
                  e.kind = ExpressionKind.Or &&
                  e.or = some (bo: BinaryOperation) {
                    bo.lhs_operand = some (e: Expression) {
                      e.kind = ExpressionKind.Or &&
                      e.or = some (bo: BinaryOperation) {
                        bo.lhs_operand = some (e: Expression) {
                          e.kind = ExpressionKind.Or &&
                          e.or = some (bo: BinaryOperation) {
                            bo.lhs_operand = some (e: Expression) {
                              e.kind = ExpressionKind.Or &&
                              e.or = some (bo: BinaryOperation) {
                                bo.lhs_operand = some (e: Expression) {
                                  e.kind = ExpressionKind.Or &&
                                  e.or = some (bo: BinaryOperation) {
                                    bo.lhs_operand = some (e: Expression) {
                                      e.kind = ExpressionKind.Or &&
                                      e.or = some (bo: BinaryOperation) {
                                        bo.lhs_operand = some (e: Expression) {
                                          e.kind = ExpressionKind.Or &&
                                          e.or = some (bo: BinaryOperation) {
                                            bo.lhs_operand = some (e: Expression) {
                                              e.kind = ExpressionKind.Or &&
                                              e.or = some (bo: BinaryOperation) {
                                                bo.lhs_operand = some (e: Expression) {
                                                  e.kind = ExpressionKind.Or &&
                                                  e.or = some (bo: BinaryOperation) {
                                                    bo.lhs_operand = some (e: Expression) {
                                                      e.kind = ExpressionKind.Id &&
                                                      e.identifier = "s_auto_task1_inprogress"
                                                    } &&
                                                    bo.rhs_operand = some (e: Expression) {
                                                      e.kind = ExpressionKind.Id &&
                                                      e.identifier = "s_auto_task2_started"
                                                    }
                                                  }
                                                } &&
                                                bo.rhs_operand = some (e: Expression) {
                                                  e.kind = ExpressionKind.Id &&
                                                  e.identifier = "s_auto_task2_inprogress"
                                                }
                                              }
                                            } &&
                                            bo.rhs_operand = some (e: Expression) {
                                              e.kind = ExpressionKind.Id &&
                                              e.identifier = "s_auto_task2_successful"
                                            }
                                          }
                                        } &&
                                        bo.rhs_operand = some (e: Expression) {
                                          e.kind = ExpressionKind.Id &&
                                          e.identifier = "s_auto_task2_aborted"
                                        }
                                      }
                                    } &&
                                    bo.rhs_operand = some (e: Expression) {
                                      e.kind = ExpressionKind.Id &&
                                      e.identifier = "s_auto_task3_started"
                                    }
                                  }
                                } &&
                                bo.rhs_operand = some (e: Expression) {
                                  e.kind = ExpressionKind.Id &&
                                  e.identifier = "s_auto_task3_inprogress"
                                }
                              }
                            } &&
                            bo.rhs_operand = some (e: Expression) {
                              e.kind = ExpressionKind.Id &&
                              e.identifier = "s_auto_task3_successful"
                            }
                          }
                        } &&
                        bo.rhs_operand = some (e: Expression) {
                          e.kind = ExpressionKind.Id &&
                          e.identifier = "s_auto_task3_aborted"
                        }
                      }
                    } &&
                    bo.rhs_operand = some (e: Expression) {
                      e.kind = ExpressionKind.And &&
                      e.and = some (bo: BinaryOperation) {
                        bo.lhs_operand = some (e: Expression) {
                          e.kind = ExpressionKind.Equal &&
                          e.equal = some (bo: BinaryOperation) {
                            bo.lhs_operand = some (e: Expression) {
                              e.kind = ExpressionKind.Id &&
                              e.identifier = "mstate"
                            } &&
                            bo.rhs_operand = some (e: Expression) {
                              e.kind = ExpressionKind.Id &&
                              e.identifier = "s_RETURN_TO_LAUNCH"
                            }
                          }
                        } &&
                        bo.rhs_operand = some (e: Expression) {
                          e.kind = ExpressionKind.Not &&
                          e.not = some (e: Expression) {
                            e.kind = ExpressionKind.Equal &&
                            e.equal = some (bo: BinaryOperation) {
                              bo.lhs_operand = some (e: Expression) {
                                e.kind = ExpressionKind.RecordProjection &&
                                e.record_projection = some (rp: RecordProjection) {
                                  rp.record_reference = some (e: Expression) {
                                    e.kind = ExpressionKind.Id &&
                                    e.identifier = "task1"
                                  } &&
                                  rp.field_id = "status"
                                }
                              } &&
                              bo.rhs_operand = some (e: Expression) {
                                e.kind = ExpressionKind.Id &&
                                e.identifier = "InProgress"
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                } &&
                bo.rhs_operand = some (e: Expression) {
                  e.kind = ExpressionKind.Id &&
                  e.identifier = "s_manual_mode"
                }
              }
            } &&
            ite.thenBranch = some (e: Expression) {
              e.kind = ExpressionKind.Id &&
              e.identifier = "task1"
            } &&
            ite.elseBranch = some (e: Expression) {
              e.kind = ExpressionKind.Call &&
              e.call = some (cll: NodeCall) {
                cll.node = "set_task_status" &&
                cll.arguments.length = 2 &&
                cll.arguments.element[0] = some (e: Expression) {
                  e.kind = ExpressionKind.Id &&
                  e.identifier = "task1"
                } &&
                cll.arguments.element[1] = some (e: Expression) {
                  e.kind = ExpressionKind.Id &&
                  e.identifier = "Aborted"
                }
              }
            }
          }
        }
      }
    }
  }}} &&
csp.variable_declarations.element[22] = some (sd: SymbolDefinition) {
  sd.name = "upd_task2" &&
  sd.dtype = some (dt: DataType) {
    dt.kind = DataTypeKind.UserDefined &&
    dt.user_defined_type = m.type_declarations.element[5]} &&
sd.definition = some (e: Expression) {
  e.kind = ExpressionKind.ConditionalExpr &&
  e.conditional_expr = some (ite: IfThenElse) {
    ite.condition = some (e: Expression) {
      e.kind = ExpressionKind.Id &&
      e.identifier = "s_auto_task2_started"
    } &&
    ite.thenBranch = some (e: Expression) {
      e.kind = ExpressionKind.Call &&
      e.call = some (cll: NodeCall) {
        cll.node = "set_task_status" &&
        cll.arguments.length = 2 &&
        cll.arguments.element[0] = some (e: Expression) {
          e.kind = ExpressionKind.Id &&
          e.identifier = "task2"
        } &&
        cll.arguments.element[1] = some (e: Expression) {
          e.kind = ExpressionKind.Id &&
          e.identifier = "InProgress"
        }
      }
    } &&
    ite.elseBranch = some (e: Expression) {
      e.kind = ExpressionKind.ConditionalExpr &&
      e.conditional_expr = some (ite: IfThenElse) {
        ite.condition = some (e: Expression) {
          e.kind = ExpressionKind.Id &&
          e.identifier = "s_auto_task2_successful"
        } &&
        ite.thenBranch = some (e: Expression) {
          e.kind = ExpressionKind.Call &&
          e.call = some (cll: NodeCall) {
            cll.node = "set_task_status" &&
            cll.arguments.length = 2 &&
            cll.arguments.element[0] = some (e: Expression) {
              e.kind = ExpressionKind.Id &&
              e.identifier = "task2"
            } &&
            cll.arguments.element[1] = some (e: Expression) {
              e.kind = ExpressionKind.Id &&
              e.identifier = "Successful"
            }
          }
        } &&
        ite.elseBranch = some (e: Expression) {
          e.kind = ExpressionKind.ConditionalExpr &&
          e.conditional_expr = some (ite: IfThenElse) {
            ite.condition = some (e: Expression) {
              e.kind = ExpressionKind.Or &&
              e.or = some (bo: BinaryOperation) {
                bo.lhs_operand = some (e: Expression) {
                  e.kind = ExpressionKind.Or &&
                  e.or = some (bo: BinaryOperation) {
                    bo.lhs_operand = some (e: Expression) {
                      e.kind = ExpressionKind.Or &&
                      e.or = some (bo: BinaryOperation) {
                        bo.lhs_operand = some (e: Expression) {
                          e.kind = ExpressionKind.Or &&
                          e.or = some (bo: BinaryOperation) {
                            bo.lhs_operand = some (e: Expression) {
                              e.kind = ExpressionKind.Or &&
                              e.or = some (bo: BinaryOperation) {
                                bo.lhs_operand = some (e: Expression) {
                                  e.kind = ExpressionKind.Or &&
                                  e.or = some (bo: BinaryOperation) {
                                    bo.lhs_operand = some (e: Expression) {
                                      e.kind = ExpressionKind.Or &&
                                      e.or = some (bo: BinaryOperation) {
                                        bo.lhs_operand = some (e: Expression) {
                                          e.kind = ExpressionKind.Or &&
                                          e.or = some (bo: BinaryOperation) {
                                            bo.lhs_operand = some (e: Expression) {
                                              e.kind = ExpressionKind.Or &&
                                              e.or = some (bo: BinaryOperation) {
                                                bo.lhs_operand = some (e: Expression) {
                                                  e.kind = ExpressionKind.Or &&
                                                  e.or = some (bo: BinaryOperation) {
                                                    bo.lhs_operand = some (e: Expression) {
                                                      e.kind = ExpressionKind.Id &&
                                                      e.identifier = "s_auto_task2_inprogress"
                                                    } &&
                                                    bo.rhs_operand = some (e: Expression) {
                                                      e.kind = ExpressionKind.Id &&
                                                      e.identifier = "s_auto_task1_started"
                                                    }
                                                  }
                                                } &&
                                                bo.rhs_operand = some (e: Expression) {
                                                  e.kind = ExpressionKind.Id &&
                                                  e.identifier = "s_auto_task1_inprogress"
                                                }
                                              }
                                            } &&
                                            bo.rhs_operand = some (e: Expression) {
                                              e.kind = ExpressionKind.Id &&
                                              e.identifier = "s_auto_task1_successful"
                                            }
                                          }
                                        } &&
                                        bo.rhs_operand = some (e: Expression) {
                                          e.kind = ExpressionKind.Id &&
                                          e.identifier = "s_auto_task1_aborted"
                                        }
                                      }
                                    } &&
                                    bo.rhs_operand = some (e: Expression) {
                                      e.kind = ExpressionKind.Id &&
                                      e.identifier = "s_auto_task3_started"
                                    }
                                  }
                                } &&
                                bo.rhs_operand = some (e: Expression) {
                                  e.kind = ExpressionKind.Id &&
                                  e.identifier = "s_auto_task3_inprogress"
                                }
                              }
                            } &&
                            bo.rhs_operand = some (e: Expression) {
                              e.kind = ExpressionKind.Id &&
                              e.identifier = "s_auto_task3_successful"
                            }
                          }
                        } &&
                        bo.rhs_operand = some (e: Expression) {
                          e.kind = ExpressionKind.Id &&
                          e.identifier = "s_auto_task3_aborted"
                        }
                      }
                    } &&
                    bo.rhs_operand = some (e: Expression) {
                      e.kind = ExpressionKind.And &&
                      e.and = some (bo: BinaryOperation) {
                        bo.lhs_operand = some (e: Expression) {
                          e.kind = ExpressionKind.Equal &&
                          e.equal = some (bo: BinaryOperation) {
                            bo.lhs_operand = some (e: Expression) {
                              e.kind = ExpressionKind.Id &&
                              e.identifier = "mstate"
                            } &&
                            bo.rhs_operand = some (e: Expression) {
                              e.kind = ExpressionKind.Id &&
                              e.identifier = "s_RETURN_TO_LAUNCH"
                            }
                          }
                        } &&
                        bo.rhs_operand = some (e: Expression) {
                          e.kind = ExpressionKind.Not &&
                          e.not = some (e: Expression) {
                            e.kind = ExpressionKind.Equal &&
                            e.equal = some (bo: BinaryOperation) {
                              bo.lhs_operand = some (e: Expression) {
                                e.kind = ExpressionKind.RecordProjection &&
                                e.record_projection = some (rp: RecordProjection) {
                                  rp.record_reference = some (e: Expression) {
                                    e.kind = ExpressionKind.Id &&
                                    e.identifier = "task2"
                                  } &&
                                  rp.field_id = "status"
                                }
                              } &&
                              bo.rhs_operand = some (e: Expression) {
                                e.kind = ExpressionKind.Id &&
                                e.identifier = "InProgress"
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                } &&
                bo.rhs_operand = some (e: Expression) {
                  e.kind = ExpressionKind.Id &&
                  e.identifier = "s_manual_mode"
                }
              }
            } &&
            ite.thenBranch = some (e: Expression) {
              e.kind = ExpressionKind.Id &&
              e.identifier = "task2"
            } &&
            ite.elseBranch = some (e: Expression) {
              e.kind = ExpressionKind.Call &&
              e.call = some (cll: NodeCall) {
                cll.node = "set_task_status" &&
                cll.arguments.length = 2 &&
                cll.arguments.element[0] = some (e: Expression) {
                  e.kind = ExpressionKind.Id &&
                  e.identifier = "task2"
                } &&
                cll.arguments.element[1] = some (e: Expression) {
                  e.kind = ExpressionKind.Id &&
                  e.identifier = "Aborted"
                }
              }
            }
          }
        }
      }
    }
  }}} &&
csp.variable_declarations.element[23] = some (sd: SymbolDefinition) {
  sd.name = "upd_task3" &&
  sd.dtype = some (dt: DataType) {
    dt.kind = DataTypeKind.UserDefined &&
    dt.user_defined_type = m.type_declarations.element[5]} &&
sd.definition = some (e: Expression) {
  e.kind = ExpressionKind.ConditionalExpr &&
  e.conditional_expr = some (ite: IfThenElse) {
    ite.condition = some (e: Expression) {
      e.kind = ExpressionKind.Id &&
      e.identifier = "s_auto_task3_started"
    } &&
    ite.thenBranch = some (e: Expression) {
      e.kind = ExpressionKind.Call &&
      e.call = some (cll: NodeCall) {
        cll.node = "set_task_status" &&
        cll.arguments.length = 2 &&
        cll.arguments.element[0] = some (e: Expression) {
          e.kind = ExpressionKind.Id &&
          e.identifier = "task3"
        } &&
        cll.arguments.element[1] = some (e: Expression) {
          e.kind = ExpressionKind.Id &&
          e.identifier = "InProgress"
        }
      }
    } &&
    ite.elseBranch = some (e: Expression) {
      e.kind = ExpressionKind.ConditionalExpr &&
      e.conditional_expr = some (ite: IfThenElse) {
        ite.condition = some (e: Expression) {
          e.kind = ExpressionKind.Id &&
          e.identifier = "s_auto_task3_successful"
        } &&
        ite.thenBranch = some (e: Expression) {
          e.kind = ExpressionKind.Call &&
          e.call = some (cll: NodeCall) {
            cll.node = "set_task_status" &&
            cll.arguments.length = 2 &&
            cll.arguments.element[0] = some (e: Expression) {
              e.kind = ExpressionKind.Id &&
              e.identifier = "task3"
            } &&
            cll.arguments.element[1] = some (e: Expression) {
              e.kind = ExpressionKind.Id &&
              e.identifier = "Successful"
            }
          }
        } &&
        ite.elseBranch = some (e: Expression) {
          e.kind = ExpressionKind.ConditionalExpr &&
          e.conditional_expr = some (ite: IfThenElse) {
            ite.condition = some (e: Expression) {
              e.kind = ExpressionKind.Or &&
              e.or = some (bo: BinaryOperation) {
                bo.lhs_operand = some (e: Expression) {
                  e.kind = ExpressionKind.Or &&
                  e.or = some (bo: BinaryOperation) {
                    bo.lhs_operand = some (e: Expression) {
                      e.kind = ExpressionKind.Or &&
                      e.or = some (bo: BinaryOperation) {
                        bo.lhs_operand = some (e: Expression) {
                          e.kind = ExpressionKind.Or &&
                          e.or = some (bo: BinaryOperation) {
                            bo.lhs_operand = some (e: Expression) {
                              e.kind = ExpressionKind.Or &&
                              e.or = some (bo: BinaryOperation) {
                                bo.lhs_operand = some (e: Expression) {
                                  e.kind = ExpressionKind.Or &&
                                  e.or = some (bo: BinaryOperation) {
                                    bo.lhs_operand = some (e: Expression) {
                                      e.kind = ExpressionKind.Or &&
                                      e.or = some (bo: BinaryOperation) {
                                        bo.lhs_operand = some (e: Expression) {
                                          e.kind = ExpressionKind.Or &&
                                          e.or = some (bo: BinaryOperation) {
                                            bo.lhs_operand = some (e: Expression) {
                                              e.kind = ExpressionKind.Or &&
                                              e.or = some (bo: BinaryOperation) {
                                                bo.lhs_operand = some (e: Expression) {
                                                  e.kind = ExpressionKind.Or &&
                                                  e.or = some (bo: BinaryOperation) {
                                                    bo.lhs_operand = some (e: Expression) {
                                                      e.kind = ExpressionKind.Id &&
                                                      e.identifier = "s_auto_task3_inprogress"
                                                    } &&
                                                    bo.rhs_operand = some (e: Expression) {
                                                      e.kind = ExpressionKind.Id &&
                                                      e.identifier = "s_auto_task1_started"
                                                    }
                                                  }
                                                } &&
                                                bo.rhs_operand = some (e: Expression) {
                                                  e.kind = ExpressionKind.Id &&
                                                  e.identifier = "s_auto_task1_inprogress"
                                                }
                                              }
                                            } &&
                                            bo.rhs_operand = some (e: Expression) {
                                              e.kind = ExpressionKind.Id &&
                                              e.identifier = "s_auto_task1_successful"
                                            }
                                          }
                                        } &&
                                        bo.rhs_operand = some (e: Expression) {
                                          e.kind = ExpressionKind.Id &&
                                          e.identifier = "s_auto_task1_aborted"
                                        }
                                      }
                                    } &&
                                    bo.rhs_operand = some (e: Expression) {
                                      e.kind = ExpressionKind.Id &&
                                      e.identifier = "s_auto_task2_started"
                                    }
                                  }
                                } &&
                                bo.rhs_operand = some (e: Expression) {
                                  e.kind = ExpressionKind.Id &&
                                  e.identifier = "s_auto_task2_inprogress"
                                }
                              }
                            } &&
                            bo.rhs_operand = some (e: Expression) {
                              e.kind = ExpressionKind.Id &&
                              e.identifier = "s_auto_task2_successful"
                            }
                          }
                        } &&
                        bo.rhs_operand = some (e: Expression) {
                          e.kind = ExpressionKind.Id &&
                          e.identifier = "s_auto_task2_aborted"
                        }
                      }
                    } &&
                    bo.rhs_operand = some (e: Expression) {
                      e.kind = ExpressionKind.And &&
                      e.and = some (bo: BinaryOperation) {
                        bo.lhs_operand = some (e: Expression) {
                          e.kind = ExpressionKind.Equal &&
                          e.equal = some (bo: BinaryOperation) {
                            bo.lhs_operand = some (e: Expression) {
                              e.kind = ExpressionKind.Id &&
                              e.identifier = "mstate"
                            } &&
                            bo.rhs_operand = some (e: Expression) {
                              e.kind = ExpressionKind.Id &&
                              e.identifier = "s_RETURN_TO_LAUNCH"
                            }
                          }
                        } &&
                        bo.rhs_operand = some (e: Expression) {
                          e.kind = ExpressionKind.Not &&
                          e.not = some (e: Expression) {
                            e.kind = ExpressionKind.Equal &&
                            e.equal = some (bo: BinaryOperation) {
                              bo.lhs_operand = some (e: Expression) {
                                e.kind = ExpressionKind.RecordProjection &&
                                e.record_projection = some (rp: RecordProjection) {
                                  rp.record_reference = some (e: Expression) {
                                    e.kind = ExpressionKind.Id &&
                                    e.identifier = "task3"
                                  } &&
                                  rp.field_id = "status"
                                }
                              } &&
                              bo.rhs_operand = some (e: Expression) {
                                e.kind = ExpressionKind.Id &&
                                e.identifier = "InProgress"
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                } &&
                bo.rhs_operand = some (e: Expression) {
                  e.kind = ExpressionKind.Id &&
                  e.identifier = "s_manual_mode"
                }
              }
            } &&
            ite.thenBranch = some (e: Expression) {
              e.kind = ExpressionKind.Id &&
              e.identifier = "task3"
            } &&
            ite.elseBranch = some (e: Expression) {
              e.kind = ExpressionKind.Call &&
              e.call = some (cll: NodeCall) {
                cll.node = "set_task_status" &&
                cll.arguments.length = 2 &&
                cll.arguments.element[0] = some (e: Expression) {
                  e.kind = ExpressionKind.Id &&
                  e.identifier = "task3"
                } &&
                cll.arguments.element[1] = some (e: Expression) {
                  e.kind = ExpressionKind.Id &&
                  e.identifier = "Aborted"
                }
              }
            }
          }
        }
      }
    }
  }}} &&csp.assumes.length = 0 &&csp.guarantees.length = 2 &&
csp.guarantees.element[0] = some (ci: ContractItem) {
  ci.name = mk_some<Identifier>("waypoint_Def") &&
  ci.expression = some (e: Expression) {
    e.kind = ExpressionKind.Equal &&
    e.equal = some (bo: BinaryOperation) {
      bo.lhs_operand = some (e: Expression) {
        e.kind = ExpressionKind.Id &&
        e.identifier = "waypoint"
      } &&
      bo.rhs_operand = some (e: Expression) {
        e.kind = ExpressionKind.ConditionalExpr &&
        e.conditional_expr = some (ite: IfThenElse) {
          ite.condition = some (e: Expression) {
            e.kind = ExpressionKind.Or &&
            e.or = some (bo: BinaryOperation) {
              bo.lhs_operand = some (e: Expression) {
                e.kind = ExpressionKind.Or &&
                e.or = some (bo: BinaryOperation) {
                  bo.lhs_operand = some (e: Expression) {
                    e.kind = ExpressionKind.Or &&
                    e.or = some (bo: BinaryOperation) {
                      bo.lhs_operand = some (e: Expression) {
                        e.kind = ExpressionKind.Id &&
                        e.identifier = "s_auto_task1_started"
                      } &&
                      bo.rhs_operand = some (e: Expression) {
                        e.kind = ExpressionKind.Id &&
                        e.identifier = "s_auto_task1_inprogress"
                      }
                    }
                  } &&
                  bo.rhs_operand = some (e: Expression) {
                    e.kind = ExpressionKind.Id &&
                    e.identifier = "s_auto_task1_successful"
                  }
                }
              } &&
              bo.rhs_operand = some (e: Expression) {
                e.kind = ExpressionKind.Id &&
                e.identifier = "s_auto_task1_aborted"
              }
            }
          } &&
          ite.thenBranch = some (e: Expression) {
            e.kind = ExpressionKind.RecordProjection &&
            e.record_projection = some (rp: RecordProjection) {
              rp.record_reference = some (e: Expression) {
                e.kind = ExpressionKind.Id &&
                e.identifier = "task1"
              } &&
              rp.field_id = "waypoint"
            }
          } &&
          ite.elseBranch = some (e: Expression) {
            e.kind = ExpressionKind.ConditionalExpr &&
            e.conditional_expr = some (ite: IfThenElse) {
              ite.condition = some (e: Expression) {
                e.kind = ExpressionKind.Or &&
                e.or = some (bo: BinaryOperation) {
                  bo.lhs_operand = some (e: Expression) {
                    e.kind = ExpressionKind.Or &&
                    e.or = some (bo: BinaryOperation) {
                      bo.lhs_operand = some (e: Expression) {
                        e.kind = ExpressionKind.Or &&
                        e.or = some (bo: BinaryOperation) {
                          bo.lhs_operand = some (e: Expression) {
                            e.kind = ExpressionKind.Id &&
                            e.identifier = "s_auto_task2_started"
                          } &&
                          bo.rhs_operand = some (e: Expression) {
                            e.kind = ExpressionKind.Id &&
                            e.identifier = "s_auto_task2_inprogress"
                          }
                        }
                      } &&
                      bo.rhs_operand = some (e: Expression) {
                        e.kind = ExpressionKind.Id &&
                        e.identifier = "s_auto_task2_successful"
                      }
                    }
                  } &&
                  bo.rhs_operand = some (e: Expression) {
                    e.kind = ExpressionKind.Id &&
                    e.identifier = "s_auto_task2_aborted"
                  }
                }
              } &&
              ite.thenBranch = some (e: Expression) {
                e.kind = ExpressionKind.RecordProjection &&
                e.record_projection = some (rp: RecordProjection) {
                  rp.record_reference = some (e: Expression) {
                    e.kind = ExpressionKind.Id &&
                    e.identifier = "task2"
                  } &&
                  rp.field_id = "waypoint"
                }
              } &&
              ite.elseBranch = some (e: Expression) {
                e.kind = ExpressionKind.ConditionalExpr &&
                e.conditional_expr = some (ite: IfThenElse) {
                  ite.condition = some (e: Expression) {
                    e.kind = ExpressionKind.Or &&
                    e.or = some (bo: BinaryOperation) {
                      bo.lhs_operand = some (e: Expression) {
                        e.kind = ExpressionKind.Or &&
                        e.or = some (bo: BinaryOperation) {
                          bo.lhs_operand = some (e: Expression) {
                            e.kind = ExpressionKind.Or &&
                            e.or = some (bo: BinaryOperation) {
                              bo.lhs_operand = some (e: Expression) {
                                e.kind = ExpressionKind.Id &&
                                e.identifier = "s_auto_task3_started"
                              } &&
                              bo.rhs_operand = some (e: Expression) {
                                e.kind = ExpressionKind.Id &&
                                e.identifier = "s_auto_task3_inprogress"
                              }
                            }
                          } &&
                          bo.rhs_operand = some (e: Expression) {
                            e.kind = ExpressionKind.Id &&
                            e.identifier = "s_auto_task3_successful"
                          }
                        }
                      } &&
                      bo.rhs_operand = some (e: Expression) {
                        e.kind = ExpressionKind.Id &&
                        e.identifier = "s_auto_task3_aborted"
                      }
                    }
                  } &&
                  ite.thenBranch = some (e: Expression) {
                    e.kind = ExpressionKind.RecordProjection &&
                    e.record_projection = some (rp: RecordProjection) {
                      rp.record_reference = some (e: Expression) {
                        e.kind = ExpressionKind.Id &&
                        e.identifier = "task3"
                      } &&
                      rp.field_id = "waypoint"
                    }
                  } &&
                  ite.elseBranch = some (e: Expression) {
                    e.kind = ExpressionKind.ConditionalExpr &&
                    e.conditional_expr = some (ite: IfThenElse) {
                      ite.condition = some (e: Expression) {
                        e.kind = ExpressionKind.Equal &&
                        e.equal = some (bo: BinaryOperation) {
                          bo.lhs_operand = some (e: Expression) {
                            e.kind = ExpressionKind.Id &&
                            e.identifier = "mstate"
                          } &&
                          bo.rhs_operand = some (e: Expression) {
                            e.kind = ExpressionKind.Id &&
                            e.identifier = "s_RETURN_TO_LAUNCH"
                          }
                        }
                      } &&
                      ite.thenBranch = some (e: Expression) {
                        e.kind = ExpressionKind.Id &&
                        e.identifier = "LAUNCH_POS"
                      } &&
                      ite.elseBranch = some (e: Expression) {
                        e.kind = ExpressionKind.Arrow &&
                        e.arrow = some (bo: BinaryOperation) {
                          bo.lhs_operand = some (e: Expression) {
                            e.kind = ExpressionKind.Id &&
                            e.identifier = "LAUNCH_POS"
                          } &&
                          bo.rhs_operand = some (e: Expression) {
                            e.kind = ExpressionKind.Pre &&
                            e.pre = some (e: Expression) {
                              e.kind = ExpressionKind.Id &&
                              e.identifier = "waypoint"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }} &&
csp.guarantees.element[1] = some (ci: ContractItem) {
  ci.name = mk_some<Identifier>("payloadCMD_Def") &&
  ci.expression = some (e: Expression) {
    e.kind = ExpressionKind.Equal &&
    e.equal = some (bo: BinaryOperation) {
      bo.lhs_operand = some (e: Expression) {
        e.kind = ExpressionKind.Id &&
        e.identifier = "payloadCmd"
      } &&
      bo.rhs_operand = some (e: Expression) {
        e.kind = ExpressionKind.ConditionalExpr &&
        e.conditional_expr = some (ite: IfThenElse) {
          ite.condition = some (e: Expression) {
            e.kind = ExpressionKind.And &&
            e.and = some (bo: BinaryOperation) {
              bo.lhs_operand = some (e: Expression) {
                e.kind = ExpressionKind.And &&
                e.and = some (bo: BinaryOperation) {
                  bo.lhs_operand = some (e: Expression) {
                    e.kind = ExpressionKind.Equal &&
                    e.equal = some (bo: BinaryOperation) {
                      bo.lhs_operand = some (e: Expression) {
                        e.kind = ExpressionKind.Id &&
                        e.identifier = "mstate"
                      } &&
                      bo.rhs_operand = some (e: Expression) {
                        e.kind = ExpressionKind.Id &&
                        e.identifier = "s_AUTO_FLIGHT_MODE"
                      }
                    }
                  } &&
                  bo.rhs_operand = some (e: Expression) {
                    e.kind = ExpressionKind.Id &&
                    e.identifier = "curr_dest_reached"
                  }
                }
              } &&
              bo.rhs_operand = some (e: Expression) {
                e.kind = ExpressionKind.Not &&
                e.not = some (e: Expression) {
                  e.kind = ExpressionKind.Id &&
                  e.identifier = "curr_payload_performed"
                }
              }
            }
          } &&
          ite.thenBranch = some (e: Expression) {
            e.kind = ExpressionKind.ConditionalExpr &&
            e.conditional_expr = some (ite: IfThenElse) {
              ite.condition = some (e: Expression) {
                e.kind = ExpressionKind.Or &&
                e.or = some (bo: BinaryOperation) {
                  bo.lhs_operand = some (e: Expression) {
                    e.kind = ExpressionKind.Equal &&
                    e.equal = some (bo: BinaryOperation) {
                      bo.lhs_operand = some (e: Expression) {
                        e.kind = ExpressionKind.RecordProjection &&
                        e.record_projection = some (rp: RecordProjection) {
                          rp.record_reference = some (e: Expression) {
                            e.kind = ExpressionKind.Id &&
                            e.identifier = "task1"
                          } &&
                          rp.field_id = "status"
                        }
                      } &&
                      bo.rhs_operand = some (e: Expression) {
                        e.kind = ExpressionKind.Id &&
                        e.identifier = "Started"
                      }
                    }
                  } &&
                  bo.rhs_operand = some (e: Expression) {
                    e.kind = ExpressionKind.Equal &&
                    e.equal = some (bo: BinaryOperation) {
                      bo.lhs_operand = some (e: Expression) {
                        e.kind = ExpressionKind.RecordProjection &&
                        e.record_projection = some (rp: RecordProjection) {
                          rp.record_reference = some (e: Expression) {
                            e.kind = ExpressionKind.Id &&
                            e.identifier = "task1"
                          } &&
                          rp.field_id = "status"
                        }
                      } &&
                      bo.rhs_operand = some (e: Expression) {
                        e.kind = ExpressionKind.Id &&
                        e.identifier = "InProgress"
                      }
                    }
                  }
                }
              } &&
              ite.thenBranch = some (e: Expression) {
                e.kind = ExpressionKind.RecordProjection &&
                e.record_projection = some (rp: RecordProjection) {
                  rp.record_reference = some (e: Expression) {
                    e.kind = ExpressionKind.Id &&
                    e.identifier = "task1"
                  } &&
                  rp.field_id = "action"
                }
              } &&
              ite.elseBranch = some (e: Expression) {
                e.kind = ExpressionKind.ConditionalExpr &&
                e.conditional_expr = some (ite: IfThenElse) {
                  ite.condition = some (e: Expression) {
                    e.kind = ExpressionKind.And &&
                    e.and = some (bo: BinaryOperation) {
                      bo.lhs_operand = some (e: Expression) {
                        e.kind = ExpressionKind.Equal &&
                        e.equal = some (bo: BinaryOperation) {
                          bo.lhs_operand = some (e: Expression) {
                            e.kind = ExpressionKind.RecordProjection &&
                            e.record_projection = some (rp: RecordProjection) {
                              rp.record_reference = some (e: Expression) {
                                e.kind = ExpressionKind.Id &&
                                e.identifier = "task1"
                              } &&
                              rp.field_id = "status"
                            }
                          } &&
                          bo.rhs_operand = some (e: Expression) {
                            e.kind = ExpressionKind.Id &&
                            e.identifier = "Successful"
                          }
                        }
                      } &&
                      bo.rhs_operand = some (e: Expression) {
                        e.kind = ExpressionKind.Or &&
                        e.or = some (bo: BinaryOperation) {
                          bo.lhs_operand = some (e: Expression) {
                            e.kind = ExpressionKind.Equal &&
                            e.equal = some (bo: BinaryOperation) {
                              bo.lhs_operand = some (e: Expression) {
                                e.kind = ExpressionKind.RecordProjection &&
                                e.record_projection = some (rp: RecordProjection) {
                                  rp.record_reference = some (e: Expression) {
                                    e.kind = ExpressionKind.Id &&
                                    e.identifier = "task2"
                                  } &&
                                  rp.field_id = "status"
                                }
                              } &&
                              bo.rhs_operand = some (e: Expression) {
                                e.kind = ExpressionKind.Id &&
                                e.identifier = "Started"
                              }
                            }
                          } &&
                          bo.rhs_operand = some (e: Expression) {
                            e.kind = ExpressionKind.Equal &&
                            e.equal = some (bo: BinaryOperation) {
                              bo.lhs_operand = some (e: Expression) {
                                e.kind = ExpressionKind.RecordProjection &&
                                e.record_projection = some (rp: RecordProjection) {
                                  rp.record_reference = some (e: Expression) {
                                    e.kind = ExpressionKind.Id &&
                                    e.identifier = "task2"
                                  } &&
                                  rp.field_id = "status"
                                }
                              } &&
                              bo.rhs_operand = some (e: Expression) {
                                e.kind = ExpressionKind.Id &&
                                e.identifier = "InProgress"
                              }
                            }
                          }
                        }
                      }
                    }
                  } &&
                  ite.thenBranch = some (e: Expression) {
                    e.kind = ExpressionKind.RecordProjection &&
                    e.record_projection = some (rp: RecordProjection) {
                      rp.record_reference = some (e: Expression) {
                        e.kind = ExpressionKind.Id &&
                        e.identifier = "task2"
                      } &&
                      rp.field_id = "action"
                    }
                  } &&
                  ite.elseBranch = some (e: Expression) {
                    e.kind = ExpressionKind.ConditionalExpr &&
                    e.conditional_expr = some (ite: IfThenElse) {
                      ite.condition = some (e: Expression) {
                        e.kind = ExpressionKind.And &&
                        e.and = some (bo: BinaryOperation) {
                          bo.lhs_operand = some (e: Expression) {
                            e.kind = ExpressionKind.And &&
                            e.and = some (bo: BinaryOperation) {
                              bo.lhs_operand = some (e: Expression) {
                                e.kind = ExpressionKind.Equal &&
                                e.equal = some (bo: BinaryOperation) {
                                  bo.lhs_operand = some (e: Expression) {
                                    e.kind = ExpressionKind.RecordProjection &&
                                    e.record_projection = some (rp: RecordProjection) {
                                      rp.record_reference = some (e: Expression) {
                                        e.kind = ExpressionKind.Id &&
                                        e.identifier = "task1"
                                      } &&
                                      rp.field_id = "status"
                                    }
                                  } &&
                                  bo.rhs_operand = some (e: Expression) {
                                    e.kind = ExpressionKind.Id &&
                                    e.identifier = "Successful"
                                  }
                                }
                              } &&
                              bo.rhs_operand = some (e: Expression) {
                                e.kind = ExpressionKind.Equal &&
                                e.equal = some (bo: BinaryOperation) {
                                  bo.lhs_operand = some (e: Expression) {
                                    e.kind = ExpressionKind.RecordProjection &&
                                    e.record_projection = some (rp: RecordProjection) {
                                      rp.record_reference = some (e: Expression) {
                                        e.kind = ExpressionKind.Id &&
                                        e.identifier = "task2"
                                      } &&
                                      rp.field_id = "status"
                                    }
                                  } &&
                                  bo.rhs_operand = some (e: Expression) {
                                    e.kind = ExpressionKind.Id &&
                                    e.identifier = "Successful"
                                  }
                                }
                              }
                            }
                          } &&
                          bo.rhs_operand = some (e: Expression) {
                            e.kind = ExpressionKind.Or &&
                            e.or = some (bo: BinaryOperation) {
                              bo.lhs_operand = some (e: Expression) {
                                e.kind = ExpressionKind.Equal &&
                                e.equal = some (bo: BinaryOperation) {
                                  bo.lhs_operand = some (e: Expression) {
                                    e.kind = ExpressionKind.RecordProjection &&
                                    e.record_projection = some (rp: RecordProjection) {
                                      rp.record_reference = some (e: Expression) {
                                        e.kind = ExpressionKind.Id &&
                                        e.identifier = "task3"
                                      } &&
                                      rp.field_id = "status"
                                    }
                                  } &&
                                  bo.rhs_operand = some (e: Expression) {
                                    e.kind = ExpressionKind.Id &&
                                    e.identifier = "Started"
                                  }
                                }
                              } &&
                              bo.rhs_operand = some (e: Expression) {
                                e.kind = ExpressionKind.Equal &&
                                e.equal = some (bo: BinaryOperation) {
                                  bo.lhs_operand = some (e: Expression) {
                                    e.kind = ExpressionKind.RecordProjection &&
                                    e.record_projection = some (rp: RecordProjection) {
                                      rp.record_reference = some (e: Expression) {
                                        e.kind = ExpressionKind.Id &&
                                        e.identifier = "task3"
                                      } &&
                                      rp.field_id = "status"
                                    }
                                  } &&
                                  bo.rhs_operand = some (e: Expression) {
                                    e.kind = ExpressionKind.Id &&
                                    e.identifier = "InProgress"
                                  }
                                }
                              }
                            }
                          }
                        }
                      } &&
                      ite.thenBranch = some (e: Expression) {
                        e.kind = ExpressionKind.RecordProjection &&
                        e.record_projection = some (rp: RecordProjection) {
                          rp.record_reference = some (e: Expression) {
                            e.kind = ExpressionKind.Id &&
                            e.identifier = "task3"
                          } &&
                          rp.field_id = "action"
                        }
                      } &&
                      ite.elseBranch = some (e: Expression) {
                        e.kind = ExpressionKind.Id &&
                        e.identifier = "None"
                      }
                    }
                  }
                }
              }
            }
          } &&
          ite.elseBranch = some (e: Expression) {
            e.kind = ExpressionKind.Id &&
            e.identifier = "None"
          }
        }
      }
    }
  }} &&csp.modes.length = 0 &&csp.imports.length = 0})} &&
m.component_types.element[4] = some (ct: ComponentType) {
  ct.name = "GPS" &&
  ct.ports.length = 4 &&
  ct.ports.element[0] = some(p: Port) {
    p.name = "location_source_pos" &&
    p.mode = PortMode.In &&
    p.ptype = mk_some<DataType>(some (dt: DataType) {
      dt.kind = DataTypeKind.UserDefined &&
      dt.user_defined_type = m.type_declarations.element[3]
  })} &&
ct.ports.element[1] = some(p: Port) {
  p.name = "location_source_dir" &&
  p.mode = PortMode.In &&
  p.ptype = mk_some<DataType>(some (dt: DataType) {
    dt.kind = DataTypeKind.UserDefined &&
    dt.user_defined_type = m.type_declarations.element[1]})} &&
ct.ports.element[2] = some(p: Port) {
  p.name = "pos" &&
  p.mode = PortMode.Out &&
  p.ptype = mk_some<DataType>(some (dt: DataType) {
    dt.kind = DataTypeKind.UserDefined &&
    dt.user_defined_type = m.type_declarations.element[3]})} &&
ct.ports.element[3] = some(p: Port) {
  p.name = "dir" &&
  p.mode = PortMode.Out &&
  p.ptype = mk_some<DataType>(some (dt: DataType) {
    dt.kind = DataTypeKind.UserDefined &&
    dt.user_defined_type = m.type_declarations.element[1]})} &&
ct.contract = mk_some<ContractSpec>(some (csp: ContractSpec) {
  csp.constant_declarations.length = 0 &&
  csp.variable_declarations.length = 0 &&
  csp.assumes.length = 0 &&
  csp.guarantees.length = 2 &&
  csp.guarantees.element[0] = some (ci: ContractItem) {
    ci.name = mk_some<Identifier>("pos_Def") &&
    ci.expression = some (e: Expression) {
      e.kind = ExpressionKind.Equal &&
      e.equal = some (bo: BinaryOperation) {
        bo.lhs_operand = some (e: Expression) {
          e.kind = ExpressionKind.Id &&
          e.identifier = "pos"
        } &&
        bo.rhs_operand = some (e: Expression) {
          e.kind = ExpressionKind.Id &&
          e.identifier = "location_source_pos"
        }
      }
    }
  } &&
  csp.guarantees.element[1] = some (ci: ContractItem) {
    ci.name = mk_some<Identifier>("dir_Def") &&
    ci.expression = some (e: Expression) {
      e.kind = ExpressionKind.Equal &&
      e.equal = some (bo: BinaryOperation) {
        bo.lhs_operand = some (e: Expression) {
          e.kind = ExpressionKind.Id &&
          e.identifier = "dir"
        } &&
        bo.rhs_operand = some (e: Expression) {
          e.kind = ExpressionKind.Id &&
          e.identifier = "location_source_dir"
        }
      }
    }
  } &&
  csp.modes.length = 0 &&
  csp.imports.length = 0})} &&
m.component_types.element[5] = some (ct: ComponentType) {
  ct.name = "IRU" &&
  ct.ports.length = 4 &&
  ct.ports.element[0] = some(p: Port) {
    p.name = "location_source_pos" &&
    p.mode = PortMode.In &&
    p.ptype = mk_some<DataType>(some (dt: DataType) {
      dt.kind = DataTypeKind.UserDefined &&
      dt.user_defined_type = m.type_declarations.element[3]
  })} &&
ct.ports.element[1] = some(p: Port) {
  p.name = "location_source_dir" &&
  p.mode = PortMode.In &&
  p.ptype = mk_some<DataType>(some (dt: DataType) {
    dt.kind = DataTypeKind.UserDefined &&
    dt.user_defined_type = m.type_declarations.element[1]})} &&
ct.ports.element[2] = some(p: Port) {
  p.name = "pos" &&
  p.mode = PortMode.Out &&
  p.ptype = mk_some<DataType>(some (dt: DataType) {
    dt.kind = DataTypeKind.UserDefined &&
    dt.user_defined_type = m.type_declarations.element[3]})} &&
ct.ports.element[3] = some(p: Port) {
  p.name = "dir" &&
  p.mode = PortMode.Out &&
  p.ptype = mk_some<DataType>(some (dt: DataType) {
    dt.kind = DataTypeKind.UserDefined &&
    dt.user_defined_type = m.type_declarations.element[1]})} &&
ct.contract = mk_some<ContractSpec>(some (csp: ContractSpec) {
  csp.constant_declarations.length = 0 &&
  csp.variable_declarations.length = 0 &&
  csp.assumes.length = 0 &&
  csp.guarantees.length = 2 &&
  csp.guarantees.element[0] = some (ci: ContractItem) {
    ci.name = mk_some<Identifier>("pos_Def") &&
    ci.expression = some (e: Expression) {
      e.kind = ExpressionKind.Equal &&
      e.equal = some (bo: BinaryOperation) {
        bo.lhs_operand = some (e: Expression) {
          e.kind = ExpressionKind.Id &&
          e.identifier = "pos"
        } &&
        bo.rhs_operand = some (e: Expression) {
          e.kind = ExpressionKind.Id &&
          e.identifier = "location_source_pos"
        }
      }
    }
  } &&
  csp.guarantees.element[1] = some (ci: ContractItem) {
    ci.name = mk_some<Identifier>("dir_Def") &&
    ci.expression = some (e: Expression) {
      e.kind = ExpressionKind.Equal &&
      e.equal = some (bo: BinaryOperation) {
        bo.lhs_operand = some (e: Expression) {
          e.kind = ExpressionKind.Id &&
          e.identifier = "dir"
        } &&
        bo.rhs_operand = some (e: Expression) {
          e.kind = ExpressionKind.Id &&
          e.identifier = "location_source_dir"
        }
      }
    }
  } &&
  csp.modes.length = 0 &&
  csp.imports.length = 0})} &&
m.component_types.element[6] = some (ct: ComponentType) {
  ct.name = "MissionPlanner" &&
  ct.ports.length = 1 &&
  ct.ports.element[0] = some(p: Port) {
    p.name = "tasks" &&
    p.mode = PortMode.Out &&
    p.ptype = mk_some<DataType>(some (dt: DataType) {
      dt.kind = DataTypeKind.UserDefined &&
      dt.user_defined_type = m.type_declarations.element[9]
  })} &&
ct.contract = mk_some<ContractSpec>(some (csp: ContractSpec) {
  csp.constant_declarations.length = 0 &&
  csp.variable_declarations.length = 3 &&
  csp.variable_declarations.element[0] = some (sd: SymbolDefinition) {
    sd.name = "t1" &&
    sd.dtype = some (dt: DataType) {
      dt.kind = DataTypeKind.UserDefined &&
      dt.user_defined_type = m.type_declarations.element[5]
  } &&
  sd.definition = some (e: Expression) {
    e.kind = ExpressionKind.RecordLiteral &&
    e.record_literal = some (rl: RecordLiteral) {
      rl.record_type = "Task.impl" &&
      rl.field_definitions.length = 3 &&
      rl.field_definitions.element[0] = some (fd: FieldDefinition) {
        fd.field_id = "waypoint" &&
        fd.field_value = some (e: Expression) {
          e.kind = ExpressionKind.RecordLiteral &&
          e.record_literal = some (rl: RecordLiteral) {
            rl.record_type = "Position.impl" &&
            rl.field_definitions.length = 2 &&
            rl.field_definitions.element[0] = some (fd: FieldDefinition) {
              fd.field_id = "x" &&
              fd.field_value = some (e: Expression) {
                e.kind = ExpressionKind.IntLiteral &&
                e.int_literal = 1
              }
            } &&
            rl.field_definitions.element[1] = some (fd: FieldDefinition) {
              fd.field_id = "y" &&
              fd.field_value = some (e: Expression) {
                e.kind = ExpressionKind.IntLiteral &&
                e.int_literal = 1
              }
            }
          }
        }
      } &&
      rl.field_definitions.element[1] = some (fd: FieldDefinition) {
        fd.field_id = "action" &&
        fd.field_value = some (e: Expression) {
          e.kind = ExpressionKind.Id &&
          e.identifier = "Camera"
        }
      } &&
      rl.field_definitions.element[2] = some (fd: FieldDefinition) {
        fd.field_id = "status" &&
        fd.field_value = some (e: Expression) {
          e.kind = ExpressionKind.Id &&
          e.identifier = "Started"
        }
      }
    }
  }} &&
csp.variable_declarations.element[1] = some (sd: SymbolDefinition) {
  sd.name = "t2" &&
  sd.dtype = some (dt: DataType) {
    dt.kind = DataTypeKind.UserDefined &&
    dt.user_defined_type = m.type_declarations.element[5]} &&
sd.definition = some (e: Expression) {
  e.kind = ExpressionKind.RecordLiteral &&
  e.record_literal = some (rl: RecordLiteral) {
    rl.record_type = "Task.impl" &&
    rl.field_definitions.length = 3 &&
    rl.field_definitions.element[0] = some (fd: FieldDefinition) {
      fd.field_id = "waypoint" &&
      fd.field_value = some (e: Expression) {
        e.kind = ExpressionKind.RecordLiteral &&
        e.record_literal = some (rl: RecordLiteral) {
          rl.record_type = "Position.impl" &&
          rl.field_definitions.length = 2 &&
          rl.field_definitions.element[0] = some (fd: FieldDefinition) {
            fd.field_id = "x" &&
            fd.field_value = some (e: Expression) {
              e.kind = ExpressionKind.IntLiteral &&
              e.int_literal = 1
            }
          } &&
          rl.field_definitions.element[1] = some (fd: FieldDefinition) {
            fd.field_id = "y" &&
            fd.field_value = some (e: Expression) {
              e.kind = ExpressionKind.IntLiteral &&
              e.int_literal = 2
            }
          }
        }
      }
    } &&
    rl.field_definitions.element[1] = some (fd: FieldDefinition) {
      fd.field_id = "action" &&
      fd.field_value = some (e: Expression) {
        e.kind = ExpressionKind.Id &&
        e.identifier = "Weapon"
      }
    } &&
    rl.field_definitions.element[2] = some (fd: FieldDefinition) {
      fd.field_id = "status" &&
      fd.field_value = some (e: Expression) {
        e.kind = ExpressionKind.Id &&
        e.identifier = "Started"
      }
    }
  }}} &&
csp.variable_declarations.element[2] = some (sd: SymbolDefinition) {
  sd.name = "t3" &&
  sd.dtype = some (dt: DataType) {
    dt.kind = DataTypeKind.UserDefined &&
    dt.user_defined_type = m.type_declarations.element[5]} &&
sd.definition = some (e: Expression) {
  e.kind = ExpressionKind.RecordLiteral &&
  e.record_literal = some (rl: RecordLiteral) {
    rl.record_type = "Task.impl" &&
    rl.field_definitions.length = 3 &&
    rl.field_definitions.element[0] = some (fd: FieldDefinition) {
      fd.field_id = "waypoint" &&
      fd.field_value = some (e: Expression) {
        e.kind = ExpressionKind.RecordLiteral &&
        e.record_literal = some (rl: RecordLiteral) {
          rl.record_type = "Position.impl" &&
          rl.field_definitions.length = 2 &&
          rl.field_definitions.element[0] = some (fd: FieldDefinition) {
            fd.field_id = "x" &&
            fd.field_value = some (e: Expression) {
              e.kind = ExpressionKind.IntLiteral &&
              e.int_literal = 2
            }
          } &&
          rl.field_definitions.element[1] = some (fd: FieldDefinition) {
            fd.field_id = "y" &&
            fd.field_value = some (e: Expression) {
              e.kind = ExpressionKind.IntLiteral &&
              e.int_literal = 2
            }
          }
        }
      }
    } &&
    rl.field_definitions.element[1] = some (fd: FieldDefinition) {
      fd.field_id = "action" &&
      fd.field_value = some (e: Expression) {
        e.kind = ExpressionKind.Id &&
        e.identifier = "Land"
      }
    } &&
    rl.field_definitions.element[2] = some (fd: FieldDefinition) {
      fd.field_id = "status" &&
      fd.field_value = some (e: Expression) {
        e.kind = ExpressionKind.Id &&
        e.identifier = "Started"
      }
    }
  }}} &&csp.assumes.length = 0 &&csp.guarantees.length = 1 &&
csp.guarantees.element[0] = some (ci: ContractItem) {
  ci.name = mk_some<Identifier>("tasks_Def") &&
  ci.expression = some (e: Expression) {
    e.kind = ExpressionKind.Equal &&
    e.equal = some (bo: BinaryOperation) {
      bo.lhs_operand = some (e: Expression) {
        e.kind = ExpressionKind.Id &&
        e.identifier = "tasks"
      } &&
      bo.rhs_operand = some (e: Expression) {
        e.kind = ExpressionKind.RecordLiteral &&
        e.record_literal = some (rl: RecordLiteral) {
          rl.record_type = "Tasks.impl" &&
          rl.field_definitions.length = 3 &&
          rl.field_definitions.element[0] = some (fd: FieldDefinition) {
            fd.field_id = "task1" &&
            fd.field_value = some (e: Expression) {
              e.kind = ExpressionKind.Id &&
              e.identifier = "t1"
            }
          } &&
          rl.field_definitions.element[1] = some (fd: FieldDefinition) {
            fd.field_id = "task2" &&
            fd.field_value = some (e: Expression) {
              e.kind = ExpressionKind.Id &&
              e.identifier = "t2"
            }
          } &&
          rl.field_definitions.element[2] = some (fd: FieldDefinition) {
            fd.field_id = "task3" &&
            fd.field_value = some (e: Expression) {
              e.kind = ExpressionKind.Id &&
              e.identifier = "t3"
            }
          }
        }
      }
    }
  }} &&csp.modes.length = 0 &&csp.imports.length = 0})} &&
m.component_types.element[7] = some (ct: ComponentType) {
  ct.name = "Mixer" &&
  ct.ports.length = 5 &&
  ct.ports.element[0] = some(p: Port) {
    p.name = "mstate" &&
    p.mode = PortMode.In &&
    p.ptype = mk_some<DataType>(some (dt: DataType) {
      dt.kind = DataTypeKind.UserDefined &&
      dt.user_defined_type = m.type_declarations.element[7]
  })} &&
ct.ports.element[1] = some(p: Port) {
  p.name = "moveRC" &&
  p.mode = PortMode.In &&
  p.ptype = mk_some<DataType>(some (dt: DataType) {
    dt.kind = DataTypeKind.UserDefined &&
    dt.user_defined_type = m.type_declarations.element[0]})} &&
ct.ports.element[2] = some(p: Port) {
  p.name = "moveNav" &&
  p.mode = PortMode.In &&
  p.ptype = mk_some<DataType>(some (dt: DataType) {
    dt.kind = DataTypeKind.UserDefined &&
    dt.user_defined_type = m.type_declarations.element[0]})} &&
ct.ports.element[3] = some(p: Port) {
  p.name = "currentDir" &&
  p.mode = PortMode.In &&
  p.ptype = mk_some<DataType>(some (dt: DataType) {
    dt.kind = DataTypeKind.UserDefined &&
    dt.user_defined_type = m.type_declarations.element[1]})} &&
ct.ports.element[4] = some(p: Port) {
  p.name = "cmd" &&
  p.mode = PortMode.Out &&
  p.ptype = mk_some<DataType>(some (dt: DataType) {
    dt.kind = DataTypeKind.UserDefined &&
    dt.user_defined_type = m.type_declarations.element[6]})} &&
ct.contract = mk_some<ContractSpec>(some (csp: ContractSpec) {
  csp.constant_declarations.length = 0 &&
  csp.variable_declarations.length = 1 &&
  csp.variable_declarations.element[0] = some (sd: SymbolDefinition) {
    sd.name = "move" &&
    sd.dtype = some (dt: DataType) {
      dt.kind = DataTypeKind.UserDefined &&
      dt.user_defined_type = m.type_declarations.element[0]
  } &&
  sd.definition = some (e: Expression) {
    e.kind = ExpressionKind.ConditionalExpr &&
    e.conditional_expr = some (ite: IfThenElse) {
      ite.condition = some (e: Expression) {
        e.kind = ExpressionKind.Equal &&
        e.equal = some (bo: BinaryOperation) {
          bo.lhs_operand = some (e: Expression) {
            e.kind = ExpressionKind.Id &&
            e.identifier = "mstate"
          } &&
          bo.rhs_operand = some (e: Expression) {
            e.kind = ExpressionKind.Id &&
            e.identifier = "s_MANUAL_FLIGHT_MODE"
          }
        }
      } &&
      ite.thenBranch = some (e: Expression) {
        e.kind = ExpressionKind.Id &&
        e.identifier = "moveRC"
      } &&
      ite.elseBranch = some (e: Expression) {
        e.kind = ExpressionKind.Id &&
        e.identifier = "moveNav"
      }
    }
  }} &&csp.assumes.length = 0 &&csp.guarantees.length = 1 &&
csp.guarantees.element[0] = some (ci: ContractItem) {
  ci.name = mk_some<Identifier>("cmd_Def") &&
  ci.expression = some (e: Expression) {
    e.kind = ExpressionKind.Equal &&
    e.equal = some (bo: BinaryOperation) {
      bo.lhs_operand = some (e: Expression) {
        e.kind = ExpressionKind.Id &&
        e.identifier = "cmd"
      } &&
      bo.rhs_operand = some (e: Expression) {
        e.kind = ExpressionKind.ConditionalExpr &&
        e.conditional_expr = some (ite: IfThenElse) {
          ite.condition = some (e: Expression) {
            e.kind = ExpressionKind.And &&
            e.and = some (bo: BinaryOperation) {
              bo.lhs_operand = some (e: Expression) {
                e.kind = ExpressionKind.Equal &&
                e.equal = some (bo: BinaryOperation) {
                  bo.lhs_operand = some (e: Expression) {
                    e.kind = ExpressionKind.Id &&
                    e.identifier = "move"
                  } &&
                  bo.rhs_operand = some (e: Expression) {
                    e.kind = ExpressionKind.Id &&
                    e.identifier = "Move_Forward"
                  }
                }
              } &&
              bo.rhs_operand = some (e: Expression) {
                e.kind = ExpressionKind.Equal &&
                e.equal = some (bo: BinaryOperation) {
                  bo.lhs_operand = some (e: Expression) {
                    e.kind = ExpressionKind.Id &&
                    e.identifier = "currentDir"
                  } &&
                  bo.rhs_operand = some (e: Expression) {
                    e.kind = ExpressionKind.Id &&
                    e.identifier = "North"
                  }
                }
              }
            }
          } &&
          ite.thenBranch = some (e: Expression) {
            e.kind = ExpressionKind.Id &&
            e.identifier = "IncreaseY"
          } &&
          ite.elseBranch = some (e: Expression) {
            e.kind = ExpressionKind.ConditionalExpr &&
            e.conditional_expr = some (ite: IfThenElse) {
              ite.condition = some (e: Expression) {
                e.kind = ExpressionKind.And &&
                e.and = some (bo: BinaryOperation) {
                  bo.lhs_operand = some (e: Expression) {
                    e.kind = ExpressionKind.Equal &&
                    e.equal = some (bo: BinaryOperation) {
                      bo.lhs_operand = some (e: Expression) {
                        e.kind = ExpressionKind.Id &&
                        e.identifier = "move"
                      } &&
                      bo.rhs_operand = some (e: Expression) {
                        e.kind = ExpressionKind.Id &&
                        e.identifier = "Move_Forward"
                      }
                    }
                  } &&
                  bo.rhs_operand = some (e: Expression) {
                    e.kind = ExpressionKind.Equal &&
                    e.equal = some (bo: BinaryOperation) {
                      bo.lhs_operand = some (e: Expression) {
                        e.kind = ExpressionKind.Id &&
                        e.identifier = "currentDir"
                      } &&
                      bo.rhs_operand = some (e: Expression) {
                        e.kind = ExpressionKind.Id &&
                        e.identifier = "South"
                      }
                    }
                  }
                }
              } &&
              ite.thenBranch = some (e: Expression) {
                e.kind = ExpressionKind.Id &&
                e.identifier = "DecreaseY"
              } &&
              ite.elseBranch = some (e: Expression) {
                e.kind = ExpressionKind.ConditionalExpr &&
                e.conditional_expr = some (ite: IfThenElse) {
                  ite.condition = some (e: Expression) {
                    e.kind = ExpressionKind.And &&
                    e.and = some (bo: BinaryOperation) {
                      bo.lhs_operand = some (e: Expression) {
                        e.kind = ExpressionKind.Equal &&
                        e.equal = some (bo: BinaryOperation) {
                          bo.lhs_operand = some (e: Expression) {
                            e.kind = ExpressionKind.Id &&
                            e.identifier = "move"
                          } &&
                          bo.rhs_operand = some (e: Expression) {
                            e.kind = ExpressionKind.Id &&
                            e.identifier = "Move_Forward"
                          }
                        }
                      } &&
                      bo.rhs_operand = some (e: Expression) {
                        e.kind = ExpressionKind.Equal &&
                        e.equal = some (bo: BinaryOperation) {
                          bo.lhs_operand = some (e: Expression) {
                            e.kind = ExpressionKind.Id &&
                            e.identifier = "currentDir"
                          } &&
                          bo.rhs_operand = some (e: Expression) {
                            e.kind = ExpressionKind.Id &&
                            e.identifier = "East"
                          }
                        }
                      }
                    }
                  } &&
                  ite.thenBranch = some (e: Expression) {
                    e.kind = ExpressionKind.Id &&
                    e.identifier = "IncreaseX"
                  } &&
                  ite.elseBranch = some (e: Expression) {
                    e.kind = ExpressionKind.ConditionalExpr &&
                    e.conditional_expr = some (ite: IfThenElse) {
                      ite.condition = some (e: Expression) {
                        e.kind = ExpressionKind.And &&
                        e.and = some (bo: BinaryOperation) {
                          bo.lhs_operand = some (e: Expression) {
                            e.kind = ExpressionKind.Equal &&
                            e.equal = some (bo: BinaryOperation) {
                              bo.lhs_operand = some (e: Expression) {
                                e.kind = ExpressionKind.Id &&
                                e.identifier = "move"
                              } &&
                              bo.rhs_operand = some (e: Expression) {
                                e.kind = ExpressionKind.Id &&
                                e.identifier = "Move_Forward"
                              }
                            }
                          } &&
                          bo.rhs_operand = some (e: Expression) {
                            e.kind = ExpressionKind.Equal &&
                            e.equal = some (bo: BinaryOperation) {
                              bo.lhs_operand = some (e: Expression) {
                                e.kind = ExpressionKind.Id &&
                                e.identifier = "currentDir"
                              } &&
                              bo.rhs_operand = some (e: Expression) {
                                e.kind = ExpressionKind.Id &&
                                e.identifier = "West"
                              }
                            }
                          }
                        }
                      } &&
                      ite.thenBranch = some (e: Expression) {
                        e.kind = ExpressionKind.Id &&
                        e.identifier = "DecreaseX"
                      } &&
                      ite.elseBranch = some (e: Expression) {
                        e.kind = ExpressionKind.ConditionalExpr &&
                        e.conditional_expr = some (ite: IfThenElse) {
                          ite.condition = some (e: Expression) {
                            e.kind = ExpressionKind.And &&
                            e.and = some (bo: BinaryOperation) {
                              bo.lhs_operand = some (e: Expression) {
                                e.kind = ExpressionKind.Equal &&
                                e.equal = some (bo: BinaryOperation) {
                                  bo.lhs_operand = some (e: Expression) {
                                    e.kind = ExpressionKind.Id &&
                                    e.identifier = "move"
                                  } &&
                                  bo.rhs_operand = some (e: Expression) {
                                    e.kind = ExpressionKind.Id &&
                                    e.identifier = "Turn_Right"
                                  }
                                }
                              } &&
                              bo.rhs_operand = some (e: Expression) {
                                e.kind = ExpressionKind.Equal &&
                                e.equal = some (bo: BinaryOperation) {
                                  bo.lhs_operand = some (e: Expression) {
                                    e.kind = ExpressionKind.Id &&
                                    e.identifier = "currentDir"
                                  } &&
                                  bo.rhs_operand = some (e: Expression) {
                                    e.kind = ExpressionKind.Id &&
                                    e.identifier = "North"
                                  }
                                }
                              }
                            }
                          } &&
                          ite.thenBranch = some (e: Expression) {
                            e.kind = ExpressionKind.Id &&
                            e.identifier = "IncreaseYaw"
                          } &&
                          ite.elseBranch = some (e: Expression) {
                            e.kind = ExpressionKind.ConditionalExpr &&
                            e.conditional_expr = some (ite: IfThenElse) {
                              ite.condition = some (e: Expression) {
                                e.kind = ExpressionKind.And &&
                                e.and = some (bo: BinaryOperation) {
                                  bo.lhs_operand = some (e: Expression) {
                                    e.kind = ExpressionKind.Equal &&
                                    e.equal = some (bo: BinaryOperation) {
                                      bo.lhs_operand = some (e: Expression) {
                                        e.kind = ExpressionKind.Id &&
                                        e.identifier = "move"
                                      } &&
                                      bo.rhs_operand = some (e: Expression) {
                                        e.kind = ExpressionKind.Id &&
                                        e.identifier = "Turn_Right"
                                      }
                                    }
                                  } &&
                                  bo.rhs_operand = some (e: Expression) {
                                    e.kind = ExpressionKind.Equal &&
                                    e.equal = some (bo: BinaryOperation) {
                                      bo.lhs_operand = some (e: Expression) {
                                        e.kind = ExpressionKind.Id &&
                                        e.identifier = "currentDir"
                                      } &&
                                      bo.rhs_operand = some (e: Expression) {
                                        e.kind = ExpressionKind.Id &&
                                        e.identifier = "East"
                                      }
                                    }
                                  }
                                }
                              } &&
                              ite.thenBranch = some (e: Expression) {
                                e.kind = ExpressionKind.Id &&
                                e.identifier = "IncreaseYaw"
                              } &&
                              ite.elseBranch = some (e: Expression) {
                                e.kind = ExpressionKind.ConditionalExpr &&
                                e.conditional_expr = some (ite: IfThenElse) {
                                  ite.condition = some (e: Expression) {
                                    e.kind = ExpressionKind.And &&
                                    e.and = some (bo: BinaryOperation) {
                                      bo.lhs_operand = some (e: Expression) {
                                        e.kind = ExpressionKind.Equal &&
                                        e.equal = some (bo: BinaryOperation) {
                                          bo.lhs_operand = some (e: Expression) {
                                            e.kind = ExpressionKind.Id &&
                                            e.identifier = "move"
                                          } &&
                                          bo.rhs_operand = some (e: Expression) {
                                            e.kind = ExpressionKind.Id &&
                                            e.identifier = "Turn_Right"
                                          }
                                        }
                                      } &&
                                      bo.rhs_operand = some (e: Expression) {
                                        e.kind = ExpressionKind.Equal &&
                                        e.equal = some (bo: BinaryOperation) {
                                          bo.lhs_operand = some (e: Expression) {
                                            e.kind = ExpressionKind.Id &&
                                            e.identifier = "currentDir"
                                          } &&
                                          bo.rhs_operand = some (e: Expression) {
                                            e.kind = ExpressionKind.Id &&
                                            e.identifier = "South"
                                          }
                                        }
                                      }
                                    }
                                  } &&
                                  ite.thenBranch = some (e: Expression) {
                                    e.kind = ExpressionKind.Id &&
                                    e.identifier = "IncreaseYaw"
                                  } &&
                                  ite.elseBranch = some (e: Expression) {
                                    e.kind = ExpressionKind.ConditionalExpr &&
                                    e.conditional_expr = some (ite: IfThenElse) {
                                      ite.condition = some (e: Expression) {
                                        e.kind = ExpressionKind.And &&
                                        e.and = some (bo: BinaryOperation) {
                                          bo.lhs_operand = some (e: Expression) {
                                            e.kind = ExpressionKind.Equal &&
                                            e.equal = some (bo: BinaryOperation) {
                                              bo.lhs_operand = some (e: Expression) {
                                                e.kind = ExpressionKind.Id &&
                                                e.identifier = "move"
                                              } &&
                                              bo.rhs_operand = some (e: Expression) {
                                                e.kind = ExpressionKind.Id &&
                                                e.identifier = "Turn_Right"
                                              }
                                            }
                                          } &&
                                          bo.rhs_operand = some (e: Expression) {
                                            e.kind = ExpressionKind.Equal &&
                                            e.equal = some (bo: BinaryOperation) {
                                              bo.lhs_operand = some (e: Expression) {
                                                e.kind = ExpressionKind.Id &&
                                                e.identifier = "currentDir"
                                              } &&
                                              bo.rhs_operand = some (e: Expression) {
                                                e.kind = ExpressionKind.Id &&
                                                e.identifier = "West"
                                              }
                                            }
                                          }
                                        }
                                      } &&
                                      ite.thenBranch = some (e: Expression) {
                                        e.kind = ExpressionKind.Id &&
                                        e.identifier = "IncreaseYaw"
                                      } &&
                                      ite.elseBranch = some (e: Expression) {
                                        e.kind = ExpressionKind.ConditionalExpr &&
                                        e.conditional_expr = some (ite: IfThenElse) {
                                          ite.condition = some (e: Expression) {
                                            e.kind = ExpressionKind.And &&
                                            e.and = some (bo: BinaryOperation) {
                                              bo.lhs_operand = some (e: Expression) {
                                                e.kind = ExpressionKind.Equal &&
                                                e.equal = some (bo: BinaryOperation) {
                                                  bo.lhs_operand = some (e: Expression) {
                                                    e.kind = ExpressionKind.Id &&
                                                    e.identifier = "move"
                                                  } &&
                                                  bo.rhs_operand = some (e: Expression) {
                                                    e.kind = ExpressionKind.Id &&
                                                    e.identifier = "Turn_Left"
                                                  }
                                                }
                                              } &&
                                              bo.rhs_operand = some (e: Expression) {
                                                e.kind = ExpressionKind.Equal &&
                                                e.equal = some (bo: BinaryOperation) {
                                                  bo.lhs_operand = some (e: Expression) {
                                                    e.kind = ExpressionKind.Id &&
                                                    e.identifier = "currentDir"
                                                  } &&
                                                  bo.rhs_operand = some (e: Expression) {
                                                    e.kind = ExpressionKind.Id &&
                                                    e.identifier = "North"
                                                  }
                                                }
                                              }
                                            }
                                          } &&
                                          ite.thenBranch = some (e: Expression) {
                                            e.kind = ExpressionKind.Id &&
                                            e.identifier = "DecreaseYaw"
                                          } &&
                                          ite.elseBranch = some (e: Expression) {
                                            e.kind = ExpressionKind.ConditionalExpr &&
                                            e.conditional_expr = some (ite: IfThenElse) {
                                              ite.condition = some (e: Expression) {
                                                e.kind = ExpressionKind.And &&
                                                e.and = some (bo: BinaryOperation) {
                                                  bo.lhs_operand = some (e: Expression) {
                                                    e.kind = ExpressionKind.Equal &&
                                                    e.equal = some (bo: BinaryOperation) {
                                                      bo.lhs_operand = some (e: Expression) {
                                                        e.kind = ExpressionKind.Id &&
                                                        e.identifier = "move"
                                                      } &&
                                                      bo.rhs_operand = some (e: Expression) {
                                                        e.kind = ExpressionKind.Id &&
                                                        e.identifier = "Turn_Left"
                                                      }
                                                    }
                                                  } &&
                                                  bo.rhs_operand = some (e: Expression) {
                                                    e.kind = ExpressionKind.Equal &&
                                                    e.equal = some (bo: BinaryOperation) {
                                                      bo.lhs_operand = some (e: Expression) {
                                                        e.kind = ExpressionKind.Id &&
                                                        e.identifier = "currentDir"
                                                      } &&
                                                      bo.rhs_operand = some (e: Expression) {
                                                        e.kind = ExpressionKind.Id &&
                                                        e.identifier = "West"
                                                      }
                                                    }
                                                  }
                                                }
                                              } &&
                                              ite.thenBranch = some (e: Expression) {
                                                e.kind = ExpressionKind.Id &&
                                                e.identifier = "DecreaseYaw"
                                              } &&
                                              ite.elseBranch = some (e: Expression) {
                                                e.kind = ExpressionKind.ConditionalExpr &&
                                                e.conditional_expr = some (ite: IfThenElse) {
                                                  ite.condition = some (e: Expression) {
                                                    e.kind = ExpressionKind.And &&
                                                    e.and = some (bo: BinaryOperation) {
                                                      bo.lhs_operand = some (e: Expression) {
                                                        e.kind = ExpressionKind.Equal &&
                                                        e.equal = some (bo: BinaryOperation) {
                                                          bo.lhs_operand = some (e: Expression) {
                                                            e.kind = ExpressionKind.Id &&
                                                            e.identifier = "move"
                                                          } &&
                                                          bo.rhs_operand = some (e: Expression) {
                                                            e.kind = ExpressionKind.Id &&
                                                            e.identifier = "Turn_Left"
                                                          }
                                                        }
                                                      } &&
                                                      bo.rhs_operand = some (e: Expression) {
                                                        e.kind = ExpressionKind.Equal &&
                                                        e.equal = some (bo: BinaryOperation) {
                                                          bo.lhs_operand = some (e: Expression) {
                                                            e.kind = ExpressionKind.Id &&
                                                            e.identifier = "currentDir"
                                                          } &&
                                                          bo.rhs_operand = some (e: Expression) {
                                                            e.kind = ExpressionKind.Id &&
                                                            e.identifier = "South"
                                                          }
                                                        }
                                                      }
                                                    }
                                                  } &&
                                                  ite.thenBranch = some (e: Expression) {
                                                    e.kind = ExpressionKind.Id &&
                                                    e.identifier = "DecreaseYaw"
                                                  } &&
                                                  ite.elseBranch = some (e: Expression) {
                                                    e.kind = ExpressionKind.ConditionalExpr &&
                                                    e.conditional_expr = some (ite: IfThenElse) {
                                                      ite.condition = some (e: Expression) {
                                                        e.kind = ExpressionKind.And &&
                                                        e.and = some (bo: BinaryOperation) {
                                                          bo.lhs_operand = some (e: Expression) {
                                                            e.kind = ExpressionKind.Equal &&
                                                            e.equal = some (bo: BinaryOperation) {
                                                              bo.lhs_operand = some (e: Expression) {
                                                                e.kind = ExpressionKind.Id &&
                                                                e.identifier = "move"
                                                              } &&
                                                              bo.rhs_operand = some (e: Expression) {
                                                                e.kind = ExpressionKind.Id &&
                                                                e.identifier = "Turn_Left"
                                                              }
                                                            }
                                                          } &&
                                                          bo.rhs_operand = some (e: Expression) {
                                                            e.kind = ExpressionKind.Equal &&
                                                            e.equal = some (bo: BinaryOperation) {
                                                              bo.lhs_operand = some (e: Expression) {
                                                                e.kind = ExpressionKind.Id &&
                                                                e.identifier = "currentDir"
                                                              } &&
                                                              bo.rhs_operand = some (e: Expression) {
                                                                e.kind = ExpressionKind.Id &&
                                                                e.identifier = "East"
                                                              }
                                                            }
                                                          }
                                                        }
                                                      } &&
                                                      ite.thenBranch = some (e: Expression) {
                                                        e.kind = ExpressionKind.Id &&
                                                        e.identifier = "DecreaseYaw"
                                                      } &&
                                                      ite.elseBranch = some (e: Expression) {
                                                        e.kind = ExpressionKind.Id &&
                                                        e.identifier = "NoChange"
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }} &&csp.modes.length = 0 &&csp.imports.length = 0})} &&
m.component_types.element[8] = some (ct: ComponentType) {
  ct.name = "Navigator" &&
  ct.ports.length = 5 &&
  ct.ports.element[0] = some(p: Port) {
    p.name = "currentPos" &&
    p.mode = PortMode.In &&
    p.ptype = mk_some<DataType>(some (dt: DataType) {
      dt.kind = DataTypeKind.UserDefined &&
      dt.user_defined_type = m.type_declarations.element[3]
  })} &&
ct.ports.element[1] = some(p: Port) {
  p.name = "waypoint" &&
  p.mode = PortMode.In &&
  p.ptype = mk_some<DataType>(some (dt: DataType) {
    dt.kind = DataTypeKind.UserDefined &&
    dt.user_defined_type = m.type_declarations.element[3]})} &&
ct.ports.element[2] = some(p: Port) {
  p.name = "currentDir" &&
  p.mode = PortMode.In &&
  p.ptype = mk_some<DataType>(some (dt: DataType) {
    dt.kind = DataTypeKind.UserDefined &&
    dt.user_defined_type = m.type_declarations.element[1]})} &&
ct.ports.element[3] = some(p: Port) {
  p.name = "move" &&
  p.mode = PortMode.Out &&
  p.ptype = mk_some<DataType>(some (dt: DataType) {
    dt.kind = DataTypeKind.UserDefined &&
    dt.user_defined_type = m.type_declarations.element[0]})} &&
ct.ports.element[4] = some(p: Port) {
  p.name = "dest_reached" &&
  p.mode = PortMode.Out &&
  p.ptype = mk_some<DataType>(BoolType)} &&
ct.contract = mk_some<ContractSpec>(some (csp: ContractSpec) {
  csp.constant_declarations.length = 0 &&
  csp.variable_declarations.length = 0 &&
  csp.assumes.length = 0 &&
  csp.guarantees.length = 2 &&
  csp.guarantees.element[0] = some (ci: ContractItem) {
    ci.name = mk_some<Identifier>("move_Def") &&
    ci.expression = some (e: Expression) {
      e.kind = ExpressionKind.Equal &&
      e.equal = some (bo: BinaryOperation) {
        bo.lhs_operand = some (e: Expression) {
          e.kind = ExpressionKind.Id &&
          e.identifier = "move"
        } &&
        bo.rhs_operand = some (e: Expression) {
          e.kind = ExpressionKind.ConditionalExpr &&
          e.conditional_expr = some (ite: IfThenElse) {
            ite.condition = some (e: Expression) {
              e.kind = ExpressionKind.And &&
              e.and = some (bo: BinaryOperation) {
                bo.lhs_operand = some (e: Expression) {
                  e.kind = ExpressionKind.Equal &&
                  e.equal = some (bo: BinaryOperation) {
                    bo.lhs_operand = some (e: Expression) {
                      e.kind = ExpressionKind.Id &&
                      e.identifier = "currentDir"
                    } &&
                    bo.rhs_operand = some (e: Expression) {
                      e.kind = ExpressionKind.Id &&
                      e.identifier = "North"
                    }
                  }
                } &&
                bo.rhs_operand = some (e: Expression) {
                  e.kind = ExpressionKind.LessThan &&
                  e.less_than = some (bo: BinaryOperation) {
                    bo.lhs_operand = some (e: Expression) {
                      e.kind = ExpressionKind.RecordProjection &&
                      e.record_projection = some (rp: RecordProjection) {
                        rp.record_reference = some (e: Expression) {
                          e.kind = ExpressionKind.Id &&
                          e.identifier = "waypoint"
                        } &&
                        rp.field_id = "y"
                      }
                    } &&
                    bo.rhs_operand = some (e: Expression) {
                      e.kind = ExpressionKind.RecordProjection &&
                      e.record_projection = some (rp: RecordProjection) {
                        rp.record_reference = some (e: Expression) {
                          e.kind = ExpressionKind.Id &&
                          e.identifier = "currentPos"
                        } &&
                        rp.field_id = "y"
                      }
                    }
                  }
                }
              }
            } &&
            ite.thenBranch = some (e: Expression) {
              e.kind = ExpressionKind.Id &&
              e.identifier = "Move_Forward"
            } &&
            ite.elseBranch = some (e: Expression) {
              e.kind = ExpressionKind.ConditionalExpr &&
              e.conditional_expr = some (ite: IfThenElse) {
                ite.condition = some (e: Expression) {
                  e.kind = ExpressionKind.And &&
                  e.and = some (bo: BinaryOperation) {
                    bo.lhs_operand = some (e: Expression) {
                      e.kind = ExpressionKind.Equal &&
                      e.equal = some (bo: BinaryOperation) {
                        bo.lhs_operand = some (e: Expression) {
                          e.kind = ExpressionKind.Id &&
                          e.identifier = "currentDir"
                        } &&
                        bo.rhs_operand = some (e: Expression) {
                          e.kind = ExpressionKind.Id &&
                          e.identifier = "South"
                        }
                      }
                    } &&
                    bo.rhs_operand = some (e: Expression) {
                      e.kind = ExpressionKind.GreaterThan &&
                      e.greater_than = some (bo: BinaryOperation) {
                        bo.lhs_operand = some (e: Expression) {
                          e.kind = ExpressionKind.RecordProjection &&
                          e.record_projection = some (rp: RecordProjection) {
                            rp.record_reference = some (e: Expression) {
                              e.kind = ExpressionKind.Id &&
                              e.identifier = "waypoint"
                            } &&
                            rp.field_id = "y"
                          }
                        } &&
                        bo.rhs_operand = some (e: Expression) {
                          e.kind = ExpressionKind.RecordProjection &&
                          e.record_projection = some (rp: RecordProjection) {
                            rp.record_reference = some (e: Expression) {
                              e.kind = ExpressionKind.Id &&
                              e.identifier = "currentPos"
                            } &&
                            rp.field_id = "y"
                          }
                        }
                      }
                    }
                  }
                } &&
                ite.thenBranch = some (e: Expression) {
                  e.kind = ExpressionKind.Id &&
                  e.identifier = "Move_Forward"
                } &&
                ite.elseBranch = some (e: Expression) {
                  e.kind = ExpressionKind.ConditionalExpr &&
                  e.conditional_expr = some (ite: IfThenElse) {
                    ite.condition = some (e: Expression) {
                      e.kind = ExpressionKind.And &&
                      e.and = some (bo: BinaryOperation) {
                        bo.lhs_operand = some (e: Expression) {
                          e.kind = ExpressionKind.Equal &&
                          e.equal = some (bo: BinaryOperation) {
                            bo.lhs_operand = some (e: Expression) {
                              e.kind = ExpressionKind.Id &&
                              e.identifier = "currentDir"
                            } &&
                            bo.rhs_operand = some (e: Expression) {
                              e.kind = ExpressionKind.Id &&
                              e.identifier = "East"
                            }
                          }
                        } &&
                        bo.rhs_operand = some (e: Expression) {
                          e.kind = ExpressionKind.LessThan &&
                          e.less_than = some (bo: BinaryOperation) {
                            bo.lhs_operand = some (e: Expression) {
                              e.kind = ExpressionKind.RecordProjection &&
                              e.record_projection = some (rp: RecordProjection) {
                                rp.record_reference = some (e: Expression) {
                                  e.kind = ExpressionKind.Id &&
                                  e.identifier = "waypoint"
                                } &&
                                rp.field_id = "x"
                              }
                            } &&
                            bo.rhs_operand = some (e: Expression) {
                              e.kind = ExpressionKind.RecordProjection &&
                              e.record_projection = some (rp: RecordProjection) {
                                rp.record_reference = some (e: Expression) {
                                  e.kind = ExpressionKind.Id &&
                                  e.identifier = "currentPos"
                                } &&
                                rp.field_id = "x"
                              }
                            }
                          }
                        }
                      }
                    } &&
                    ite.thenBranch = some (e: Expression) {
                      e.kind = ExpressionKind.Id &&
                      e.identifier = "Move_Forward"
                    } &&
                    ite.elseBranch = some (e: Expression) {
                      e.kind = ExpressionKind.ConditionalExpr &&
                      e.conditional_expr = some (ite: IfThenElse) {
                        ite.condition = some (e: Expression) {
                          e.kind = ExpressionKind.And &&
                          e.and = some (bo: BinaryOperation) {
                            bo.lhs_operand = some (e: Expression) {
                              e.kind = ExpressionKind.Equal &&
                              e.equal = some (bo: BinaryOperation) {
                                bo.lhs_operand = some (e: Expression) {
                                  e.kind = ExpressionKind.Id &&
                                  e.identifier = "currentDir"
                                } &&
                                bo.rhs_operand = some (e: Expression) {
                                  e.kind = ExpressionKind.Id &&
                                  e.identifier = "West"
                                }
                              }
                            } &&
                            bo.rhs_operand = some (e: Expression) {
                              e.kind = ExpressionKind.GreaterThan &&
                              e.greater_than = some (bo: BinaryOperation) {
                                bo.lhs_operand = some (e: Expression) {
                                  e.kind = ExpressionKind.RecordProjection &&
                                  e.record_projection = some (rp: RecordProjection) {
                                    rp.record_reference = some (e: Expression) {
                                      e.kind = ExpressionKind.Id &&
                                      e.identifier = "waypoint"
                                    } &&
                                    rp.field_id = "x"
                                  }
                                } &&
                                bo.rhs_operand = some (e: Expression) {
                                  e.kind = ExpressionKind.RecordProjection &&
                                  e.record_projection = some (rp: RecordProjection) {
                                    rp.record_reference = some (e: Expression) {
                                      e.kind = ExpressionKind.Id &&
                                      e.identifier = "currentPos"
                                    } &&
                                    rp.field_id = "x"
                                  }
                                }
                              }
                            }
                          }
                        } &&
                        ite.thenBranch = some (e: Expression) {
                          e.kind = ExpressionKind.Id &&
                          e.identifier = "Move_Forward"
                        } &&
                        ite.elseBranch = some (e: Expression) {
                          e.kind = ExpressionKind.ConditionalExpr &&
                          e.conditional_expr = some (ite: IfThenElse) {
                            ite.condition = some (e: Expression) {
                              e.kind = ExpressionKind.And &&
                              e.and = some (bo: BinaryOperation) {
                                bo.lhs_operand = some (e: Expression) {
                                  e.kind = ExpressionKind.And &&
                                  e.and = some (bo: BinaryOperation) {
                                    bo.lhs_operand = some (e: Expression) {
                                      e.kind = ExpressionKind.Equal &&
                                      e.equal = some (bo: BinaryOperation) {
                                        bo.lhs_operand = some (e: Expression) {
                                          e.kind = ExpressionKind.Id &&
                                          e.identifier = "currentDir"
                                        } &&
                                        bo.rhs_operand = some (e: Expression) {
                                          e.kind = ExpressionKind.Id &&
                                          e.identifier = "North"
                                        }
                                      }
                                    } &&
                                    bo.rhs_operand = some (e: Expression) {
                                      e.kind = ExpressionKind.Equal &&
                                      e.equal = some (bo: BinaryOperation) {
                                        bo.lhs_operand = some (e: Expression) {
                                          e.kind = ExpressionKind.RecordProjection &&
                                          e.record_projection = some (rp: RecordProjection) {
                                            rp.record_reference = some (e: Expression) {
                                              e.kind = ExpressionKind.Id &&
                                              e.identifier = "waypoint"
                                            } &&
                                            rp.field_id = "y"
                                          }
                                        } &&
                                        bo.rhs_operand = some (e: Expression) {
                                          e.kind = ExpressionKind.RecordProjection &&
                                          e.record_projection = some (rp: RecordProjection) {
                                            rp.record_reference = some (e: Expression) {
                                              e.kind = ExpressionKind.Id &&
                                              e.identifier = "currentPos"
                                            } &&
                                            rp.field_id = "y"
                                          }
                                        }
                                      }
                                    }
                                  }
                                } &&
                                bo.rhs_operand = some (e: Expression) {
                                  e.kind = ExpressionKind.LessThan &&
                                  e.less_than = some (bo: BinaryOperation) {
                                    bo.lhs_operand = some (e: Expression) {
                                      e.kind = ExpressionKind.RecordProjection &&
                                      e.record_projection = some (rp: RecordProjection) {
                                        rp.record_reference = some (e: Expression) {
                                          e.kind = ExpressionKind.Id &&
                                          e.identifier = "waypoint"
                                        } &&
                                        rp.field_id = "x"
                                      }
                                    } &&
                                    bo.rhs_operand = some (e: Expression) {
                                      e.kind = ExpressionKind.RecordProjection &&
                                      e.record_projection = some (rp: RecordProjection) {
                                        rp.record_reference = some (e: Expression) {
                                          e.kind = ExpressionKind.Id &&
                                          e.identifier = "currentPos"
                                        } &&
                                        rp.field_id = "x"
                                      }
                                    }
                                  }
                                }
                              }
                            } &&
                            ite.thenBranch = some (e: Expression) {
                              e.kind = ExpressionKind.Id &&
                              e.identifier = "Turn_Right"
                            } &&
                            ite.elseBranch = some (e: Expression) {
                              e.kind = ExpressionKind.ConditionalExpr &&
                              e.conditional_expr = some (ite: IfThenElse) {
                                ite.condition = some (e: Expression) {
                                  e.kind = ExpressionKind.And &&
                                  e.and = some (bo: BinaryOperation) {
                                    bo.lhs_operand = some (e: Expression) {
                                      e.kind = ExpressionKind.And &&
                                      e.and = some (bo: BinaryOperation) {
                                        bo.lhs_operand = some (e: Expression) {
                                          e.kind = ExpressionKind.Equal &&
                                          e.equal = some (bo: BinaryOperation) {
                                            bo.lhs_operand = some (e: Expression) {
                                              e.kind = ExpressionKind.Id &&
                                              e.identifier = "currentDir"
                                            } &&
                                            bo.rhs_operand = some (e: Expression) {
                                              e.kind = ExpressionKind.Id &&
                                              e.identifier = "South"
                                            }
                                          }
                                        } &&
                                        bo.rhs_operand = some (e: Expression) {
                                          e.kind = ExpressionKind.Equal &&
                                          e.equal = some (bo: BinaryOperation) {
                                            bo.lhs_operand = some (e: Expression) {
                                              e.kind = ExpressionKind.RecordProjection &&
                                              e.record_projection = some (rp: RecordProjection) {
                                                rp.record_reference = some (e: Expression) {
                                                  e.kind = ExpressionKind.Id &&
                                                  e.identifier = "waypoint"
                                                } &&
                                                rp.field_id = "y"
                                              }
                                            } &&
                                            bo.rhs_operand = some (e: Expression) {
                                              e.kind = ExpressionKind.RecordProjection &&
                                              e.record_projection = some (rp: RecordProjection) {
                                                rp.record_reference = some (e: Expression) {
                                                  e.kind = ExpressionKind.Id &&
                                                  e.identifier = "currentPos"
                                                } &&
                                                rp.field_id = "y"
                                              }
                                            }
                                          }
                                        }
                                      }
                                    } &&
                                    bo.rhs_operand = some (e: Expression) {
                                      e.kind = ExpressionKind.LessThan &&
                                      e.less_than = some (bo: BinaryOperation) {
                                        bo.lhs_operand = some (e: Expression) {
                                          e.kind = ExpressionKind.RecordProjection &&
                                          e.record_projection = some (rp: RecordProjection) {
                                            rp.record_reference = some (e: Expression) {
                                              e.kind = ExpressionKind.Id &&
                                              e.identifier = "waypoint"
                                            } &&
                                            rp.field_id = "x"
                                          }
                                        } &&
                                        bo.rhs_operand = some (e: Expression) {
                                          e.kind = ExpressionKind.RecordProjection &&
                                          e.record_projection = some (rp: RecordProjection) {
                                            rp.record_reference = some (e: Expression) {
                                              e.kind = ExpressionKind.Id &&
                                              e.identifier = "currentPos"
                                            } &&
                                            rp.field_id = "x"
                                          }
                                        }
                                      }
                                    }
                                  }
                                } &&
                                ite.thenBranch = some (e: Expression) {
                                  e.kind = ExpressionKind.Id &&
                                  e.identifier = "Turn_Left"
                                } &&
                                ite.elseBranch = some (e: Expression) {
                                  e.kind = ExpressionKind.ConditionalExpr &&
                                  e.conditional_expr = some (ite: IfThenElse) {
                                    ite.condition = some (e: Expression) {
                                      e.kind = ExpressionKind.And &&
                                      e.and = some (bo: BinaryOperation) {
                                        bo.lhs_operand = some (e: Expression) {
                                          e.kind = ExpressionKind.And &&
                                          e.and = some (bo: BinaryOperation) {
                                            bo.lhs_operand = some (e: Expression) {
                                              e.kind = ExpressionKind.Equal &&
                                              e.equal = some (bo: BinaryOperation) {
                                                bo.lhs_operand = some (e: Expression) {
                                                  e.kind = ExpressionKind.Id &&
                                                  e.identifier = "currentDir"
                                                } &&
                                                bo.rhs_operand = some (e: Expression) {
                                                  e.kind = ExpressionKind.Id &&
                                                  e.identifier = "West"
                                                }
                                              }
                                            } &&
                                            bo.rhs_operand = some (e: Expression) {
                                              e.kind = ExpressionKind.Equal &&
                                              e.equal = some (bo: BinaryOperation) {
                                                bo.lhs_operand = some (e: Expression) {
                                                  e.kind = ExpressionKind.RecordProjection &&
                                                  e.record_projection = some (rp: RecordProjection) {
                                                    rp.record_reference = some (e: Expression) {
                                                      e.kind = ExpressionKind.Id &&
                                                      e.identifier = "waypoint"
                                                    } &&
                                                    rp.field_id = "y"
                                                  }
                                                } &&
                                                bo.rhs_operand = some (e: Expression) {
                                                  e.kind = ExpressionKind.RecordProjection &&
                                                  e.record_projection = some (rp: RecordProjection) {
                                                    rp.record_reference = some (e: Expression) {
                                                      e.kind = ExpressionKind.Id &&
                                                      e.identifier = "currentPos"
                                                    } &&
                                                    rp.field_id = "y"
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        } &&
                                        bo.rhs_operand = some (e: Expression) {
                                          e.kind = ExpressionKind.LessThan &&
                                          e.less_than = some (bo: BinaryOperation) {
                                            bo.lhs_operand = some (e: Expression) {
                                              e.kind = ExpressionKind.RecordProjection &&
                                              e.record_projection = some (rp: RecordProjection) {
                                                rp.record_reference = some (e: Expression) {
                                                  e.kind = ExpressionKind.Id &&
                                                  e.identifier = "waypoint"
                                                } &&
                                                rp.field_id = "x"
                                              }
                                            } &&
                                            bo.rhs_operand = some (e: Expression) {
                                              e.kind = ExpressionKind.RecordProjection &&
                                              e.record_projection = some (rp: RecordProjection) {
                                                rp.record_reference = some (e: Expression) {
                                                  e.kind = ExpressionKind.Id &&
                                                  e.identifier = "currentPos"
                                                } &&
                                                rp.field_id = "x"
                                              }
                                            }
                                          }
                                        }
                                      }
                                    } &&
                                    ite.thenBranch = some (e: Expression) {
                                      e.kind = ExpressionKind.Id &&
                                      e.identifier = "Turn_Right"
                                    } &&
                                    ite.elseBranch = some (e: Expression) {
                                      e.kind = ExpressionKind.ConditionalExpr &&
                                      e.conditional_expr = some (ite: IfThenElse) {
                                        ite.condition = some (e: Expression) {
                                          e.kind = ExpressionKind.And &&
                                          e.and = some (bo: BinaryOperation) {
                                            bo.lhs_operand = some (e: Expression) {
                                              e.kind = ExpressionKind.And &&
                                              e.and = some (bo: BinaryOperation) {
                                                bo.lhs_operand = some (e: Expression) {
                                                  e.kind = ExpressionKind.Equal &&
                                                  e.equal = some (bo: BinaryOperation) {
                                                    bo.lhs_operand = some (e: Expression) {
                                                      e.kind = ExpressionKind.Id &&
                                                      e.identifier = "currentDir"
                                                    } &&
                                                    bo.rhs_operand = some (e: Expression) {
                                                      e.kind = ExpressionKind.Id &&
                                                      e.identifier = "North"
                                                    }
                                                  }
                                                } &&
                                                bo.rhs_operand = some (e: Expression) {
                                                  e.kind = ExpressionKind.Equal &&
                                                  e.equal = some (bo: BinaryOperation) {
                                                    bo.lhs_operand = some (e: Expression) {
                                                      e.kind = ExpressionKind.RecordProjection &&
                                                      e.record_projection = some (rp: RecordProjection) {
                                                        rp.record_reference = some (e: Expression) {
                                                          e.kind = ExpressionKind.Id &&
                                                          e.identifier = "waypoint"
                                                        } &&
                                                        rp.field_id = "y"
                                                      }
                                                    } &&
                                                    bo.rhs_operand = some (e: Expression) {
                                                      e.kind = ExpressionKind.RecordProjection &&
                                                      e.record_projection = some (rp: RecordProjection) {
                                                        rp.record_reference = some (e: Expression) {
                                                          e.kind = ExpressionKind.Id &&
                                                          e.identifier = "currentPos"
                                                        } &&
                                                        rp.field_id = "y"
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            } &&
                                            bo.rhs_operand = some (e: Expression) {
                                              e.kind = ExpressionKind.GreaterThan &&
                                              e.greater_than = some (bo: BinaryOperation) {
                                                bo.lhs_operand = some (e: Expression) {
                                                  e.kind = ExpressionKind.RecordProjection &&
                                                  e.record_projection = some (rp: RecordProjection) {
                                                    rp.record_reference = some (e: Expression) {
                                                      e.kind = ExpressionKind.Id &&
                                                      e.identifier = "waypoint"
                                                    } &&
                                                    rp.field_id = "x"
                                                  }
                                                } &&
                                                bo.rhs_operand = some (e: Expression) {
                                                  e.kind = ExpressionKind.RecordProjection &&
                                                  e.record_projection = some (rp: RecordProjection) {
                                                    rp.record_reference = some (e: Expression) {
                                                      e.kind = ExpressionKind.Id &&
                                                      e.identifier = "currentPos"
                                                    } &&
                                                    rp.field_id = "x"
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        } &&
                                        ite.thenBranch = some (e: Expression) {
                                          e.kind = ExpressionKind.Id &&
                                          e.identifier = "Turn_Left"
                                        } &&
                                        ite.elseBranch = some (e: Expression) {
                                          e.kind = ExpressionKind.ConditionalExpr &&
                                          e.conditional_expr = some (ite: IfThenElse) {
                                            ite.condition = some (e: Expression) {
                                              e.kind = ExpressionKind.And &&
                                              e.and = some (bo: BinaryOperation) {
                                                bo.lhs_operand = some (e: Expression) {
                                                  e.kind = ExpressionKind.And &&
                                                  e.and = some (bo: BinaryOperation) {
                                                    bo.lhs_operand = some (e: Expression) {
                                                      e.kind = ExpressionKind.Equal &&
                                                      e.equal = some (bo: BinaryOperation) {
                                                        bo.lhs_operand = some (e: Expression) {
                                                          e.kind = ExpressionKind.Id &&
                                                          e.identifier = "currentDir"
                                                        } &&
                                                        bo.rhs_operand = some (e: Expression) {
                                                          e.kind = ExpressionKind.Id &&
                                                          e.identifier = "South"
                                                        }
                                                      }
                                                    } &&
                                                    bo.rhs_operand = some (e: Expression) {
                                                      e.kind = ExpressionKind.Equal &&
                                                      e.equal = some (bo: BinaryOperation) {
                                                        bo.lhs_operand = some (e: Expression) {
                                                          e.kind = ExpressionKind.RecordProjection &&
                                                          e.record_projection = some (rp: RecordProjection) {
                                                            rp.record_reference = some (e: Expression) {
                                                              e.kind = ExpressionKind.Id &&
                                                              e.identifier = "waypoint"
                                                            } &&
                                                            rp.field_id = "y"
                                                          }
                                                        } &&
                                                        bo.rhs_operand = some (e: Expression) {
                                                          e.kind = ExpressionKind.RecordProjection &&
                                                          e.record_projection = some (rp: RecordProjection) {
                                                            rp.record_reference = some (e: Expression) {
                                                              e.kind = ExpressionKind.Id &&
                                                              e.identifier = "currentPos"
                                                            } &&
                                                            rp.field_id = "y"
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                } &&
                                                bo.rhs_operand = some (e: Expression) {
                                                  e.kind = ExpressionKind.GreaterThan &&
                                                  e.greater_than = some (bo: BinaryOperation) {
                                                    bo.lhs_operand = some (e: Expression) {
                                                      e.kind = ExpressionKind.RecordProjection &&
                                                      e.record_projection = some (rp: RecordProjection) {
                                                        rp.record_reference = some (e: Expression) {
                                                          e.kind = ExpressionKind.Id &&
                                                          e.identifier = "waypoint"
                                                        } &&
                                                        rp.field_id = "x"
                                                      }
                                                    } &&
                                                    bo.rhs_operand = some (e: Expression) {
                                                      e.kind = ExpressionKind.RecordProjection &&
                                                      e.record_projection = some (rp: RecordProjection) {
                                                        rp.record_reference = some (e: Expression) {
                                                          e.kind = ExpressionKind.Id &&
                                                          e.identifier = "currentPos"
                                                        } &&
                                                        rp.field_id = "x"
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            } &&
                                            ite.thenBranch = some (e: Expression) {
                                              e.kind = ExpressionKind.Id &&
                                              e.identifier = "Turn_Right"
                                            } &&
                                            ite.elseBranch = some (e: Expression) {
                                              e.kind = ExpressionKind.ConditionalExpr &&
                                              e.conditional_expr = some (ite: IfThenElse) {
                                                ite.condition = some (e: Expression) {
                                                  e.kind = ExpressionKind.And &&
                                                  e.and = some (bo: BinaryOperation) {
                                                    bo.lhs_operand = some (e: Expression) {
                                                      e.kind = ExpressionKind.And &&
                                                      e.and = some (bo: BinaryOperation) {
                                                        bo.lhs_operand = some (e: Expression) {
                                                          e.kind = ExpressionKind.Equal &&
                                                          e.equal = some (bo: BinaryOperation) {
                                                            bo.lhs_operand = some (e: Expression) {
                                                              e.kind = ExpressionKind.Id &&
                                                              e.identifier = "currentDir"
                                                            } &&
                                                            bo.rhs_operand = some (e: Expression) {
                                                              e.kind = ExpressionKind.Id &&
                                                              e.identifier = "East"
                                                            }
                                                          }
                                                        } &&
                                                        bo.rhs_operand = some (e: Expression) {
                                                          e.kind = ExpressionKind.Equal &&
                                                          e.equal = some (bo: BinaryOperation) {
                                                            bo.lhs_operand = some (e: Expression) {
                                                              e.kind = ExpressionKind.RecordProjection &&
                                                              e.record_projection = some (rp: RecordProjection) {
                                                                rp.record_reference = some (e: Expression) {
                                                                  e.kind = ExpressionKind.Id &&
                                                                  e.identifier = "waypoint"
                                                                } &&
                                                                rp.field_id = "y"
                                                              }
                                                            } &&
                                                            bo.rhs_operand = some (e: Expression) {
                                                              e.kind = ExpressionKind.RecordProjection &&
                                                              e.record_projection = some (rp: RecordProjection) {
                                                                rp.record_reference = some (e: Expression) {
                                                                  e.kind = ExpressionKind.Id &&
                                                                  e.identifier = "currentPos"
                                                                } &&
                                                                rp.field_id = "y"
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    } &&
                                                    bo.rhs_operand = some (e: Expression) {
                                                      e.kind = ExpressionKind.GreaterThan &&
                                                      e.greater_than = some (bo: BinaryOperation) {
                                                        bo.lhs_operand = some (e: Expression) {
                                                          e.kind = ExpressionKind.RecordProjection &&
                                                          e.record_projection = some (rp: RecordProjection) {
                                                            rp.record_reference = some (e: Expression) {
                                                              e.kind = ExpressionKind.Id &&
                                                              e.identifier = "waypoint"
                                                            } &&
                                                            rp.field_id = "x"
                                                          }
                                                        } &&
                                                        bo.rhs_operand = some (e: Expression) {
                                                          e.kind = ExpressionKind.RecordProjection &&
                                                          e.record_projection = some (rp: RecordProjection) {
                                                            rp.record_reference = some (e: Expression) {
                                                              e.kind = ExpressionKind.Id &&
                                                              e.identifier = "currentPos"
                                                            } &&
                                                            rp.field_id = "x"
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                } &&
                                                ite.thenBranch = some (e: Expression) {
                                                  e.kind = ExpressionKind.Id &&
                                                  e.identifier = "Turn_Left"
                                                } &&
                                                ite.elseBranch = some (e: Expression) {
                                                  e.kind = ExpressionKind.ConditionalExpr &&
                                                  e.conditional_expr = some (ite: IfThenElse) {
                                                    ite.condition = some (e: Expression) {
                                                      e.kind = ExpressionKind.And &&
                                                      e.and = some (bo: BinaryOperation) {
                                                        bo.lhs_operand = some (e: Expression) {
                                                          e.kind = ExpressionKind.And &&
                                                          e.and = some (bo: BinaryOperation) {
                                                            bo.lhs_operand = some (e: Expression) {
                                                              e.kind = ExpressionKind.Equal &&
                                                              e.equal = some (bo: BinaryOperation) {
                                                                bo.lhs_operand = some (e: Expression) {
                                                                  e.kind = ExpressionKind.Id &&
                                                                  e.identifier = "currentDir"
                                                                } &&
                                                                bo.rhs_operand = some (e: Expression) {
                                                                  e.kind = ExpressionKind.Id &&
                                                                  e.identifier = "South"
                                                                }
                                                              }
                                                            } &&
                                                            bo.rhs_operand = some (e: Expression) {
                                                              e.kind = ExpressionKind.Equal &&
                                                              e.equal = some (bo: BinaryOperation) {
                                                                bo.lhs_operand = some (e: Expression) {
                                                                  e.kind = ExpressionKind.RecordProjection &&
                                                                  e.record_projection = some (rp: RecordProjection) {
                                                                    rp.record_reference = some (e: Expression) {
                                                                    e.kind = ExpressionKind.Id &&
                                                                    e.identifier = "waypoint"
                                                                    } &&
                                                                    rp.field_id = "x"
                                                                  }
                                                                } &&
                                                                bo.rhs_operand = some (e: Expression) {
                                                                  e.kind = ExpressionKind.RecordProjection &&
                                                                  e.record_projection = some (rp: RecordProjection) {
                                                                    rp.record_reference = some (e: Expression) {
                                                                    e.kind = ExpressionKind.Id &&
                                                                    e.identifier = "currentPos"
                                                                    } &&
                                                                    rp.field_id = "x"
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        } &&
                                                        bo.rhs_operand = some (e: Expression) {
                                                          e.kind = ExpressionKind.LessThan &&
                                                          e.less_than = some (bo: BinaryOperation) {
                                                            bo.lhs_operand = some (e: Expression) {
                                                              e.kind = ExpressionKind.RecordProjection &&
                                                              e.record_projection = some (rp: RecordProjection) {
                                                                rp.record_reference = some (e: Expression) {
                                                                  e.kind = ExpressionKind.Id &&
                                                                  e.identifier = "waypoint"
                                                                } &&
                                                                rp.field_id = "y"
                                                              }
                                                            } &&
                                                            bo.rhs_operand = some (e: Expression) {
                                                              e.kind = ExpressionKind.RecordProjection &&
                                                              e.record_projection = some (rp: RecordProjection) {
                                                                rp.record_reference = some (e: Expression) {
                                                                  e.kind = ExpressionKind.Id &&
                                                                  e.identifier = "currentPos"
                                                                } &&
                                                                rp.field_id = "y"
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    } &&
                                                    ite.thenBranch = some (e: Expression) {
                                                      e.kind = ExpressionKind.Id &&
                                                      e.identifier = "Turn_Right"
                                                    } &&
                                                    ite.elseBranch = some (e: Expression) {
                                                      e.kind = ExpressionKind.ConditionalExpr &&
                                                      e.conditional_expr = some (ite: IfThenElse) {
                                                        ite.condition = some (e: Expression) {
                                                          e.kind = ExpressionKind.And &&
                                                          e.and = some (bo: BinaryOperation) {
                                                            bo.lhs_operand = some (e: Expression) {
                                                              e.kind = ExpressionKind.And &&
                                                              e.and = some (bo: BinaryOperation) {
                                                                bo.lhs_operand = some (e: Expression) {
                                                                  e.kind = ExpressionKind.Equal &&
                                                                  e.equal = some (bo: BinaryOperation) {
                                                                    bo.lhs_operand = some (e: Expression) {
                                                                    e.kind = ExpressionKind.Id &&
                                                                    e.identifier = "currentDir"
                                                                    } &&
                                                                    bo.rhs_operand = some (e: Expression) {
                                                                    e.kind = ExpressionKind.Id &&
                                                                    e.identifier = "West"
                                                                    }
                                                                  }
                                                                } &&
                                                                bo.rhs_operand = some (e: Expression) {
                                                                  e.kind = ExpressionKind.Equal &&
                                                                  e.equal = some (bo: BinaryOperation) {
                                                                    bo.lhs_operand = some (e: Expression) {
                                                                    e.kind = ExpressionKind.RecordProjection &&
                                                                    e.record_projection = some (rp: RecordProjection) {
                                                                    rp.record_reference = some (e: Expression) {
                                                                    e.kind = ExpressionKind.Id &&
                                                                    e.identifier = "waypoint"
                                                                    } &&
                                                                    rp.field_id = "x"
                                                                    }
                                                                    } &&
                                                                    bo.rhs_operand = some (e: Expression) {
                                                                    e.kind = ExpressionKind.RecordProjection &&
                                                                    e.record_projection = some (rp: RecordProjection) {
                                                                    rp.record_reference = some (e: Expression) {
                                                                    e.kind = ExpressionKind.Id &&
                                                                    e.identifier = "currentPos"
                                                                    } &&
                                                                    rp.field_id = "x"
                                                                    }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            } &&
                                                            bo.rhs_operand = some (e: Expression) {
                                                              e.kind = ExpressionKind.LessThan &&
                                                              e.less_than = some (bo: BinaryOperation) {
                                                                bo.lhs_operand = some (e: Expression) {
                                                                  e.kind = ExpressionKind.RecordProjection &&
                                                                  e.record_projection = some (rp: RecordProjection) {
                                                                    rp.record_reference = some (e: Expression) {
                                                                    e.kind = ExpressionKind.Id &&
                                                                    e.identifier = "waypoint"
                                                                    } &&
                                                                    rp.field_id = "y"
                                                                  }
                                                                } &&
                                                                bo.rhs_operand = some (e: Expression) {
                                                                  e.kind = ExpressionKind.RecordProjection &&
                                                                  e.record_projection = some (rp: RecordProjection) {
                                                                    rp.record_reference = some (e: Expression) {
                                                                    e.kind = ExpressionKind.Id &&
                                                                    e.identifier = "currentPos"
                                                                    } &&
                                                                    rp.field_id = "y"
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        } &&
                                                        ite.thenBranch = some (e: Expression) {
                                                          e.kind = ExpressionKind.Id &&
                                                          e.identifier = "Turn_Right"
                                                        } &&
                                                        ite.elseBranch = some (e: Expression) {
                                                          e.kind = ExpressionKind.ConditionalExpr &&
                                                          e.conditional_expr = some (ite: IfThenElse) {
                                                            ite.condition = some (e: Expression) {
                                                              e.kind = ExpressionKind.And &&
                                                              e.and = some (bo: BinaryOperation) {
                                                                bo.lhs_operand = some (e: Expression) {
                                                                  e.kind = ExpressionKind.And &&
                                                                  e.and = some (bo: BinaryOperation) {
                                                                    bo.lhs_operand = some (e: Expression) {
                                                                    e.kind = ExpressionKind.Equal &&
                                                                    e.equal = some (bo: BinaryOperation) {
                                                                    bo.lhs_operand = some (e: Expression) {
                                                                    e.kind = ExpressionKind.Id &&
                                                                    e.identifier = "currentDir"
                                                                    } &&
                                                                    bo.rhs_operand = some (e: Expression) {
                                                                    e.kind = ExpressionKind.Id &&
                                                                    e.identifier = "East"
                                                                    }
                                                                    }
                                                                    } &&
                                                                    bo.rhs_operand = some (e: Expression) {
                                                                    e.kind = ExpressionKind.Equal &&
                                                                    e.equal = some (bo: BinaryOperation) {
                                                                    bo.lhs_operand = some (e: Expression) {
                                                                    e.kind = ExpressionKind.RecordProjection &&
                                                                    e.record_projection = some (rp: RecordProjection) {
                                                                    rp.record_reference = some (e: Expression) {
                                                                    e.kind = ExpressionKind.Id &&
                                                                    e.identifier = "waypoint"
                                                                    } &&
                                                                    rp.field_id = "x"
                                                                    }
                                                                    } &&
                                                                    bo.rhs_operand = some (e: Expression) {
                                                                    e.kind = ExpressionKind.RecordProjection &&
                                                                    e.record_projection = some (rp: RecordProjection) {
                                                                    rp.record_reference = some (e: Expression) {
                                                                    e.kind = ExpressionKind.Id &&
                                                                    e.identifier = "currentPos"
                                                                    } &&
                                                                    rp.field_id = "x"
                                                                    }
                                                                    }
                                                                    }
                                                                    }
                                                                  }
                                                                } &&
                                                                bo.rhs_operand = some (e: Expression) {
                                                                  e.kind = ExpressionKind.LessThan &&
                                                                  e.less_than = some (bo: BinaryOperation) {
                                                                    bo.lhs_operand = some (e: Expression) {
                                                                    e.kind = ExpressionKind.RecordProjection &&
                                                                    e.record_projection = some (rp: RecordProjection) {
                                                                    rp.record_reference = some (e: Expression) {
                                                                    e.kind = ExpressionKind.Id &&
                                                                    e.identifier = "waypoint"
                                                                    } &&
                                                                    rp.field_id = "y"
                                                                    }
                                                                    } &&
                                                                    bo.rhs_operand = some (e: Expression) {
                                                                    e.kind = ExpressionKind.RecordProjection &&
                                                                    e.record_projection = some (rp: RecordProjection) {
                                                                    rp.record_reference = some (e: Expression) {
                                                                    e.kind = ExpressionKind.Id &&
                                                                    e.identifier = "currentPos"
                                                                    } &&
                                                                    rp.field_id = "y"
                                                                    }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            } &&
                                                            ite.thenBranch = some (e: Expression) {
                                                              e.kind = ExpressionKind.Id &&
                                                              e.identifier = "Turn_Left"
                                                            } &&
                                                            ite.elseBranch = some (e: Expression) {
                                                              e.kind = ExpressionKind.ConditionalExpr &&
                                                              e.conditional_expr = some (ite: IfThenElse) {
                                                                ite.condition = some (e: Expression) {
                                                                  e.kind = ExpressionKind.And &&
                                                                  e.and = some (bo: BinaryOperation) {
                                                                    bo.lhs_operand = some (e: Expression) {
                                                                    e.kind = ExpressionKind.And &&
                                                                    e.and = some (bo: BinaryOperation) {
                                                                    bo.lhs_operand = some (e: Expression) {
                                                                    e.kind = ExpressionKind.Equal &&
                                                                    e.equal = some (bo: BinaryOperation) {
                                                                    bo.lhs_operand = some (e: Expression) {
                                                                    e.kind = ExpressionKind.Id &&
                                                                    e.identifier = "currentDir"
                                                                    } &&
                                                                    bo.rhs_operand = some (e: Expression) {
                                                                    e.kind = ExpressionKind.Id &&
                                                                    e.identifier = "North"
                                                                    }
                                                                    }
                                                                    } &&
                                                                    bo.rhs_operand = some (e: Expression) {
                                                                    e.kind = ExpressionKind.Equal &&
                                                                    e.equal = some (bo: BinaryOperation) {
                                                                    bo.lhs_operand = some (e: Expression) {
                                                                    e.kind = ExpressionKind.RecordProjection &&
                                                                    e.record_projection = some (rp: RecordProjection) {
                                                                    rp.record_reference = some (e: Expression) {
                                                                    e.kind = ExpressionKind.Id &&
                                                                    e.identifier = "waypoint"
                                                                    } &&
                                                                    rp.field_id = "x"
                                                                    }
                                                                    } &&
                                                                    bo.rhs_operand = some (e: Expression) {
                                                                    e.kind = ExpressionKind.RecordProjection &&
                                                                    e.record_projection = some (rp: RecordProjection) {
                                                                    rp.record_reference = some (e: Expression) {
                                                                    e.kind = ExpressionKind.Id &&
                                                                    e.identifier = "currentPos"
                                                                    } &&
                                                                    rp.field_id = "x"
                                                                    }
                                                                    }
                                                                    }
                                                                    }
                                                                    }
                                                                    } &&
                                                                    bo.rhs_operand = some (e: Expression) {
                                                                    e.kind = ExpressionKind.GreaterThan &&
                                                                    e.greater_than = some (bo: BinaryOperation) {
                                                                    bo.lhs_operand = some (e: Expression) {
                                                                    e.kind = ExpressionKind.RecordProjection &&
                                                                    e.record_projection = some (rp: RecordProjection) {
                                                                    rp.record_reference = some (e: Expression) {
                                                                    e.kind = ExpressionKind.Id &&
                                                                    e.identifier = "waypoint"
                                                                    } &&
                                                                    rp.field_id = "y"
                                                                    }
                                                                    } &&
                                                                    bo.rhs_operand = some (e: Expression) {
                                                                    e.kind = ExpressionKind.RecordProjection &&
                                                                    e.record_projection = some (rp: RecordProjection) {
                                                                    rp.record_reference = some (e: Expression) {
                                                                    e.kind = ExpressionKind.Id &&
                                                                    e.identifier = "currentPos"
                                                                    } &&
                                                                    rp.field_id = "y"
                                                                    }
                                                                    }
                                                                    }
                                                                    }
                                                                  }
                                                                } &&
                                                                ite.thenBranch = some (e: Expression) {
                                                                  e.kind = ExpressionKind.Id &&
                                                                  e.identifier = "Turn_Right"
                                                                } &&
                                                                ite.elseBranch = some (e: Expression) {
                                                                  e.kind = ExpressionKind.ConditionalExpr &&
                                                                  e.conditional_expr = some (ite: IfThenElse) {
                                                                    ite.condition = some (e: Expression) {
                                                                    e.kind = ExpressionKind.And &&
                                                                    e.and = some (bo: BinaryOperation) {
                                                                    bo.lhs_operand = some (e: Expression) {
                                                                    e.kind = ExpressionKind.And &&
                                                                    e.and = some (bo: BinaryOperation) {
                                                                    bo.lhs_operand = some (e: Expression) {
                                                                    e.kind = ExpressionKind.Equal &&
                                                                    e.equal = some (bo: BinaryOperation) {
                                                                    bo.lhs_operand = some (e: Expression) {
                                                                    e.kind = ExpressionKind.Id &&
                                                                    e.identifier = "currentDir"
                                                                    } &&
                                                                    bo.rhs_operand = some (e: Expression) {
                                                                    e.kind = ExpressionKind.Id &&
                                                                    e.identifier = "West"
                                                                    }
                                                                    }
                                                                    } &&
                                                                    bo.rhs_operand = some (e: Expression) {
                                                                    e.kind = ExpressionKind.Equal &&
                                                                    e.equal = some (bo: BinaryOperation) {
                                                                    bo.lhs_operand = some (e: Expression) {
                                                                    e.kind = ExpressionKind.RecordProjection &&
                                                                    e.record_projection = some (rp: RecordProjection) {
                                                                    rp.record_reference = some (e: Expression) {
                                                                    e.kind = ExpressionKind.Id &&
                                                                    e.identifier = "waypoint"
                                                                    } &&
                                                                    rp.field_id = "x"
                                                                    }
                                                                    } &&
                                                                    bo.rhs_operand = some (e: Expression) {
                                                                    e.kind = ExpressionKind.RecordProjection &&
                                                                    e.record_projection = some (rp: RecordProjection) {
                                                                    rp.record_reference = some (e: Expression) {
                                                                    e.kind = ExpressionKind.Id &&
                                                                    e.identifier = "currentPos"
                                                                    } &&
                                                                    rp.field_id = "x"
                                                                    }
                                                                    }
                                                                    }
                                                                    }
                                                                    }
                                                                    } &&
                                                                    bo.rhs_operand = some (e: Expression) {
                                                                    e.kind = ExpressionKind.GreaterThan &&
                                                                    e.greater_than = some (bo: BinaryOperation) {
                                                                    bo.lhs_operand = some (e: Expression) {
                                                                    e.kind = ExpressionKind.RecordProjection &&
                                                                    e.record_projection = some (rp: RecordProjection) {
                                                                    rp.record_reference = some (e: Expression) {
                                                                    e.kind = ExpressionKind.Id &&
                                                                    e.identifier = "waypoint"
                                                                    } &&
                                                                    rp.field_id = "y"
                                                                    }
                                                                    } &&
                                                                    bo.rhs_operand = some (e: Expression) {
                                                                    e.kind = ExpressionKind.RecordProjection &&
                                                                    e.record_projection = some (rp: RecordProjection) {
                                                                    rp.record_reference = some (e: Expression) {
                                                                    e.kind = ExpressionKind.Id &&
                                                                    e.identifier = "currentPos"
                                                                    } &&
                                                                    rp.field_id = "y"
                                                                    }
                                                                    }
                                                                    }
                                                                    }
                                                                    }
                                                                    } &&
                                                                    ite.thenBranch = some (e: Expression) {
                                                                    e.kind = ExpressionKind.Id &&
                                                                    e.identifier = "Turn_Left"
                                                                    } &&
                                                                    ite.elseBranch = some (e: Expression) {
                                                                    e.kind = ExpressionKind.ConditionalExpr &&
                                                                    e.conditional_expr = some (ite: IfThenElse) {
                                                                    ite.condition = some (e: Expression) {
                                                                    e.kind = ExpressionKind.And &&
                                                                    e.and = some (bo: BinaryOperation) {
                                                                    bo.lhs_operand = some (e: Expression) {
                                                                    e.kind = ExpressionKind.And &&
                                                                    e.and = some (bo: BinaryOperation) {
                                                                    bo.lhs_operand = some (e: Expression) {
                                                                    e.kind = ExpressionKind.Equal &&
                                                                    e.equal = some (bo: BinaryOperation) {
                                                                    bo.lhs_operand = some (e: Expression) {
                                                                    e.kind = ExpressionKind.Id &&
                                                                    e.identifier = "currentDir"
                                                                    } &&
                                                                    bo.rhs_operand = some (e: Expression) {
                                                                    e.kind = ExpressionKind.Id &&
                                                                    e.identifier = "East"
                                                                    }
                                                                    }
                                                                    } &&
                                                                    bo.rhs_operand = some (e: Expression) {
                                                                    e.kind = ExpressionKind.Equal &&
                                                                    e.equal = some (bo: BinaryOperation) {
                                                                    bo.lhs_operand = some (e: Expression) {
                                                                    e.kind = ExpressionKind.RecordProjection &&
                                                                    e.record_projection = some (rp: RecordProjection) {
                                                                    rp.record_reference = some (e: Expression) {
                                                                    e.kind = ExpressionKind.Id &&
                                                                    e.identifier = "waypoint"
                                                                    } &&
                                                                    rp.field_id = "x"
                                                                    }
                                                                    } &&
                                                                    bo.rhs_operand = some (e: Expression) {
                                                                    e.kind = ExpressionKind.RecordProjection &&
                                                                    e.record_projection = some (rp: RecordProjection) {
                                                                    rp.record_reference = some (e: Expression) {
                                                                    e.kind = ExpressionKind.Id &&
                                                                    e.identifier = "currentPos"
                                                                    } &&
                                                                    rp.field_id = "x"
                                                                    }
                                                                    }
                                                                    }
                                                                    }
                                                                    }
                                                                    } &&
                                                                    bo.rhs_operand = some (e: Expression) {
                                                                    e.kind = ExpressionKind.GreaterThan &&
                                                                    e.greater_than = some (bo: BinaryOperation) {
                                                                    bo.lhs_operand = some (e: Expression) {
                                                                    e.kind = ExpressionKind.RecordProjection &&
                                                                    e.record_projection = some (rp: RecordProjection) {
                                                                    rp.record_reference = some (e: Expression) {
                                                                    e.kind = ExpressionKind.Id &&
                                                                    e.identifier = "waypoint"
                                                                    } &&
                                                                    rp.field_id = "y"
                                                                    }
                                                                    } &&
                                                                    bo.rhs_operand = some (e: Expression) {
                                                                    e.kind = ExpressionKind.RecordProjection &&
                                                                    e.record_projection = some (rp: RecordProjection) {
                                                                    rp.record_reference = some (e: Expression) {
                                                                    e.kind = ExpressionKind.Id &&
                                                                    e.identifier = "currentPos"
                                                                    } &&
                                                                    rp.field_id = "y"
                                                                    }
                                                                    }
                                                                    }
                                                                    }
                                                                    }
                                                                    } &&
                                                                    ite.thenBranch = some (e: Expression) {
                                                                    e.kind = ExpressionKind.Id &&
                                                                    e.identifier = "Turn_Right"
                                                                    } &&
                                                                    ite.elseBranch = some (e: Expression) {
                                                                    e.kind = ExpressionKind.ConditionalExpr &&
                                                                    e.conditional_expr = some (ite: IfThenElse) {
                                                                    ite.condition = some (e: Expression) {
                                                                    e.kind = ExpressionKind.And &&
                                                                    e.and = some (bo: BinaryOperation) {
                                                                    bo.lhs_operand = some (e: Expression) {
                                                                    e.kind = ExpressionKind.NotEqual &&
                                                                    e.not_equal = some (bo: BinaryOperation) {
                                                                    bo.lhs_operand = some (e: Expression) {
                                                                    e.kind = ExpressionKind.RecordProjection &&
                                                                    e.record_projection = some (rp: RecordProjection) {
                                                                    rp.record_reference = some (e: Expression) {
                                                                    e.kind = ExpressionKind.Id &&
                                                                    e.identifier = "waypoint"
                                                                    } &&
                                                                    rp.field_id = "x"
                                                                    }
                                                                    } &&
                                                                    bo.rhs_operand = some (e: Expression) {
                                                                    e.kind = ExpressionKind.RecordProjection &&
                                                                    e.record_projection = some (rp: RecordProjection) {
                                                                    rp.record_reference = some (e: Expression) {
                                                                    e.kind = ExpressionKind.Id &&
                                                                    e.identifier = "currentPos"
                                                                    } &&
                                                                    rp.field_id = "x"
                                                                    }
                                                                    }
                                                                    }
                                                                    } &&
                                                                    bo.rhs_operand = some (e: Expression) {
                                                                    e.kind = ExpressionKind.NotEqual &&
                                                                    e.not_equal = some (bo: BinaryOperation) {
                                                                    bo.lhs_operand = some (e: Expression) {
                                                                    e.kind = ExpressionKind.RecordProjection &&
                                                                    e.record_projection = some (rp: RecordProjection) {
                                                                    rp.record_reference = some (e: Expression) {
                                                                    e.kind = ExpressionKind.Id &&
                                                                    e.identifier = "waypoint"
                                                                    } &&
                                                                    rp.field_id = "y"
                                                                    }
                                                                    } &&
                                                                    bo.rhs_operand = some (e: Expression) {
                                                                    e.kind = ExpressionKind.RecordProjection &&
                                                                    e.record_projection = some (rp: RecordProjection) {
                                                                    rp.record_reference = some (e: Expression) {
                                                                    e.kind = ExpressionKind.Id &&
                                                                    e.identifier = "currentPos"
                                                                    } &&
                                                                    rp.field_id = "y"
                                                                    }
                                                                    }
                                                                    }
                                                                    }
                                                                    }
                                                                    } &&
                                                                    ite.thenBranch = some (e: Expression) {
                                                                    e.kind = ExpressionKind.Id &&
                                                                    e.identifier = "Turn_Right"
                                                                    } &&
                                                                    ite.elseBranch = some (e: Expression) {
                                                                    e.kind = ExpressionKind.Id &&
                                                                    e.identifier = "Stop"
                                                                    }
                                                                    }
                                                                    }
                                                                    }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  } &&
  csp.guarantees.element[1] = some (ci: ContractItem) {
    ci.name = mk_some<Identifier>("dest_reached_Def") &&
    ci.expression = some (e: Expression) {
      e.kind = ExpressionKind.Equal &&
      e.equal = some (bo: BinaryOperation) {
        bo.lhs_operand = some (e: Expression) {
          e.kind = ExpressionKind.Id &&
          e.identifier = "dest_reached"
        } &&
        bo.rhs_operand = some (e: Expression) {
          e.kind = ExpressionKind.And &&
          e.and = some (bo: BinaryOperation) {
            bo.lhs_operand = some (e: Expression) {
              e.kind = ExpressionKind.Equal &&
              e.equal = some (bo: BinaryOperation) {
                bo.lhs_operand = some (e: Expression) {
                  e.kind = ExpressionKind.RecordProjection &&
                  e.record_projection = some (rp: RecordProjection) {
                    rp.record_reference = some (e: Expression) {
                      e.kind = ExpressionKind.Id &&
                      e.identifier = "currentPos"
                    } &&
                    rp.field_id = "x"
                  }
                } &&
                bo.rhs_operand = some (e: Expression) {
                  e.kind = ExpressionKind.RecordProjection &&
                  e.record_projection = some (rp: RecordProjection) {
                    rp.record_reference = some (e: Expression) {
                      e.kind = ExpressionKind.Id &&
                      e.identifier = "waypoint"
                    } &&
                    rp.field_id = "x"
                  }
                }
              }
            } &&
            bo.rhs_operand = some (e: Expression) {
              e.kind = ExpressionKind.Equal &&
              e.equal = some (bo: BinaryOperation) {
                bo.lhs_operand = some (e: Expression) {
                  e.kind = ExpressionKind.RecordProjection &&
                  e.record_projection = some (rp: RecordProjection) {
                    rp.record_reference = some (e: Expression) {
                      e.kind = ExpressionKind.Id &&
                      e.identifier = "currentPos"
                    } &&
                    rp.field_id = "y"
                  }
                } &&
                bo.rhs_operand = some (e: Expression) {
                  e.kind = ExpressionKind.RecordProjection &&
                  e.record_projection = some (rp: RecordProjection) {
                    rp.record_reference = some (e: Expression) {
                      e.kind = ExpressionKind.Id &&
                      e.identifier = "waypoint"
                    } &&
                    rp.field_id = "y"
                  }
                }
              }
            }
          }
        }
      }
    }
  } &&
  csp.modes.length = 0 &&
  csp.imports.length = 0})} &&
m.component_types.element[9] = some (ct: ComponentType) {
  ct.name = "PositionEstimator" &&
  ct.ports.length = 4 &&
  ct.ports.element[0] = some(p: Port) {
    p.name = "voted_pos" &&
    p.mode = PortMode.In &&
    p.ptype = mk_some<DataType>(some (dt: DataType) {
      dt.kind = DataTypeKind.UserDefined &&
      dt.user_defined_type = m.type_declarations.element[3]
  })} &&
ct.ports.element[1] = some(p: Port) {
  p.name = "voted_dir" &&
  p.mode = PortMode.In &&
  p.ptype = mk_some<DataType>(some (dt: DataType) {
    dt.kind = DataTypeKind.UserDefined &&
    dt.user_defined_type = m.type_declarations.element[1]})} &&
ct.ports.element[2] = some(p: Port) {
  p.name = "currentPos" &&
  p.mode = PortMode.Out &&
  p.ptype = mk_some<DataType>(some (dt: DataType) {
    dt.kind = DataTypeKind.UserDefined &&
    dt.user_defined_type = m.type_declarations.element[3]})} &&
ct.ports.element[3] = some(p: Port) {
  p.name = "currentDir" &&
  p.mode = PortMode.Out &&
  p.ptype = mk_some<DataType>(some (dt: DataType) {
    dt.kind = DataTypeKind.UserDefined &&
    dt.user_defined_type = m.type_declarations.element[1]})} &&
ct.contract = mk_some<ContractSpec>(some (csp: ContractSpec) {
  csp.constant_declarations.length = 0 &&
  csp.variable_declarations.length = 0 &&
  csp.assumes.length = 0 &&
  csp.guarantees.length = 2 &&
  csp.guarantees.element[0] = some (ci: ContractItem) {
    ci.name = mk_some<Identifier>("currentPos_Def") &&
    ci.expression = some (e: Expression) {
      e.kind = ExpressionKind.Equal &&
      e.equal = some (bo: BinaryOperation) {
        bo.lhs_operand = some (e: Expression) {
          e.kind = ExpressionKind.Id &&
          e.identifier = "currentPos"
        } &&
        bo.rhs_operand = some (e: Expression) {
          e.kind = ExpressionKind.Id &&
          e.identifier = "voted_pos"
        }
      }
    }
  } &&
  csp.guarantees.element[1] = some (ci: ContractItem) {
    ci.name = mk_some<Identifier>("currentDir_Def") &&
    ci.expression = some (e: Expression) {
      e.kind = ExpressionKind.Equal &&
      e.equal = some (bo: BinaryOperation) {
        bo.lhs_operand = some (e: Expression) {
          e.kind = ExpressionKind.Id &&
          e.identifier = "currentDir"
        } &&
        bo.rhs_operand = some (e: Expression) {
          e.kind = ExpressionKind.Id &&
          e.identifier = "voted_dir"
        }
      }
    }
  } &&
  csp.modes.length = 0 &&
  csp.imports.length = 0})} &&
m.component_types.element[10] = some (ct: ComponentType) {
  ct.name = "RCReceiver" &&
  ct.ports.length = 7 &&
  ct.ports.element[0] = some(p: Port) {
    p.name = "rcv_payloadCMD" &&
    p.mode = PortMode.In &&
    p.ptype = mk_some<DataType>(some (dt: DataType) {
      dt.kind = DataTypeKind.UserDefined &&
      dt.user_defined_type = m.type_declarations.element[2]
  })} &&
ct.ports.element[1] = some(p: Port) {
  p.name = "rcv_move" &&
  p.mode = PortMode.In &&
  p.ptype = mk_some<DataType>(some (dt: DataType) {
    dt.kind = DataTypeKind.UserDefined &&
    dt.user_defined_type = m.type_declarations.element[0]})} &&
ct.ports.element[2] = some(p: Port) {
  p.name = "rcv_uavMode" &&
  p.mode = PortMode.In &&
  p.ptype = mk_some<DataType>(some (dt: DataType) {
    dt.kind = DataTypeKind.UserDefined &&
    dt.user_defined_type = m.type_declarations.element[7]})} &&
ct.ports.element[3] = some(p: Port) {
  p.name = "normal" &&
  p.mode = PortMode.Out &&
  p.ptype = mk_some<DataType>(BoolType)} &&
ct.ports.element[4] = some(p: Port) {
  p.name = "payloadCMD" &&
  p.mode = PortMode.Out &&
  p.ptype = mk_some<DataType>(some (dt: DataType) {
    dt.kind = DataTypeKind.UserDefined &&
    dt.user_defined_type = m.type_declarations.element[2]})} &&
ct.ports.element[5] = some(p: Port) {
  p.name = "move" &&
  p.mode = PortMode.Out &&
  p.ptype = mk_some<DataType>(some (dt: DataType) {
    dt.kind = DataTypeKind.UserDefined &&
    dt.user_defined_type = m.type_declarations.element[0]})} &&
ct.ports.element[6] = some(p: Port) {
  p.name = "uavMode" &&
  p.mode = PortMode.Out &&
  p.ptype = mk_some<DataType>(some (dt: DataType) {
    dt.kind = DataTypeKind.UserDefined &&
    dt.user_defined_type = m.type_declarations.element[7]})} &&
ct.contract = mk_some<ContractSpec>(some (csp: ContractSpec) {
  csp.constant_declarations.length = 0 &&
  csp.variable_declarations.length = 0 &&
  csp.assumes.length = 0 &&
  csp.guarantees.length = 4 &&
  csp.guarantees.element[0] = some (ci: ContractItem) {
    ci.name = mk_some<Identifier>("payloadCMD_Def") &&
    ci.expression = some (e: Expression) {
      e.kind = ExpressionKind.Equal &&
      e.equal = some (bo: BinaryOperation) {
        bo.lhs_operand = some (e: Expression) {
          e.kind = ExpressionKind.Id &&
          e.identifier = "payloadCMD"
        } &&
        bo.rhs_operand = some (e: Expression) {
          e.kind = ExpressionKind.Id &&
          e.identifier = "rcv_payloadCMD"
        }
      }
    }
  } &&
  csp.guarantees.element[1] = some (ci: ContractItem) {
    ci.name = mk_some<Identifier>("move_Def") &&
    ci.expression = some (e: Expression) {
      e.kind = ExpressionKind.Equal &&
      e.equal = some (bo: BinaryOperation) {
        bo.lhs_operand = some (e: Expression) {
          e.kind = ExpressionKind.Id &&
          e.identifier = "move"
        } &&
        bo.rhs_operand = some (e: Expression) {
          e.kind = ExpressionKind.Id &&
          e.identifier = "rcv_move"
        }
      }
    }
  } &&
  csp.guarantees.element[2] = some (ci: ContractItem) {
    ci.name = mk_some<Identifier>("uavMode_Def") &&
    ci.expression = some (e: Expression) {
      e.kind = ExpressionKind.Equal &&
      e.equal = some (bo: BinaryOperation) {
        bo.lhs_operand = some (e: Expression) {
          e.kind = ExpressionKind.Id &&
          e.identifier = "uavMode"
        } &&
        bo.rhs_operand = some (e: Expression) {
          e.kind = ExpressionKind.Id &&
          e.identifier = "rcv_uavMode"
        }
      }
    }
  } &&
  csp.guarantees.element[3] = some (ci: ContractItem) {
    ci.name = mk_some<Identifier>("normal_Def") &&
    ci.expression = some (e: Expression) {
      e.kind = ExpressionKind.Equal &&
      e.equal = some (bo: BinaryOperation) {
        bo.lhs_operand = some (e: Expression) {
          e.kind = ExpressionKind.Id &&
          e.identifier = "normal"
        } &&
        bo.rhs_operand = some (e: Expression) {
          e.kind = ExpressionKind.BoolLiteral &&
          e.bool_literal = true
        }
      }
    }
  } &&
  csp.modes.length = 0 &&
  csp.imports.length = 0})} &&
m.component_types.element[11] = some (ct: ComponentType) {
  ct.name = "RCReceiverHealthCheck" &&
  ct.ports.length = 2 &&
  ct.ports.element[0] = some(p: Port) {
    p.name = "normal" &&
    p.mode = PortMode.In &&
    p.ptype = mk_some<DataType>(BoolType)
  } &&
  ct.ports.element[1] = some(p: Port) {
    p.name = "ATE6" &&
    p.mode = PortMode.Out &&
    p.ptype = mk_some<DataType>(some (dt: DataType) {
      dt.kind = DataTypeKind.UserDefined &&
      dt.user_defined_type = m.type_declarations.element[10]
  })} &&
ct.contract = mk_some<ContractSpec>(some (csp: ContractSpec) {
  csp.constant_declarations.length = 0 &&
  csp.variable_declarations.length = 1 &&
  csp.variable_declarations.element[0] = some (sd: SymbolDefinition) {
    sd.name = "next_ATE6" &&
    sd.dtype = some (dt: DataType) {
      dt.kind = DataTypeKind.UserDefined &&
      dt.user_defined_type = m.type_declarations.element[10]
  } &&
  sd.definition = some (e: Expression) {
    e.kind = ExpressionKind.ConditionalExpr &&
    e.conditional_expr = some (ite: IfThenElse) {
      ite.condition = some (e: Expression) {
        e.kind = ExpressionKind.LessThanOrEqualTo &&
        e.less_than_or_equal_to = some (bo: BinaryOperation) {
          bo.lhs_operand = some (e: Expression) {
            e.kind = ExpressionKind.Call &&
            e.call = some (cll: NodeCall) {
              cll.node = "duration" &&
              cll.arguments.length = 1 &&
              cll.arguments.element[0] = some (e: Expression) {
                e.kind = ExpressionKind.Id &&
                e.identifier = "normal"
              }
            }
          } &&
          bo.rhs_operand = some (e: Expression) {
            e.kind = ExpressionKind.Id &&
            e.identifier = "RC_RECEIVER_TOLERANCE_LEVEL"
          }
        }
      } &&
      ite.thenBranch = some (e: Expression) {
        e.kind = ExpressionKind.Id &&
        e.identifier = "RC_Normal"
      } &&
      ite.elseBranch = some (e: Expression) {
        e.kind = ExpressionKind.Id &&
        e.identifier = "RC_Abnormal"
      }
    }
  }} &&csp.assumes.length = 0 &&csp.guarantees.length = 1 &&
csp.guarantees.element[0] = some (ci: ContractItem) {
  ci.name = mk_some<Identifier>("ATE6_Def") &&
  ci.expression = some (e: Expression) {
    e.kind = ExpressionKind.Equal &&
    e.equal = some (bo: BinaryOperation) {
      bo.lhs_operand = some (e: Expression) {
        e.kind = ExpressionKind.Id &&
        e.identifier = "ATE6"
      } &&
      bo.rhs_operand = some (e: Expression) {
        e.kind = ExpressionKind.Arrow &&
        e.arrow = some (bo: BinaryOperation) {
          bo.lhs_operand = some (e: Expression) {
            e.kind = ExpressionKind.Id &&
            e.identifier = "RC_Normal"
          } &&
          bo.rhs_operand = some (e: Expression) {
            e.kind = ExpressionKind.Pre &&
            e.pre = some (e: Expression) {
              e.kind = ExpressionKind.Id &&
              e.identifier = "next_ATE6"
            }
          }
        }
      }
    }
  }} &&csp.modes.length = 0 &&csp.imports.length = 0})} &&
m.component_types.element[12] = some (ct: ComponentType) {
  ct.name = "StateController" &&
  ct.ports.length = 4 &&
  ct.ports.element[0] = some(p: Port) {
    p.name = "ATE6" &&
    p.mode = PortMode.In &&
    p.ptype = mk_some<DataType>(some (dt: DataType) {
      dt.kind = DataTypeKind.UserDefined &&
      dt.user_defined_type = m.type_declarations.element[10]
  })} &&
ct.ports.element[1] = some(p: Port) {
  p.name = "ATE7" &&
  p.mode = PortMode.In &&
  p.ptype = mk_some<DataType>(some (dt: DataType) {
    dt.kind = DataTypeKind.UserDefined &&
    dt.user_defined_type = m.type_declarations.element[11]})} &&
ct.ports.element[2] = some(p: Port) {
  p.name = "uavMode" &&
  p.mode = PortMode.In &&
  p.ptype = mk_some<DataType>(some (dt: DataType) {
    dt.kind = DataTypeKind.UserDefined &&
    dt.user_defined_type = m.type_declarations.element[7]})} &&
ct.ports.element[3] = some(p: Port) {
  p.name = "mstate" &&
  p.mode = PortMode.Out &&
  p.ptype = mk_some<DataType>(some (dt: DataType) {
    dt.kind = DataTypeKind.UserDefined &&
    dt.user_defined_type = m.type_declarations.element[7]})} &&
ct.contract = mk_some<ContractSpec>(some (csp: ContractSpec) {
  csp.constant_declarations.length = 0 &&
  csp.variable_declarations.length = 0 &&
  csp.assumes.length = 0 &&
  csp.guarantees.length = 1 &&
  csp.guarantees.element[0] = some (ci: ContractItem) {
    ci.name = mk_some<Identifier>("mstate_Def") &&
    ci.expression = some (e: Expression) {
      e.kind = ExpressionKind.Equal &&
      e.equal = some (bo: BinaryOperation) {
        bo.lhs_operand = some (e: Expression) {
          e.kind = ExpressionKind.Id &&
          e.identifier = "mstate"
        } &&
        bo.rhs_operand = some (e: Expression) {
          e.kind = ExpressionKind.ConditionalExpr &&
          e.conditional_expr = some (ite: IfThenElse) {
            ite.condition = some (e: Expression) {
              e.kind = ExpressionKind.And &&
              e.and = some (bo: BinaryOperation) {
                bo.lhs_operand = some (e: Expression) {
                  e.kind = ExpressionKind.Equal &&
                  e.equal = some (bo: BinaryOperation) {
                    bo.lhs_operand = some (e: Expression) {
                      e.kind = ExpressionKind.Id &&
                      e.identifier = "ATE7"
                    } &&
                    bo.rhs_operand = some (e: Expression) {
                      e.kind = ExpressionKind.Id &&
                      e.identifier = "Adequate"
                    }
                  }
                } &&
                bo.rhs_operand = some (e: Expression) {
                  e.kind = ExpressionKind.Equal &&
                  e.equal = some (bo: BinaryOperation) {
                    bo.lhs_operand = some (e: Expression) {
                      e.kind = ExpressionKind.Id &&
                      e.identifier = "ATE6"
                    } &&
                    bo.rhs_operand = some (e: Expression) {
                      e.kind = ExpressionKind.Id &&
                      e.identifier = "RC_Normal"
                    }
                  }
                }
              }
            } &&
            ite.thenBranch = some (e: Expression) {
              e.kind = ExpressionKind.Id &&
              e.identifier = "uavMode"
            } &&
            ite.elseBranch = some (e: Expression) {
              e.kind = ExpressionKind.Id &&
              e.identifier = "s_RETURN_TO_LAUNCH"
            }
          }
        }
      }
    }
  } &&
  csp.modes.length = 0 &&
  csp.imports.length = 0})} &&
m.component_types.element[13] = some (ct: ComponentType) {
  ct.name = "TriplexVoter" &&
  ct.ports.length = 8 &&
  ct.ports.element[0] = some(p: Port) {
    p.name = "gps_pos" &&
    p.mode = PortMode.In &&
    p.ptype = mk_some<DataType>(some (dt: DataType) {
      dt.kind = DataTypeKind.UserDefined &&
      dt.user_defined_type = m.type_declarations.element[3]
  })} &&
ct.ports.element[1] = some(p: Port) {
  p.name = "dme_vor_pos" &&
  p.mode = PortMode.In &&
  p.ptype = mk_some<DataType>(some (dt: DataType) {
    dt.kind = DataTypeKind.UserDefined &&
    dt.user_defined_type = m.type_declarations.element[3]})} &&
ct.ports.element[2] = some(p: Port) {
  p.name = "iru_pos" &&
  p.mode = PortMode.In &&
  p.ptype = mk_some<DataType>(some (dt: DataType) {
    dt.kind = DataTypeKind.UserDefined &&
    dt.user_defined_type = m.type_declarations.element[3]})} &&
ct.ports.element[3] = some(p: Port) {
  p.name = "gps_dir" &&
  p.mode = PortMode.In &&
  p.ptype = mk_some<DataType>(some (dt: DataType) {
    dt.kind = DataTypeKind.UserDefined &&
    dt.user_defined_type = m.type_declarations.element[1]})} &&
ct.ports.element[4] = some(p: Port) {
  p.name = "dme_vor_dir" &&
  p.mode = PortMode.In &&
  p.ptype = mk_some<DataType>(some (dt: DataType) {
    dt.kind = DataTypeKind.UserDefined &&
    dt.user_defined_type = m.type_declarations.element[1]})} &&
ct.ports.element[5] = some(p: Port) {
  p.name = "iru_dir" &&
  p.mode = PortMode.In &&
  p.ptype = mk_some<DataType>(some (dt: DataType) {
    dt.kind = DataTypeKind.UserDefined &&
    dt.user_defined_type = m.type_declarations.element[1]})} &&
ct.ports.element[6] = some(p: Port) {
  p.name = "voted_pos" &&
  p.mode = PortMode.Out &&
  p.ptype = mk_some<DataType>(some (dt: DataType) {
    dt.kind = DataTypeKind.UserDefined &&
    dt.user_defined_type = m.type_declarations.element[3]})} &&
ct.ports.element[7] = some(p: Port) {
  p.name = "voted_dir" &&
  p.mode = PortMode.Out &&
  p.ptype = mk_some<DataType>(some (dt: DataType) {
    dt.kind = DataTypeKind.UserDefined &&
    dt.user_defined_type = m.type_declarations.element[1]})} &&
ct.contract = mk_some<ContractSpec>(some (csp: ContractSpec) {
  csp.constant_declarations.length = 0 &&
  csp.variable_declarations.length = 0 &&
  csp.assumes.length = 0 &&
  csp.guarantees.length = 2 &&
  csp.guarantees.element[0] = some (ci: ContractItem) {
    ci.name = mk_some<Identifier>("voted_pos_Def") &&
    ci.expression = some (e: Expression) {
      e.kind = ExpressionKind.Equal &&
      e.equal = some (bo: BinaryOperation) {
        bo.lhs_operand = some (e: Expression) {
          e.kind = ExpressionKind.Id &&
          e.identifier = "voted_pos"
        } &&
        bo.rhs_operand = some (e: Expression) {
          e.kind = ExpressionKind.ConditionalExpr &&
          e.conditional_expr = some (ite: IfThenElse) {
            ite.condition = some (e: Expression) {
              e.kind = ExpressionKind.Call &&
              e.call = some (cll: NodeCall) {
                cll.node = "is_equal" &&
                cll.arguments.length = 2 &&
                cll.arguments.element[0] = some (e: Expression) {
                  e.kind = ExpressionKind.Id &&
                  e.identifier = "gps_pos"
                } &&
                cll.arguments.element[1] = some (e: Expression) {
                  e.kind = ExpressionKind.Id &&
                  e.identifier = "dme_vor_pos"
                }
              }
            } &&
            ite.thenBranch = some (e: Expression) {
              e.kind = ExpressionKind.Id &&
              e.identifier = "gps_pos"
            } &&
            ite.elseBranch = some (e: Expression) {
              e.kind = ExpressionKind.ConditionalExpr &&
              e.conditional_expr = some (ite: IfThenElse) {
                ite.condition = some (e: Expression) {
                  e.kind = ExpressionKind.Call &&
                  e.call = some (cll: NodeCall) {
                    cll.node = "is_equal" &&
                    cll.arguments.length = 2 &&
                    cll.arguments.element[0] = some (e: Expression) {
                      e.kind = ExpressionKind.Id &&
                      e.identifier = "gps_pos"
                    } &&
                    cll.arguments.element[1] = some (e: Expression) {
                      e.kind = ExpressionKind.Id &&
                      e.identifier = "iru_pos"
                    }
                  }
                } &&
                ite.thenBranch = some (e: Expression) {
                  e.kind = ExpressionKind.Id &&
                  e.identifier = "gps_pos"
                } &&
                ite.elseBranch = some (e: Expression) {
                  e.kind = ExpressionKind.Id &&
                  e.identifier = "dme_vor_pos"
                }
              }
            }
          }
        }
      }
    }
  } &&
  csp.guarantees.element[1] = some (ci: ContractItem) {
    ci.name = mk_some<Identifier>("voted_dir_Def") &&
    ci.expression = some (e: Expression) {
      e.kind = ExpressionKind.Equal &&
      e.equal = some (bo: BinaryOperation) {
        bo.lhs_operand = some (e: Expression) {
          e.kind = ExpressionKind.Id &&
          e.identifier = "voted_dir"
        } &&
        bo.rhs_operand = some (e: Expression) {
          e.kind = ExpressionKind.ConditionalExpr &&
          e.conditional_expr = some (ite: IfThenElse) {
            ite.condition = some (e: Expression) {
              e.kind = ExpressionKind.Equal &&
              e.equal = some (bo: BinaryOperation) {
                bo.lhs_operand = some (e: Expression) {
                  e.kind = ExpressionKind.Id &&
                  e.identifier = "gps_dir"
                } &&
                bo.rhs_operand = some (e: Expression) {
                  e.kind = ExpressionKind.Id &&
                  e.identifier = "dme_vor_dir"
                }
              }
            } &&
            ite.thenBranch = some (e: Expression) {
              e.kind = ExpressionKind.Id &&
              e.identifier = "gps_dir"
            } &&
            ite.elseBranch = some (e: Expression) {
              e.kind = ExpressionKind.ConditionalExpr &&
              e.conditional_expr = some (ite: IfThenElse) {
                ite.condition = some (e: Expression) {
                  e.kind = ExpressionKind.Equal &&
                  e.equal = some (bo: BinaryOperation) {
                    bo.lhs_operand = some (e: Expression) {
                      e.kind = ExpressionKind.Id &&
                      e.identifier = "gps_dir"
                    } &&
                    bo.rhs_operand = some (e: Expression) {
                      e.kind = ExpressionKind.Id &&
                      e.identifier = "iru_dir"
                    }
                  }
                } &&
                ite.thenBranch = some (e: Expression) {
                  e.kind = ExpressionKind.Id &&
                  e.identifier = "gps_dir"
                } &&
                ite.elseBranch = some (e: Expression) {
                  e.kind = ExpressionKind.Id &&
                  e.identifier = "dme_vor_dir"
                }
              }
            }
          }
        }
      }
    }
  } &&
  csp.modes.length = 0 &&
  csp.imports.length = 0})} &&
m.component_types.element[14] = some (ct: ComponentType) {
  ct.name = "UAVSystem" &&
  ct.ports.length = 12 &&
  ct.ports.element[0] = some(p: Port) {
    p.name = "location_source_pos" &&
    p.mode = PortMode.In &&
    p.ptype = mk_some<DataType>(some (dt: DataType) {
      dt.kind = DataTypeKind.UserDefined &&
      dt.user_defined_type = m.type_declarations.element[3]
  })} &&
ct.ports.element[1] = some(p: Port) {
  p.name = "location_source_dir" &&
  p.mode = PortMode.In &&
  p.ptype = mk_some<DataType>(some (dt: DataType) {
    dt.kind = DataTypeKind.UserDefined &&
    dt.user_defined_type = m.type_declarations.element[1]})} &&
ct.ports.element[2] = some(p: Port) {
  p.name = "rcv_payloadCMD" &&
  p.mode = PortMode.In &&
  p.ptype = mk_some<DataType>(some (dt: DataType) {
    dt.kind = DataTypeKind.UserDefined &&
    dt.user_defined_type = m.type_declarations.element[2]})} &&
ct.ports.element[3] = some(p: Port) {
  p.name = "rcv_move" &&
  p.mode = PortMode.In &&
  p.ptype = mk_some<DataType>(some (dt: DataType) {
    dt.kind = DataTypeKind.UserDefined &&
    dt.user_defined_type = m.type_declarations.element[0]})} &&
ct.ports.element[4] = some(p: Port) {
  p.name = "rcv_uavMode" &&
  p.mode = PortMode.In &&
  p.ptype = mk_some<DataType>(some (dt: DataType) {
    dt.kind = DataTypeKind.UserDefined &&
    dt.user_defined_type = m.type_declarations.element[7]})} &&
ct.ports.element[5] = some(p: Port) {
  p.name = "cmd" &&
  p.mode = PortMode.Out &&
  p.ptype = mk_some<DataType>(some (dt: DataType) {
    dt.kind = DataTypeKind.UserDefined &&
    dt.user_defined_type = m.type_declarations.element[6]})} &&
ct.ports.element[6] = some(p: Port) {
  p.name = "currentPos" &&
  p.mode = PortMode.Out &&
  p.ptype = mk_some<DataType>(some (dt: DataType) {
    dt.kind = DataTypeKind.UserDefined &&
    dt.user_defined_type = m.type_declarations.element[3]})} &&
ct.ports.element[7] = some(p: Port) {
  p.name = "payloadCmdFC" &&
  p.mode = PortMode.Out &&
  p.ptype = mk_some<DataType>(some (dt: DataType) {
    dt.kind = DataTypeKind.UserDefined &&
    dt.user_defined_type = m.type_declarations.element[2]})} &&
ct.ports.element[8] = some(p: Port) {
  p.name = "payloadCmdRC" &&
  p.mode = PortMode.Out &&
  p.ptype = mk_some<DataType>(some (dt: DataType) {
    dt.kind = DataTypeKind.UserDefined &&
    dt.user_defined_type = m.type_declarations.element[2]})} &&
ct.ports.element[9] = some(p: Port) {
  p.name = "mstate" &&
  p.mode = PortMode.Out &&
  p.ptype = mk_some<DataType>(some (dt: DataType) {
    dt.kind = DataTypeKind.UserDefined &&
    dt.user_defined_type = m.type_declarations.element[7]})} &&
ct.ports.element[10] = some(p: Port) {
  p.name = "tasks" &&
  p.mode = PortMode.Out &&
  p.ptype = mk_some<DataType>(some (dt: DataType) {
    dt.kind = DataTypeKind.UserDefined &&
    dt.user_defined_type = m.type_declarations.element[9]})} &&
ct.ports.element[11] = some(p: Port) {
  p.name = "payload_performed" &&
  p.mode = PortMode.Out &&
  p.ptype = mk_some<DataType>(BoolType)} &&
ct.contract = mk_some<ContractSpec>(some (csp: ContractSpec) {
  csp.constant_declarations.length = 0 &&
  csp.variable_declarations.length = 4 &&
  csp.variable_declarations.element[0] = some (sd: SymbolDefinition) {
    sd.name = "picture_waypoint" &&
    sd.dtype = some (dt: DataType) {
      dt.kind = DataTypeKind.UserDefined &&
      dt.user_defined_type = m.type_declarations.element[3]
  } &&
  sd.definition = some (e: Expression) {
    e.kind = ExpressionKind.RecordProjection &&
    e.record_projection = some (rp: RecordProjection) {
      rp.record_reference = some (e: Expression) {
        e.kind = ExpressionKind.RecordProjection &&
        e.record_projection = some (rp: RecordProjection) {
          rp.record_reference = some (e: Expression) {
            e.kind = ExpressionKind.Id &&
            e.identifier = "tasks"
          } &&
          rp.field_id = "task1"
        }
      } &&
      rp.field_id = "waypoint"
    }
  }} &&
csp.variable_declarations.element[1] = some (sd: SymbolDefinition) {
  sd.name = "bomb_waypoint" &&
  sd.dtype = some (dt: DataType) {
    dt.kind = DataTypeKind.UserDefined &&
    dt.user_defined_type = m.type_declarations.element[3]} &&
sd.definition = some (e: Expression) {
  e.kind = ExpressionKind.RecordProjection &&
  e.record_projection = some (rp: RecordProjection) {
    rp.record_reference = some (e: Expression) {
      e.kind = ExpressionKind.RecordProjection &&
      e.record_projection = some (rp: RecordProjection) {
        rp.record_reference = some (e: Expression) {
          e.kind = ExpressionKind.Id &&
          e.identifier = "tasks"
        } &&
        rp.field_id = "task2"
      }
    } &&
    rp.field_id = "waypoint"
  }}} &&
csp.variable_declarations.element[2] = some (sd: SymbolDefinition) {
  sd.name = "destination_waypoint" &&
  sd.dtype = some (dt: DataType) {
    dt.kind = DataTypeKind.UserDefined &&
    dt.user_defined_type = m.type_declarations.element[3]} &&
sd.definition = some (e: Expression) {
  e.kind = ExpressionKind.RecordProjection &&
  e.record_projection = some (rp: RecordProjection) {
    rp.record_reference = some (e: Expression) {
      e.kind = ExpressionKind.RecordProjection &&
      e.record_projection = some (rp: RecordProjection) {
        rp.record_reference = some (e: Expression) {
          e.kind = ExpressionKind.Id &&
          e.identifier = "tasks"
        } &&
        rp.field_id = "task3"
      }
    } &&
    rp.field_id = "waypoint"
  }}} &&
csp.variable_declarations.element[3] = some (sd: SymbolDefinition) {
  sd.name = "payloadCMD" &&
  sd.dtype = some (dt: DataType) {
    dt.kind = DataTypeKind.UserDefined &&
    dt.user_defined_type = m.type_declarations.element[2]} &&
sd.definition = some (e: Expression) {
  e.kind = ExpressionKind.ConditionalExpr &&
  e.conditional_expr = some (ite: IfThenElse) {
    ite.condition = some (e: Expression) {
      e.kind = ExpressionKind.Equal &&
      e.equal = some (bo: BinaryOperation) {
        bo.lhs_operand = some (e: Expression) {
          e.kind = ExpressionKind.Id &&
          e.identifier = "mstate"
        } &&
        bo.rhs_operand = some (e: Expression) {
          e.kind = ExpressionKind.Id &&
          e.identifier = "s_MANUAL_FLIGHT_MODE"
        }
      }
    } &&
    ite.thenBranch = some (e: Expression) {
      e.kind = ExpressionKind.Id &&
      e.identifier = "payloadCmdRC"
    } &&
    ite.elseBranch = some (e: Expression) {
      e.kind = ExpressionKind.Id &&
      e.identifier = "payloadCmdFC"
    }
  }}} &&csp.assumes.length = 5 &&
csp.assumes.element[0] = some (ci: ContractItem) {
  ci.name = mk_some<Identifier>("location_source_Pos_Simulated_Value") &&
  ci.expression = some (e: Expression) {
    e.kind = ExpressionKind.Equal &&
    e.equal = some (bo: BinaryOperation) {
      bo.lhs_operand = some (e: Expression) {
        e.kind = ExpressionKind.Id &&
        e.identifier = "location_source_pos"
      } &&
      bo.rhs_operand = some (e: Expression) {
        e.kind = ExpressionKind.Call &&
        e.call = some (cll: NodeCall) {
          cll.node = "LocationSource_Pos" &&
          cll.arguments.length = 1 &&
          cll.arguments.element[0] = some (e: Expression) {
            e.kind = ExpressionKind.Id &&
            e.identifier = "cmd"
          }
        }
      }
    }
  }} &&
csp.assumes.element[1] = some (ci: ContractItem) {
  ci.name = mk_some<Identifier>("location_source_Dir_Simulated_Value") &&
  ci.expression = some (e: Expression) {
    e.kind = ExpressionKind.Equal &&
    e.equal = some (bo: BinaryOperation) {
      bo.lhs_operand = some (e: Expression) {
        e.kind = ExpressionKind.Id &&
        e.identifier = "location_source_dir"
      } &&
      bo.rhs_operand = some (e: Expression) {
        e.kind = ExpressionKind.Call &&
        e.call = some (cll: NodeCall) {
          cll.node = "LocationSource_Dir" &&
          cll.arguments.length = 1 &&
          cll.arguments.element[0] = some (e: Expression) {
            e.kind = ExpressionKind.Id &&
            e.identifier = "cmd"
          }
        }
      }
    }
  }} &&
csp.assumes.element[2] = some (ci: ContractItem) {
  ci.name = mk_some<Identifier>("rcv_uavMode_Simulated_Value") &&
  ci.expression = some (e: Expression) {
    e.kind = ExpressionKind.Equal &&
    e.equal = some (bo: BinaryOperation) {
      bo.lhs_operand = some (e: Expression) {
        e.kind = ExpressionKind.Id &&
        e.identifier = "rcv_uavMode"
      } &&
      bo.rhs_operand = some (e: Expression) {
        e.kind = ExpressionKind.Id &&
        e.identifier = "s_AUTO_FLIGHT_MODE"
      }
    }
  }} &&
csp.assumes.element[3] = some (ci: ContractItem) {
  ci.name = mk_some<Identifier>("rcv_payloadCMD_Simulated_Value") &&
  ci.expression = some (e: Expression) {
    e.kind = ExpressionKind.Equal &&
    e.equal = some (bo: BinaryOperation) {
      bo.lhs_operand = some (e: Expression) {
        e.kind = ExpressionKind.Id &&
        e.identifier = "rcv_payloadCMD"
      } &&
      bo.rhs_operand = some (e: Expression) {
        e.kind = ExpressionKind.Call &&
        e.call = some (cll: NodeCall) {
          cll.node = "RemoteOperatorController_payloadCMD" &&
          cll.arguments.length = 0
        }
      }
    }
  }} &&
csp.assumes.element[4] = some (ci: ContractItem) {
  ci.name = mk_some<Identifier>("rcv_move_Simulated_Value") &&
  ci.expression = some (e: Expression) {
    e.kind = ExpressionKind.Equal &&
    e.equal = some (bo: BinaryOperation) {
      bo.lhs_operand = some (e: Expression) {
        e.kind = ExpressionKind.Id &&
        e.identifier = "rcv_move"
      } &&
      bo.rhs_operand = some (e: Expression) {
        e.kind = ExpressionKind.Call &&
        e.call = some (cll: NodeCall) {
          cll.node = "RemoteOperatorController_Move" &&
          cll.arguments.length = 0
        }
      }
    }
  }} &&csp.guarantees.length = 7 &&
csp.guarantees.element[0] = some (ci: ContractItem) {
  ci.name = mk_some<Identifier>("a_picture_only_in_task1_waypoint") &&
  ci.expression = some (e: Expression) {
    e.kind = ExpressionKind.Implies &&
    e.implies = some (bo: BinaryOperation) {
      bo.lhs_operand = some (e: Expression) {
        e.kind = ExpressionKind.And &&
        e.and = some (bo: BinaryOperation) {
          bo.lhs_operand = some (e: Expression) {
            e.kind = ExpressionKind.And &&
            e.and = some (bo: BinaryOperation) {
              bo.lhs_operand = some (e: Expression) {
                e.kind = ExpressionKind.Equal &&
                e.equal = some (bo: BinaryOperation) {
                  bo.lhs_operand = some (e: Expression) {
                    e.kind = ExpressionKind.Id &&
                    e.identifier = "mstate"
                  } &&
                  bo.rhs_operand = some (e: Expression) {
                    e.kind = ExpressionKind.Id &&
                    e.identifier = "s_AUTO_FLIGHT_MODE"
                  }
                }
              } &&
              bo.rhs_operand = some (e: Expression) {
                e.kind = ExpressionKind.Id &&
                e.identifier = "payload_performed"
              }
            }
          } &&
          bo.rhs_operand = some (e: Expression) {
            e.kind = ExpressionKind.Equal &&
            e.equal = some (bo: BinaryOperation) {
              bo.lhs_operand = some (e: Expression) {
                e.kind = ExpressionKind.Id &&
                e.identifier = "payloadCMD"
              } &&
              bo.rhs_operand = some (e: Expression) {
                e.kind = ExpressionKind.Id &&
                e.identifier = "Camera"
              }
            }
          }
        }
      } &&
      bo.rhs_operand = some (e: Expression) {
        e.kind = ExpressionKind.Call &&
        e.call = some (cll: NodeCall) {
          cll.node = "is_equal" &&
          cll.arguments.length = 2 &&
          cll.arguments.element[0] = some (e: Expression) {
            e.kind = ExpressionKind.Id &&
            e.identifier = "location_source_pos"
          } &&
          cll.arguments.element[1] = some (e: Expression) {
            e.kind = ExpressionKind.Id &&
            e.identifier = "picture_waypoint"
          }
        }
      }
    }
  }} &&
csp.guarantees.element[1] = some (ci: ContractItem) {
  ci.name = mk_some<Identifier>("b_weapon_only_in_task2_waypoint") &&
  ci.expression = some (e: Expression) {
    e.kind = ExpressionKind.Implies &&
    e.implies = some (bo: BinaryOperation) {
      bo.lhs_operand = some (e: Expression) {
        e.kind = ExpressionKind.And &&
        e.and = some (bo: BinaryOperation) {
          bo.lhs_operand = some (e: Expression) {
            e.kind = ExpressionKind.And &&
            e.and = some (bo: BinaryOperation) {
              bo.lhs_operand = some (e: Expression) {
                e.kind = ExpressionKind.Equal &&
                e.equal = some (bo: BinaryOperation) {
                  bo.lhs_operand = some (e: Expression) {
                    e.kind = ExpressionKind.Id &&
                    e.identifier = "mstate"
                  } &&
                  bo.rhs_operand = some (e: Expression) {
                    e.kind = ExpressionKind.Id &&
                    e.identifier = "s_AUTO_FLIGHT_MODE"
                  }
                }
              } &&
              bo.rhs_operand = some (e: Expression) {
                e.kind = ExpressionKind.Id &&
                e.identifier = "payload_performed"
              }
            }
          } &&
          bo.rhs_operand = some (e: Expression) {
            e.kind = ExpressionKind.Equal &&
            e.equal = some (bo: BinaryOperation) {
              bo.lhs_operand = some (e: Expression) {
                e.kind = ExpressionKind.Id &&
                e.identifier = "payloadCMD"
              } &&
              bo.rhs_operand = some (e: Expression) {
                e.kind = ExpressionKind.Id &&
                e.identifier = "Weapon"
              }
            }
          }
        }
      } &&
      bo.rhs_operand = some (e: Expression) {
        e.kind = ExpressionKind.Call &&
        e.call = some (cll: NodeCall) {
          cll.node = "is_equal" &&
          cll.arguments.length = 2 &&
          cll.arguments.element[0] = some (e: Expression) {
            e.kind = ExpressionKind.Id &&
            e.identifier = "location_source_pos"
          } &&
          cll.arguments.element[1] = some (e: Expression) {
            e.kind = ExpressionKind.Id &&
            e.identifier = "bomb_waypoint"
          }
        }
      }
    }
  }} &&
csp.guarantees.element[2] = some (ci: ContractItem) {
  ci.name = mk_some<Identifier>("c_not_taking_picture_on_arbitrary_location") &&
  ci.expression = some (e: Expression) {
    e.kind = ExpressionKind.Implies &&
    e.implies = some (bo: BinaryOperation) {
      bo.lhs_operand = some (e: Expression) {
        e.kind = ExpressionKind.And &&
        e.and = some (bo: BinaryOperation) {
          bo.lhs_operand = some (e: Expression) {
            e.kind = ExpressionKind.And &&
            e.and = some (bo: BinaryOperation) {
              bo.lhs_operand = some (e: Expression) {
                e.kind = ExpressionKind.Equal &&
                e.equal = some (bo: BinaryOperation) {
                  bo.lhs_operand = some (e: Expression) {
                    e.kind = ExpressionKind.Id &&
                    e.identifier = "mstate"
                  } &&
                  bo.rhs_operand = some (e: Expression) {
                    e.kind = ExpressionKind.Id &&
                    e.identifier = "s_AUTO_FLIGHT_MODE"
                  }
                }
              } &&
              bo.rhs_operand = some (e: Expression) {
                e.kind = ExpressionKind.Id &&
                e.identifier = "payload_performed"
              }
            }
          } &&
          bo.rhs_operand = some (e: Expression) {
            e.kind = ExpressionKind.Equal &&
            e.equal = some (bo: BinaryOperation) {
              bo.lhs_operand = some (e: Expression) {
                e.kind = ExpressionKind.Id &&
                e.identifier = "payloadCMD"
              } &&
              bo.rhs_operand = some (e: Expression) {
                e.kind = ExpressionKind.Id &&
                e.identifier = "Camera"
              }
            }
          }
        }
      } &&
      bo.rhs_operand = some (e: Expression) {
        e.kind = ExpressionKind.Not &&
        e.not = some (e: Expression) {
          e.kind = ExpressionKind.Call &&
          e.call = some (cll: NodeCall) {
            cll.node = "is_equal" &&
            cll.arguments.length = 2 &&
            cll.arguments.element[0] = some (e: Expression) {
              e.kind = ExpressionKind.Id &&
              e.identifier = "location_source_pos"
            } &&
            cll.arguments.element[1] = some (e: Expression) {
              e.kind = ExpressionKind.RecordLiteral &&
              e.record_literal = some (rl: RecordLiteral) {
                rl.record_type = "Position.impl" &&
                rl.field_definitions.length = 2 &&
                rl.field_definitions.element[0] = some (fd: FieldDefinition) {
                  fd.field_id = "x" &&
                  fd.field_value = some (e: Expression) {
                    e.kind = ExpressionKind.IntLiteral &&
                    e.int_literal = 1
                  }
                } &&
                rl.field_definitions.element[1] = some (fd: FieldDefinition) {
                  fd.field_id = "y" &&
                  fd.field_value = some (e: Expression) {
                    e.kind = ExpressionKind.IntLiteral &&
                    e.int_literal = 2
                  }
                }
              }
            }
          }
        }
      }
    }
  }} &&
csp.guarantees.element[3] = some (ci: ContractItem) {
  ci.name = mk_some<Identifier>("d_not_releasing_weapon_on_arbitrary_location") &&
  ci.expression = some (e: Expression) {
    e.kind = ExpressionKind.Implies &&
    e.implies = some (bo: BinaryOperation) {
      bo.lhs_operand = some (e: Expression) {
        e.kind = ExpressionKind.And &&
        e.and = some (bo: BinaryOperation) {
          bo.lhs_operand = some (e: Expression) {
            e.kind = ExpressionKind.And &&
            e.and = some (bo: BinaryOperation) {
              bo.lhs_operand = some (e: Expression) {
                e.kind = ExpressionKind.Equal &&
                e.equal = some (bo: BinaryOperation) {
                  bo.lhs_operand = some (e: Expression) {
                    e.kind = ExpressionKind.Id &&
                    e.identifier = "mstate"
                  } &&
                  bo.rhs_operand = some (e: Expression) {
                    e.kind = ExpressionKind.Id &&
                    e.identifier = "s_AUTO_FLIGHT_MODE"
                  }
                }
              } &&
              bo.rhs_operand = some (e: Expression) {
                e.kind = ExpressionKind.Id &&
                e.identifier = "payload_performed"
              }
            }
          } &&
          bo.rhs_operand = some (e: Expression) {
            e.kind = ExpressionKind.Equal &&
            e.equal = some (bo: BinaryOperation) {
              bo.lhs_operand = some (e: Expression) {
                e.kind = ExpressionKind.Id &&
                e.identifier = "payloadCMD"
              } &&
              bo.rhs_operand = some (e: Expression) {
                e.kind = ExpressionKind.Id &&
                e.identifier = "Weapon"
              }
            }
          }
        }
      } &&
      bo.rhs_operand = some (e: Expression) {
        e.kind = ExpressionKind.Not &&
        e.not = some (e: Expression) {
          e.kind = ExpressionKind.Call &&
          e.call = some (cll: NodeCall) {
            cll.node = "is_equal" &&
            cll.arguments.length = 2 &&
            cll.arguments.element[0] = some (e: Expression) {
              e.kind = ExpressionKind.Id &&
              e.identifier = "location_source_pos"
            } &&
            cll.arguments.element[1] = some (e: Expression) {
              e.kind = ExpressionKind.RecordLiteral &&
              e.record_literal = some (rl: RecordLiteral) {
                rl.record_type = "Position.impl" &&
                rl.field_definitions.length = 2 &&
                rl.field_definitions.element[0] = some (fd: FieldDefinition) {
                  fd.field_id = "x" &&
                  fd.field_value = some (e: Expression) {
                    e.kind = ExpressionKind.IntLiteral &&
                    e.int_literal = 2
                  }
                } &&
                rl.field_definitions.element[1] = some (fd: FieldDefinition) {
                  fd.field_id = "y" &&
                  fd.field_value = some (e: Expression) {
                    e.kind = ExpressionKind.IntLiteral &&
                    e.int_literal = 2
                  }
                }
              }
            }
          }
        }
      }
    }
  }} &&
csp.guarantees.element[4] = some (ci: ContractItem) {
  ci.name = mk_some<Identifier>("e_appropriate_movement") &&
  ci.expression = some (e: Expression) {
    e.kind = ExpressionKind.Arrow &&
    e.arrow = some (bo: BinaryOperation) {
      bo.lhs_operand = some (e: Expression) {
        e.kind = ExpressionKind.BoolLiteral &&
        e.bool_literal = true
      } &&
      bo.rhs_operand = some (e: Expression) {
        e.kind = ExpressionKind.And &&
        e.and = some (bo: BinaryOperation) {
          bo.lhs_operand = some (e: Expression) {
            e.kind = ExpressionKind.And &&
            e.and = some (bo: BinaryOperation) {
              bo.lhs_operand = some (e: Expression) {
                e.kind = ExpressionKind.And &&
                e.and = some (bo: BinaryOperation) {
                  bo.lhs_operand = some (e: Expression) {
                    e.kind = ExpressionKind.Implies &&
                    e.implies = some (bo: BinaryOperation) {
                      bo.lhs_operand = some (e: Expression) {
                        e.kind = ExpressionKind.And &&
                        e.and = some (bo: BinaryOperation) {
                          bo.lhs_operand = some (e: Expression) {
                            e.kind = ExpressionKind.Equal &&
                            e.equal = some (bo: BinaryOperation) {
                              bo.lhs_operand = some (e: Expression) {
                                e.kind = ExpressionKind.RecordProjection &&
                                e.record_projection = some (rp: RecordProjection) {
                                  rp.record_reference = some (e: Expression) {
                                    e.kind = ExpressionKind.Id &&
                                    e.identifier = "location_source_pos"
                                  } &&
                                  rp.field_id = "x"
                                }
                              } &&
                              bo.rhs_operand = some (e: Expression) {
                                e.kind = ExpressionKind.Pre &&
                                e.pre = some (e: Expression) {
                                  e.kind = ExpressionKind.RecordProjection &&
                                  e.record_projection = some (rp: RecordProjection) {
                                    rp.record_reference = some (e: Expression) {
                                      e.kind = ExpressionKind.Id &&
                                      e.identifier = "location_source_pos"
                                    } &&
                                    rp.field_id = "x"
                                  }
                                }
                              }
                            }
                          } &&
                          bo.rhs_operand = some (e: Expression) {
                            e.kind = ExpressionKind.Equal &&
                            e.equal = some (bo: BinaryOperation) {
                              bo.lhs_operand = some (e: Expression) {
                                e.kind = ExpressionKind.RecordProjection &&
                                e.record_projection = some (rp: RecordProjection) {
                                  rp.record_reference = some (e: Expression) {
                                    e.kind = ExpressionKind.Id &&
                                    e.identifier = "location_source_pos"
                                  } &&
                                  rp.field_id = "y"
                                }
                              } &&
                              bo.rhs_operand = some (e: Expression) {
                                e.kind = ExpressionKind.Plus &&
                                e.plus = some (bo: BinaryOperation) {
                                  bo.lhs_operand = some (e: Expression) {
                                    e.kind = ExpressionKind.Pre &&
                                    e.pre = some (e: Expression) {
                                      e.kind = ExpressionKind.RecordProjection &&
                                      e.record_projection = some (rp: RecordProjection) {
                                        rp.record_reference = some (e: Expression) {
                                          e.kind = ExpressionKind.Id &&
                                          e.identifier = "location_source_pos"
                                        } &&
                                        rp.field_id = "y"
                                      }
                                    }
                                  } &&
                                  bo.rhs_operand = some (e: Expression) {
                                    e.kind = ExpressionKind.IntLiteral &&
                                    e.int_literal = 1
                                  }
                                }
                              }
                            }
                          }
                        }
                      } &&
                      bo.rhs_operand = some (e: Expression) {
                        e.kind = ExpressionKind.Equal &&
                        e.equal = some (bo: BinaryOperation) {
                          bo.lhs_operand = some (e: Expression) {
                            e.kind = ExpressionKind.Pre &&
                            e.pre = some (e: Expression) {
                              e.kind = ExpressionKind.Id &&
                              e.identifier = "location_source_dir"
                            }
                          } &&
                          bo.rhs_operand = some (e: Expression) {
                            e.kind = ExpressionKind.Id &&
                            e.identifier = "North"
                          }
                        }
                      }
                    }
                  } &&
                  bo.rhs_operand = some (e: Expression) {
                    e.kind = ExpressionKind.Implies &&
                    e.implies = some (bo: BinaryOperation) {
                      bo.lhs_operand = some (e: Expression) {
                        e.kind = ExpressionKind.And &&
                        e.and = some (bo: BinaryOperation) {
                          bo.lhs_operand = some (e: Expression) {
                            e.kind = ExpressionKind.Equal &&
                            e.equal = some (bo: BinaryOperation) {
                              bo.lhs_operand = some (e: Expression) {
                                e.kind = ExpressionKind.RecordProjection &&
                                e.record_projection = some (rp: RecordProjection) {
                                  rp.record_reference = some (e: Expression) {
                                    e.kind = ExpressionKind.Id &&
                                    e.identifier = "location_source_pos"
                                  } &&
                                  rp.field_id = "x"
                                }
                              } &&
                              bo.rhs_operand = some (e: Expression) {
                                e.kind = ExpressionKind.Plus &&
                                e.plus = some (bo: BinaryOperation) {
                                  bo.lhs_operand = some (e: Expression) {
                                    e.kind = ExpressionKind.Pre &&
                                    e.pre = some (e: Expression) {
                                      e.kind = ExpressionKind.RecordProjection &&
                                      e.record_projection = some (rp: RecordProjection) {
                                        rp.record_reference = some (e: Expression) {
                                          e.kind = ExpressionKind.Id &&
                                          e.identifier = "location_source_pos"
                                        } &&
                                        rp.field_id = "x"
                                      }
                                    }
                                  } &&
                                  bo.rhs_operand = some (e: Expression) {
                                    e.kind = ExpressionKind.IntLiteral &&
                                    e.int_literal = 1
                                  }
                                }
                              }
                            }
                          } &&
                          bo.rhs_operand = some (e: Expression) {
                            e.kind = ExpressionKind.Equal &&
                            e.equal = some (bo: BinaryOperation) {
                              bo.lhs_operand = some (e: Expression) {
                                e.kind = ExpressionKind.RecordProjection &&
                                e.record_projection = some (rp: RecordProjection) {
                                  rp.record_reference = some (e: Expression) {
                                    e.kind = ExpressionKind.Id &&
                                    e.identifier = "location_source_pos"
                                  } &&
                                  rp.field_id = "y"
                                }
                              } &&
                              bo.rhs_operand = some (e: Expression) {
                                e.kind = ExpressionKind.Pre &&
                                e.pre = some (e: Expression) {
                                  e.kind = ExpressionKind.RecordProjection &&
                                  e.record_projection = some (rp: RecordProjection) {
                                    rp.record_reference = some (e: Expression) {
                                      e.kind = ExpressionKind.Id &&
                                      e.identifier = "location_source_pos"
                                    } &&
                                    rp.field_id = "y"
                                  }
                                }
                              }
                            }
                          }
                        }
                      } &&
                      bo.rhs_operand = some (e: Expression) {
                        e.kind = ExpressionKind.Equal &&
                        e.equal = some (bo: BinaryOperation) {
                          bo.lhs_operand = some (e: Expression) {
                            e.kind = ExpressionKind.Pre &&
                            e.pre = some (e: Expression) {
                              e.kind = ExpressionKind.Id &&
                              e.identifier = "location_source_dir"
                            }
                          } &&
                          bo.rhs_operand = some (e: Expression) {
                            e.kind = ExpressionKind.Id &&
                            e.identifier = "East"
                          }
                        }
                      }
                    }
                  }
                }
              } &&
              bo.rhs_operand = some (e: Expression) {
                e.kind = ExpressionKind.Implies &&
                e.implies = some (bo: BinaryOperation) {
                  bo.lhs_operand = some (e: Expression) {
                    e.kind = ExpressionKind.And &&
                    e.and = some (bo: BinaryOperation) {
                      bo.lhs_operand = some (e: Expression) {
                        e.kind = ExpressionKind.Equal &&
                        e.equal = some (bo: BinaryOperation) {
                          bo.lhs_operand = some (e: Expression) {
                            e.kind = ExpressionKind.RecordProjection &&
                            e.record_projection = some (rp: RecordProjection) {
                              rp.record_reference = some (e: Expression) {
                                e.kind = ExpressionKind.Id &&
                                e.identifier = "location_source_pos"
                              } &&
                              rp.field_id = "x"
                            }
                          } &&
                          bo.rhs_operand = some (e: Expression) {
                            e.kind = ExpressionKind.Minus &&
                            e.minus = some (bo: BinaryOperation) {
                              bo.lhs_operand = some (e: Expression) {
                                e.kind = ExpressionKind.Pre &&
                                e.pre = some (e: Expression) {
                                  e.kind = ExpressionKind.RecordProjection &&
                                  e.record_projection = some (rp: RecordProjection) {
                                    rp.record_reference = some (e: Expression) {
                                      e.kind = ExpressionKind.Id &&
                                      e.identifier = "location_source_pos"
                                    } &&
                                    rp.field_id = "x"
                                  }
                                }
                              } &&
                              bo.rhs_operand = some (e: Expression) {
                                e.kind = ExpressionKind.IntLiteral &&
                                e.int_literal = 1
                              }
                            }
                          }
                        }
                      } &&
                      bo.rhs_operand = some (e: Expression) {
                        e.kind = ExpressionKind.Equal &&
                        e.equal = some (bo: BinaryOperation) {
                          bo.lhs_operand = some (e: Expression) {
                            e.kind = ExpressionKind.RecordProjection &&
                            e.record_projection = some (rp: RecordProjection) {
                              rp.record_reference = some (e: Expression) {
                                e.kind = ExpressionKind.Id &&
                                e.identifier = "location_source_pos"
                              } &&
                              rp.field_id = "y"
                            }
                          } &&
                          bo.rhs_operand = some (e: Expression) {
                            e.kind = ExpressionKind.Pre &&
                            e.pre = some (e: Expression) {
                              e.kind = ExpressionKind.RecordProjection &&
                              e.record_projection = some (rp: RecordProjection) {
                                rp.record_reference = some (e: Expression) {
                                  e.kind = ExpressionKind.Id &&
                                  e.identifier = "location_source_pos"
                                } &&
                                rp.field_id = "y"
                              }
                            }
                          }
                        }
                      }
                    }
                  } &&
                  bo.rhs_operand = some (e: Expression) {
                    e.kind = ExpressionKind.Equal &&
                    e.equal = some (bo: BinaryOperation) {
                      bo.lhs_operand = some (e: Expression) {
                        e.kind = ExpressionKind.Pre &&
                        e.pre = some (e: Expression) {
                          e.kind = ExpressionKind.Id &&
                          e.identifier = "location_source_dir"
                        }
                      } &&
                      bo.rhs_operand = some (e: Expression) {
                        e.kind = ExpressionKind.Id &&
                        e.identifier = "West"
                      }
                    }
                  }
                }
              }
            }
          } &&
          bo.rhs_operand = some (e: Expression) {
            e.kind = ExpressionKind.Implies &&
            e.implies = some (bo: BinaryOperation) {
              bo.lhs_operand = some (e: Expression) {
                e.kind = ExpressionKind.And &&
                e.and = some (bo: BinaryOperation) {
                  bo.lhs_operand = some (e: Expression) {
                    e.kind = ExpressionKind.Equal &&
                    e.equal = some (bo: BinaryOperation) {
                      bo.lhs_operand = some (e: Expression) {
                        e.kind = ExpressionKind.RecordProjection &&
                        e.record_projection = some (rp: RecordProjection) {
                          rp.record_reference = some (e: Expression) {
                            e.kind = ExpressionKind.Id &&
                            e.identifier = "location_source_pos"
                          } &&
                          rp.field_id = "x"
                        }
                      } &&
                      bo.rhs_operand = some (e: Expression) {
                        e.kind = ExpressionKind.Pre &&
                        e.pre = some (e: Expression) {
                          e.kind = ExpressionKind.RecordProjection &&
                          e.record_projection = some (rp: RecordProjection) {
                            rp.record_reference = some (e: Expression) {
                              e.kind = ExpressionKind.Id &&
                              e.identifier = "location_source_pos"
                            } &&
                            rp.field_id = "x"
                          }
                        }
                      }
                    }
                  } &&
                  bo.rhs_operand = some (e: Expression) {
                    e.kind = ExpressionKind.Equal &&
                    e.equal = some (bo: BinaryOperation) {
                      bo.lhs_operand = some (e: Expression) {
                        e.kind = ExpressionKind.RecordProjection &&
                        e.record_projection = some (rp: RecordProjection) {
                          rp.record_reference = some (e: Expression) {
                            e.kind = ExpressionKind.Id &&
                            e.identifier = "location_source_pos"
                          } &&
                          rp.field_id = "y"
                        }
                      } &&
                      bo.rhs_operand = some (e: Expression) {
                        e.kind = ExpressionKind.Minus &&
                        e.minus = some (bo: BinaryOperation) {
                          bo.lhs_operand = some (e: Expression) {
                            e.kind = ExpressionKind.Pre &&
                            e.pre = some (e: Expression) {
                              e.kind = ExpressionKind.RecordProjection &&
                              e.record_projection = some (rp: RecordProjection) {
                                rp.record_reference = some (e: Expression) {
                                  e.kind = ExpressionKind.Id &&
                                  e.identifier = "location_source_pos"
                                } &&
                                rp.field_id = "y"
                              }
                            }
                          } &&
                          bo.rhs_operand = some (e: Expression) {
                            e.kind = ExpressionKind.IntLiteral &&
                            e.int_literal = 1
                          }
                        }
                      }
                    }
                  }
                }
              } &&
              bo.rhs_operand = some (e: Expression) {
                e.kind = ExpressionKind.Equal &&
                e.equal = some (bo: BinaryOperation) {
                  bo.lhs_operand = some (e: Expression) {
                    e.kind = ExpressionKind.Pre &&
                    e.pre = some (e: Expression) {
                      e.kind = ExpressionKind.Id &&
                      e.identifier = "location_source_dir"
                    }
                  } &&
                  bo.rhs_operand = some (e: Expression) {
                    e.kind = ExpressionKind.Id &&
                    e.identifier = "South"
                  }
                }
              }
            }
          }
        }
      }
    }
  }} &&
csp.guarantees.element[5] = some (ci: ContractItem) {
  ci.name = mk_some<Identifier>("f_picture_only_in_PILOT_TARGET_POSITION") &&
  ci.expression = some (e: Expression) {
    e.kind = ExpressionKind.Implies &&
    e.implies = some (bo: BinaryOperation) {
      bo.lhs_operand = some (e: Expression) {
        e.kind = ExpressionKind.And &&
        e.and = some (bo: BinaryOperation) {
          bo.lhs_operand = some (e: Expression) {
            e.kind = ExpressionKind.And &&
            e.and = some (bo: BinaryOperation) {
              bo.lhs_operand = some (e: Expression) {
                e.kind = ExpressionKind.Call &&
                e.call = some (cll: NodeCall) {
                  cll.node = "sofar" &&
                  cll.arguments.length = 1 &&
                  cll.arguments.element[0] = some (e: Expression) {
                    e.kind = ExpressionKind.Equal &&
                    e.equal = some (bo: BinaryOperation) {
                      bo.lhs_operand = some (e: Expression) {
                        e.kind = ExpressionKind.Id &&
                        e.identifier = "mstate"
                      } &&
                      bo.rhs_operand = some (e: Expression) {
                        e.kind = ExpressionKind.Id &&
                        e.identifier = "s_MANUAL_FLIGHT_MODE"
                      }
                    }
                  }
                }
              } &&
              bo.rhs_operand = some (e: Expression) {
                e.kind = ExpressionKind.Id &&
                e.identifier = "payload_performed"
              }
            }
          } &&
          bo.rhs_operand = some (e: Expression) {
            e.kind = ExpressionKind.Equal &&
            e.equal = some (bo: BinaryOperation) {
              bo.lhs_operand = some (e: Expression) {
                e.kind = ExpressionKind.Id &&
                e.identifier = "payloadCMD"
              } &&
              bo.rhs_operand = some (e: Expression) {
                e.kind = ExpressionKind.Id &&
                e.identifier = "Camera"
              }
            }
          }
        }
      } &&
      bo.rhs_operand = some (e: Expression) {
        e.kind = ExpressionKind.Call &&
        e.call = some (cll: NodeCall) {
          cll.node = "is_equal" &&
          cll.arguments.length = 2 &&
          cll.arguments.element[0] = some (e: Expression) {
            e.kind = ExpressionKind.Id &&
            e.identifier = "location_source_pos"
          } &&
          cll.arguments.element[1] = some (e: Expression) {
            e.kind = ExpressionKind.Id &&
            e.identifier = "PILOT_TARGET_POSITION"
          }
        }
      }
    }
  }} &&
csp.guarantees.element[6] = some (ci: ContractItem) {
  ci.name = mk_some<Identifier>("g_pilot_only_takes_picture") &&
  ci.expression = some (e: Expression) {
    e.kind = ExpressionKind.Implies &&
    e.implies = some (bo: BinaryOperation) {
      bo.lhs_operand = some (e: Expression) {
        e.kind = ExpressionKind.And &&
        e.and = some (bo: BinaryOperation) {
          bo.lhs_operand = some (e: Expression) {
            e.kind = ExpressionKind.Call &&
            e.call = some (cll: NodeCall) {
              cll.node = "sofar" &&
              cll.arguments.length = 1 &&
              cll.arguments.element[0] = some (e: Expression) {
                e.kind = ExpressionKind.Equal &&
                e.equal = some (bo: BinaryOperation) {
                  bo.lhs_operand = some (e: Expression) {
                    e.kind = ExpressionKind.Id &&
                    e.identifier = "mstate"
                  } &&
                  bo.rhs_operand = some (e: Expression) {
                    e.kind = ExpressionKind.Id &&
                    e.identifier = "s_MANUAL_FLIGHT_MODE"
                  }
                }
              }
            }
          } &&
          bo.rhs_operand = some (e: Expression) {
            e.kind = ExpressionKind.Id &&
            e.identifier = "payload_performed"
          }
        }
      } &&
      bo.rhs_operand = some (e: Expression) {
        e.kind = ExpressionKind.Equal &&
        e.equal = some (bo: BinaryOperation) {
          bo.lhs_operand = some (e: Expression) {
            e.kind = ExpressionKind.Id &&
            e.identifier = "payloadCMD"
          } &&
          bo.rhs_operand = some (e: Expression) {
            e.kind = ExpressionKind.Id &&
            e.identifier = "Camera"
          }
        }
      }
    }
  }} &&csp.modes.length = 0 &&csp.imports.length = 0})} &&
m.dataflow_code = mk_some<LustreProgram>(some (dfm: LustreProgram) {
  dfm.type_declarations.length = 0 &&
  dfm.constant_declarations.length = 27 &&
  dfm.constant_declarations.element[0] = some (ctd: ConstantDeclaration) {
    ctd.name = "INITIAL_BATTERY_LEVEL" &&
    ctd.dtype = IntegerType &&
    ctd.definition = mk_some<Expression>(some (e: Expression) {
      e.kind = ExpressionKind.IntLiteral &&
      e.int_literal = 100
    })
  } &&
  dfm.constant_declarations.element[1] = some (ctd: ConstantDeclaration) {
    ctd.name = "BATTERY_LEVEL_THRESHOLD" &&
    ctd.dtype = IntegerType &&
    ctd.definition = mk_some<Expression>(some (e: Expression) {
      e.kind = ExpressionKind.IntLiteral &&
      e.int_literal = 20
    })
  } &&
  dfm.constant_declarations.element[2] = some (ctd: ConstantDeclaration) {
    ctd.name = "BATTERY_CONSUMPTION_LOWER_BOUND" &&
    ctd.dtype = IntegerType &&
    ctd.definition = mk_some<Expression>(some (e: Expression) {
      e.kind = ExpressionKind.IntLiteral &&
      e.int_literal = 1
    })
  } &&
  dfm.constant_declarations.element[3] = some (ctd: ConstantDeclaration) {
    ctd.name = "BATTERY_CONSUMPTION_UPPER_BOUND" &&
    ctd.dtype = IntegerType &&
    ctd.definition = mk_some<Expression>(some (e: Expression) {
      e.kind = ExpressionKind.IntLiteral &&
      e.int_literal = 4
    })
  } &&
  dfm.constant_declarations.element[4] = some (ctd: ConstantDeclaration) {
    ctd.name = "RC_RECEIVER_TOLERANCE_LEVEL" &&
    ctd.dtype = IntegerType &&
    ctd.definition = mk_some<Expression>(some (e: Expression) {
      e.kind = ExpressionKind.IntLiteral &&
      e.int_literal = 1
    })
  } &&
  dfm.constant_declarations.element[5] = some (ctd: ConstantDeclaration) {
    ctd.name = "LAUNCH_POS" &&
    ctd.dtype = some (dt: DataType) {
      dt.kind = DataTypeKind.UserDefined &&
      dt.user_defined_type = m.type_declarations.element[3]
  } &&
  ctd.definition = mk_some<Expression>(some (e: Expression) {
    e.kind = ExpressionKind.RecordLiteral &&
    e.record_literal = some (rl: RecordLiteral) {
      rl.record_type = "Position.impl" &&
      rl.field_definitions.length = 2 &&
      rl.field_definitions.element[0] = some (fd: FieldDefinition) {
        fd.field_id = "x" &&
        fd.field_value = some (e: Expression) {
          e.kind = ExpressionKind.IntLiteral &&
          e.int_literal = 0
        }
      } &&
      rl.field_definitions.element[1] = some (fd: FieldDefinition) {
        fd.field_id = "y" &&
        fd.field_value = some (e: Expression) {
          e.kind = ExpressionKind.IntLiteral &&
          e.int_literal = 0
        }
      }
    }
  })} &&
dfm.constant_declarations.element[6] = some (ctd: ConstantDeclaration) {
  ctd.name = "LAUNCH_DIR" &&
  ctd.dtype = some (dt: DataType) {
    dt.kind = DataTypeKind.UserDefined &&
    dt.user_defined_type = m.type_declarations.element[1]} &&
ctd.definition = mk_some<Expression>(some (e: Expression) {
  e.kind = ExpressionKind.Id &&
  e.identifier = "North"})} &&
dfm.constant_declarations.element[7] = some (ctd: ConstantDeclaration) {
  ctd.name = "PILOT_TARGET_POSITION" &&
  ctd.dtype = some (dt: DataType) {
    dt.kind = DataTypeKind.UserDefined &&
    dt.user_defined_type = m.type_declarations.element[3]} &&
ctd.definition = mk_some<Expression>(some (e: Expression) {
  e.kind = ExpressionKind.RecordLiteral &&
  e.record_literal = some (rl: RecordLiteral) {
    rl.record_type = "Position.impl" &&
    rl.field_definitions.length = 2 &&
    rl.field_definitions.element[0] = some (fd: FieldDefinition) {
      fd.field_id = "x" &&
      fd.field_value = some (e: Expression) {
        e.kind = ExpressionKind.Negative &&
        e.negative = some (e: Expression) {
          e.kind = ExpressionKind.IntLiteral &&
          e.int_literal = 2
        }
      }
    } &&
    rl.field_definitions.element[1] = some (fd: FieldDefinition) {
      fd.field_id = "y" &&
      fd.field_value = some (e: Expression) {
        e.kind = ExpressionKind.IntLiteral &&
        e.int_literal = 2
      }
    }
  }})} &&
dfm.constant_declarations.element[8] = some (ctd: ConstantDeclaration) {
  ctd.name = "c_North" &&
  ctd.dtype = some (dt: DataType) {
    dt.kind = DataTypeKind.UserDefined &&
    dt.user_defined_type = m.type_declarations.element[1]} &&
ctd.definition = mk_some<Expression>(some (e: Expression) {
  e.kind = ExpressionKind.Id &&
  e.identifier = "North"})} &&
dfm.constant_declarations.element[9] = some (ctd: ConstantDeclaration) {
  ctd.name = "c_East" &&
  ctd.dtype = some (dt: DataType) {
    dt.kind = DataTypeKind.UserDefined &&
    dt.user_defined_type = m.type_declarations.element[1]} &&
ctd.definition = mk_some<Expression>(some (e: Expression) {
  e.kind = ExpressionKind.Id &&
  e.identifier = "East"})} &&
dfm.constant_declarations.element[10] = some (ctd: ConstantDeclaration) {
  ctd.name = "c_West" &&
  ctd.dtype = some (dt: DataType) {
    dt.kind = DataTypeKind.UserDefined &&
    dt.user_defined_type = m.type_declarations.element[1]} &&
ctd.definition = mk_some<Expression>(some (e: Expression) {
  e.kind = ExpressionKind.Id &&
  e.identifier = "West"})} &&
dfm.constant_declarations.element[11] = some (ctd: ConstantDeclaration) {
  ctd.name = "c_South" &&
  ctd.dtype = some (dt: DataType) {
    dt.kind = DataTypeKind.UserDefined &&
    dt.user_defined_type = m.type_declarations.element[1]} &&
ctd.definition = mk_some<Expression>(some (e: Expression) {
  e.kind = ExpressionKind.Id &&
  e.identifier = "South"})} &&
dfm.constant_declarations.element[12] = some (ctd: ConstantDeclaration) {
  ctd.name = "c_Y_0" &&
  ctd.dtype = some (dt: DataType) {
    dt.kind = DataTypeKind.UserDefined &&
    dt.user_defined_type = m.type_declarations.element[8]} &&
ctd.definition = mk_some<Expression>(some (e: Expression) {
  e.kind = ExpressionKind.Id &&
  e.identifier = "Y_0"})} &&
dfm.constant_declarations.element[13] = some (ctd: ConstantDeclaration) {
  ctd.name = "c_Y_90" &&
  ctd.dtype = some (dt: DataType) {
    dt.kind = DataTypeKind.UserDefined &&
    dt.user_defined_type = m.type_declarations.element[8]} &&
ctd.definition = mk_some<Expression>(some (e: Expression) {
  e.kind = ExpressionKind.Id &&
  e.identifier = "Y_90"})} &&
dfm.constant_declarations.element[14] = some (ctd: ConstantDeclaration) {
  ctd.name = "c_Y_180" &&
  ctd.dtype = some (dt: DataType) {
    dt.kind = DataTypeKind.UserDefined &&
    dt.user_defined_type = m.type_declarations.element[8]} &&
ctd.definition = mk_some<Expression>(some (e: Expression) {
  e.kind = ExpressionKind.Id &&
  e.identifier = "Y_180"})} &&
dfm.constant_declarations.element[15] = some (ctd: ConstantDeclaration) {
  ctd.name = "c_Y_270" &&
  ctd.dtype = some (dt: DataType) {
    dt.kind = DataTypeKind.UserDefined &&
    dt.user_defined_type = m.type_declarations.element[8]} &&
ctd.definition = mk_some<Expression>(some (e: Expression) {
  e.kind = ExpressionKind.Id &&
  e.identifier = "Y_270"})} &&
dfm.constant_declarations.element[16] = some (ctd: ConstantDeclaration) {
  ctd.name = "c_IncreaseX" &&
  ctd.dtype = some (dt: DataType) {
    dt.kind = DataTypeKind.UserDefined &&
    dt.user_defined_type = m.type_declarations.element[6]} &&
ctd.definition = mk_some<Expression>(some (e: Expression) {
  e.kind = ExpressionKind.Id &&
  e.identifier = "IncreaseX"})} &&
dfm.constant_declarations.element[17] = some (ctd: ConstantDeclaration) {
  ctd.name = "c_IncreaseY" &&
  ctd.dtype = some (dt: DataType) {
    dt.kind = DataTypeKind.UserDefined &&
    dt.user_defined_type = m.type_declarations.element[6]} &&
ctd.definition = mk_some<Expression>(some (e: Expression) {
  e.kind = ExpressionKind.Id &&
  e.identifier = "IncreaseY"})} &&
dfm.constant_declarations.element[18] = some (ctd: ConstantDeclaration) {
  ctd.name = "c_DecreaseX" &&
  ctd.dtype = some (dt: DataType) {
    dt.kind = DataTypeKind.UserDefined &&
    dt.user_defined_type = m.type_declarations.element[6]} &&
ctd.definition = mk_some<Expression>(some (e: Expression) {
  e.kind = ExpressionKind.Id &&
  e.identifier = "DecreaseX"})} &&
dfm.constant_declarations.element[19] = some (ctd: ConstantDeclaration) {
  ctd.name = "c_DecreaseY" &&
  ctd.dtype = some (dt: DataType) {
    dt.kind = DataTypeKind.UserDefined &&
    dt.user_defined_type = m.type_declarations.element[6]} &&
ctd.definition = mk_some<Expression>(some (e: Expression) {
  e.kind = ExpressionKind.Id &&
  e.identifier = "DecreaseY"})} &&
dfm.constant_declarations.element[20] = some (ctd: ConstantDeclaration) {
  ctd.name = "c_IncreaseYaw" &&
  ctd.dtype = some (dt: DataType) {
    dt.kind = DataTypeKind.UserDefined &&
    dt.user_defined_type = m.type_declarations.element[6]} &&
ctd.definition = mk_some<Expression>(some (e: Expression) {
  e.kind = ExpressionKind.Id &&
  e.identifier = "IncreaseYaw"})} &&
dfm.constant_declarations.element[21] = some (ctd: ConstantDeclaration) {
  ctd.name = "c_DecreaseYaw" &&
  ctd.dtype = some (dt: DataType) {
    dt.kind = DataTypeKind.UserDefined &&
    dt.user_defined_type = m.type_declarations.element[6]} &&
ctd.definition = mk_some<Expression>(some (e: Expression) {
  e.kind = ExpressionKind.Id &&
  e.identifier = "DecreaseYaw"})} &&
dfm.constant_declarations.element[22] = some (ctd: ConstantDeclaration) {
  ctd.name = "c_Move_Forward" &&
  ctd.dtype = some (dt: DataType) {
    dt.kind = DataTypeKind.UserDefined &&
    dt.user_defined_type = m.type_declarations.element[0]} &&
ctd.definition = mk_some<Expression>(some (e: Expression) {
  e.kind = ExpressionKind.Id &&
  e.identifier = "Move_Forward"})} &&
dfm.constant_declarations.element[23] = some (ctd: ConstantDeclaration) {
  ctd.name = "c_Turn_Left" &&
  ctd.dtype = some (dt: DataType) {
    dt.kind = DataTypeKind.UserDefined &&
    dt.user_defined_type = m.type_declarations.element[0]} &&
ctd.definition = mk_some<Expression>(some (e: Expression) {
  e.kind = ExpressionKind.Id &&
  e.identifier = "Turn_Left"})} &&
dfm.constant_declarations.element[24] = some (ctd: ConstantDeclaration) {
  ctd.name = "c_Stop" &&
  ctd.dtype = some (dt: DataType) {
    dt.kind = DataTypeKind.UserDefined &&
    dt.user_defined_type = m.type_declarations.element[0]} &&
ctd.definition = mk_some<Expression>(some (e: Expression) {
  e.kind = ExpressionKind.Id &&
  e.identifier = "Stop"})} &&
dfm.constant_declarations.element[25] = some (ctd: ConstantDeclaration) {
  ctd.name = "c_None" &&
  ctd.dtype = some (dt: DataType) {
    dt.kind = DataTypeKind.UserDefined &&
    dt.user_defined_type = m.type_declarations.element[2]} &&
ctd.definition = mk_some<Expression>(some (e: Expression) {
  e.kind = ExpressionKind.Id &&
  e.identifier = "None"})} &&
dfm.constant_declarations.element[26] = some (ctd: ConstantDeclaration) {
  ctd.name = "c_Camera" &&
  ctd.dtype = some (dt: DataType) {
    dt.kind = DataTypeKind.UserDefined &&
    dt.user_defined_type = m.type_declarations.element[2]} &&
ctd.definition = mk_some<Expression>(some (e: Expression) {
  e.kind = ExpressionKind.Id &&
  e.identifier = "Camera"})} &&dfm.contract_declarations.length = 0 &&
dfm.node_declarations.length = 9 &&
dfm.node_declarations.element[0] = some (nd: Node) {
  nd.name = "duration" &&
  nd.is_function = false &&
  nd.is_main = false &&
  nd.input_parameters.length = 1 &&
  nd.input_parameters.element[0] = some (ip: InputParameter) {
    ip.name = "p" &&
    ip.dtype = BoolType &&
    ip.is_constant = false
  } &&
  nd.output_parameters.length = 1 &&
  nd.output_parameters.element[0] = some (op: OutputParameter) {
    op.name = "r" &&
    op.dtype = IntegerType
  } &&
  nd.contract = mk_none<ContractSpec> &&
  nd.body = mk_some<NodeBody>(some (nb: NodeBody) {
    nb.constant_declarations.length = 0 &&
    nb.variable_declarations.length = 0 &&
    nb.assertions.length = 0 &&
    nb.equations.length = 1 &&
    nb.equations.element[0] = some (eq: NodeEquation) {
      eq.lhs.length = 1 &&
      eq.lhs.element[0] = "r" &&
      eq.rhs = some (e: Expression) {
        e.kind = ExpressionKind.Arrow &&
        e.arrow = some (bo: BinaryOperation) {
          bo.lhs_operand = some (e: Expression) {
            e.kind = ExpressionKind.ConditionalExpr &&
            e.conditional_expr = some (ite: IfThenElse) {
              ite.condition = some (e: Expression) {
                e.kind = ExpressionKind.Not &&
                e.not = some (e: Expression) {
                  e.kind = ExpressionKind.Id &&
                  e.identifier = "p"
                }
              } &&
              ite.thenBranch = some (e: Expression) {
                e.kind = ExpressionKind.IntLiteral &&
                e.int_literal = 1
              } &&
              ite.elseBranch = some (e: Expression) {
                e.kind = ExpressionKind.IntLiteral &&
                e.int_literal = 0
              }
            }
          } &&
          bo.rhs_operand = some (e: Expression) {
            e.kind = ExpressionKind.ConditionalExpr &&
            e.conditional_expr = some (ite: IfThenElse) {
              ite.condition = some (e: Expression) {
                e.kind = ExpressionKind.Not &&
                e.not = some (e: Expression) {
                  e.kind = ExpressionKind.Id &&
                  e.identifier = "p"
                }
              } &&
              ite.thenBranch = some (e: Expression) {
                e.kind = ExpressionKind.Plus &&
                e.plus = some (bo: BinaryOperation) {
                  bo.lhs_operand = some (e: Expression) {
                    e.kind = ExpressionKind.Pre &&
                    e.pre = some (e: Expression) {
                      e.kind = ExpressionKind.Id &&
                      e.identifier = "r"
                    }
                  } &&
                  bo.rhs_operand = some (e: Expression) {
                    e.kind = ExpressionKind.IntLiteral &&
                    e.int_literal = 1
                  }
                }
              } &&
              ite.elseBranch = some (e: Expression) {
                e.kind = ExpressionKind.IntLiteral &&
                e.int_literal = 0
              }
            }
          }
        }
      }
    } &&
    nb.properties.length = 0
  })} &&
dfm.node_declarations.element[1] = some (nd: Node) {
  nd.name = "is_equal" &&
  nd.is_function = false &&
  nd.is_main = false &&
  nd.input_parameters.length = 2 &&
  nd.input_parameters.element[0] = some (ip: InputParameter) {
    ip.name = "pos1" &&
    ip.dtype = some (dt: DataType) {
      dt.kind = DataTypeKind.UserDefined &&
      dt.user_defined_type = m.type_declarations.element[3]
  } &&
  ip.is_constant = false} &&
nd.input_parameters.element[1] = some (ip: InputParameter) {
  ip.name = "pos2" &&
  ip.dtype = some (dt: DataType) {
    dt.kind = DataTypeKind.UserDefined &&
    dt.user_defined_type = m.type_declarations.element[3]} &&
ip.is_constant = false} &&nd.output_parameters.length = 1 &&
nd.output_parameters.element[0] = some (op: OutputParameter) {
  op.name = "z" &&
  op.dtype = BoolType} &&nd.contract = mk_none<ContractSpec> &&
nd.body = mk_some<NodeBody>(some (nb: NodeBody) {
  nb.constant_declarations.length = 0 &&
  nb.variable_declarations.length = 0 &&
  nb.assertions.length = 0 &&
  nb.equations.length = 1 &&
  nb.equations.element[0] = some (eq: NodeEquation) {
    eq.lhs.length = 1 &&
    eq.lhs.element[0] = "z" &&
    eq.rhs = some (e: Expression) {
      e.kind = ExpressionKind.And &&
      e.and = some (bo: BinaryOperation) {
        bo.lhs_operand = some (e: Expression) {
          e.kind = ExpressionKind.Equal &&
          e.equal = some (bo: BinaryOperation) {
            bo.lhs_operand = some (e: Expression) {
              e.kind = ExpressionKind.RecordProjection &&
              e.record_projection = some (rp: RecordProjection) {
                rp.record_reference = some (e: Expression) {
                  e.kind = ExpressionKind.Id &&
                  e.identifier = "pos1"
                } &&
                rp.field_id = "x"
              }
            } &&
            bo.rhs_operand = some (e: Expression) {
              e.kind = ExpressionKind.RecordProjection &&
              e.record_projection = some (rp: RecordProjection) {
                rp.record_reference = some (e: Expression) {
                  e.kind = ExpressionKind.Id &&
                  e.identifier = "pos2"
                } &&
                rp.field_id = "x"
              }
            }
          }
        } &&
        bo.rhs_operand = some (e: Expression) {
          e.kind = ExpressionKind.Equal &&
          e.equal = some (bo: BinaryOperation) {
            bo.lhs_operand = some (e: Expression) {
              e.kind = ExpressionKind.RecordProjection &&
              e.record_projection = some (rp: RecordProjection) {
                rp.record_reference = some (e: Expression) {
                  e.kind = ExpressionKind.Id &&
                  e.identifier = "pos1"
                } &&
                rp.field_id = "y"
              }
            } &&
            bo.rhs_operand = some (e: Expression) {
              e.kind = ExpressionKind.RecordProjection &&
              e.record_projection = some (rp: RecordProjection) {
                rp.record_reference = some (e: Expression) {
                  e.kind = ExpressionKind.Id &&
                  e.identifier = "pos2"
                } &&
                rp.field_id = "y"
              }
            }
          }
        }
      }
    }
  } &&
  nb.properties.length = 0})} &&
dfm.node_declarations.element[2] = some (nd: Node) {
  nd.name = "yaw2dir" &&
  nd.is_function = false &&
  nd.is_main = false &&
  nd.input_parameters.length = 1 &&
  nd.input_parameters.element[0] = some (ip: InputParameter) {
    ip.name = "yaw" &&
    ip.dtype = some (dt: DataType) {
      dt.kind = DataTypeKind.UserDefined &&
      dt.user_defined_type = m.type_declarations.element[8]
  } &&
  ip.is_constant = false} &&nd.output_parameters.length = 1 &&
nd.output_parameters.element[0] = some (op: OutputParameter) {
  op.name = "dir" &&
  op.dtype = some (dt: DataType) {
    dt.kind = DataTypeKind.UserDefined &&
    dt.user_defined_type = m.type_declarations.element[1]}} &&
nd.contract = mk_none<ContractSpec> &&
nd.body = mk_some<NodeBody>(some (nb: NodeBody) {
  nb.constant_declarations.length = 0 &&
  nb.variable_declarations.length = 0 &&
  nb.assertions.length = 0 &&
  nb.equations.length = 1 &&
  nb.equations.element[0] = some (eq: NodeEquation) {
    eq.lhs.length = 1 &&
    eq.lhs.element[0] = "dir" &&
    eq.rhs = some (e: Expression) {
      e.kind = ExpressionKind.ConditionalExpr &&
      e.conditional_expr = some (ite: IfThenElse) {
        ite.condition = some (e: Expression) {
          e.kind = ExpressionKind.Equal &&
          e.equal = some (bo: BinaryOperation) {
            bo.lhs_operand = some (e: Expression) {
              e.kind = ExpressionKind.Id &&
              e.identifier = "yaw"
            } &&
            bo.rhs_operand = some (e: Expression) {
              e.kind = ExpressionKind.Id &&
              e.identifier = "c_Y_0"
            }
          }
        } &&
        ite.thenBranch = some (e: Expression) {
          e.kind = ExpressionKind.Id &&
          e.identifier = "c_North"
        } &&
        ite.elseBranch = some (e: Expression) {
          e.kind = ExpressionKind.ConditionalExpr &&
          e.conditional_expr = some (ite: IfThenElse) {
            ite.condition = some (e: Expression) {
              e.kind = ExpressionKind.Equal &&
              e.equal = some (bo: BinaryOperation) {
                bo.lhs_operand = some (e: Expression) {
                  e.kind = ExpressionKind.Id &&
                  e.identifier = "yaw"
                } &&
                bo.rhs_operand = some (e: Expression) {
                  e.kind = ExpressionKind.Id &&
                  e.identifier = "c_Y_90"
                }
              }
            } &&
            ite.thenBranch = some (e: Expression) {
              e.kind = ExpressionKind.Id &&
              e.identifier = "c_East"
            } &&
            ite.elseBranch = some (e: Expression) {
              e.kind = ExpressionKind.ConditionalExpr &&
              e.conditional_expr = some (ite: IfThenElse) {
                ite.condition = some (e: Expression) {
                  e.kind = ExpressionKind.Equal &&
                  e.equal = some (bo: BinaryOperation) {
                    bo.lhs_operand = some (e: Expression) {
                      e.kind = ExpressionKind.Id &&
                      e.identifier = "yaw"
                    } &&
                    bo.rhs_operand = some (e: Expression) {
                      e.kind = ExpressionKind.Id &&
                      e.identifier = "c_Y_180"
                    }
                  }
                } &&
                ite.thenBranch = some (e: Expression) {
                  e.kind = ExpressionKind.Id &&
                  e.identifier = "c_South"
                } &&
                ite.elseBranch = some (e: Expression) {
                  e.kind = ExpressionKind.Id &&
                  e.identifier = "c_West"
                }
              }
            }
          }
        }
      }
    }
  } &&
  nb.properties.length = 0})} &&
dfm.node_declarations.element[3] = some (nd: Node) {
  nd.name = "set_task_status" &&
  nd.is_function = false &&
  nd.is_main = false &&
  nd.input_parameters.length = 2 &&
  nd.input_parameters.element[0] = some (ip: InputParameter) {
    ip.name = "curr_task" &&
    ip.dtype = some (dt: DataType) {
      dt.kind = DataTypeKind.UserDefined &&
      dt.user_defined_type = m.type_declarations.element[5]
  } &&
  ip.is_constant = false} &&
nd.input_parameters.element[1] = some (ip: InputParameter) {
  ip.name = "new_status" &&
  ip.dtype = some (dt: DataType) {
    dt.kind = DataTypeKind.UserDefined &&
    dt.user_defined_type = m.type_declarations.element[4]} &&
ip.is_constant = false} &&nd.output_parameters.length = 1 &&
nd.output_parameters.element[0] = some (op: OutputParameter) {
  op.name = "new_task" &&
  op.dtype = some (dt: DataType) {
    dt.kind = DataTypeKind.UserDefined &&
    dt.user_defined_type = m.type_declarations.element[5]}} &&
nd.contract = mk_none<ContractSpec> &&
nd.body = mk_some<NodeBody>(some (nb: NodeBody) {
  nb.constant_declarations.length = 0 &&
  nb.variable_declarations.length = 0 &&
  nb.assertions.length = 0 &&
  nb.equations.length = 1 &&
  nb.equations.element[0] = some (eq: NodeEquation) {
    eq.lhs.length = 1 &&
    eq.lhs.element[0] = "new_task" &&
    eq.rhs = some (e: Expression) {
      e.kind = ExpressionKind.RecordLiteral &&
      e.record_literal = some (rl: RecordLiteral) {
        rl.record_type = "Task.impl" &&
        rl.field_definitions.length = 3 &&
        rl.field_definitions.element[0] = some (fd: FieldDefinition) {
          fd.field_id = "waypoint" &&
          fd.field_value = some (e: Expression) {
            e.kind = ExpressionKind.RecordProjection &&
            e.record_projection = some (rp: RecordProjection) {
              rp.record_reference = some (e: Expression) {
                e.kind = ExpressionKind.Id &&
                e.identifier = "curr_task"
              } &&
              rp.field_id = "waypoint"
            }
          }
        } &&
        rl.field_definitions.element[1] = some (fd: FieldDefinition) {
          fd.field_id = "action" &&
          fd.field_value = some (e: Expression) {
            e.kind = ExpressionKind.RecordProjection &&
            e.record_projection = some (rp: RecordProjection) {
              rp.record_reference = some (e: Expression) {
                e.kind = ExpressionKind.Id &&
                e.identifier = "curr_task"
              } &&
              rp.field_id = "action"
            }
          }
        } &&
        rl.field_definitions.element[2] = some (fd: FieldDefinition) {
          fd.field_id = "status" &&
          fd.field_value = some (e: Expression) {
            e.kind = ExpressionKind.Id &&
            e.identifier = "new_status"
          }
        }
      }
    }
  } &&
  nb.properties.length = 0})} &&
dfm.node_declarations.element[4] = some (nd: Node) {
  nd.name = "LocationSource_Pos" &&
  nd.is_function = false &&
  nd.is_main = false &&
  nd.input_parameters.length = 1 &&
  nd.input_parameters.element[0] = some (ip: InputParameter) {
    ip.name = "cmd" &&
    ip.dtype = some (dt: DataType) {
      dt.kind = DataTypeKind.UserDefined &&
      dt.user_defined_type = m.type_declarations.element[6]
  } &&
  ip.is_constant = false} &&nd.output_parameters.length = 1 &&
nd.output_parameters.element[0] = some (op: OutputParameter) {
  op.name = "GPS_pos" &&
  op.dtype = some (dt: DataType) {
    dt.kind = DataTypeKind.UserDefined &&
    dt.user_defined_type = m.type_declarations.element[3]}} &&
nd.contract = mk_none<ContractSpec> &&
nd.body = mk_some<NodeBody>(some (nb: NodeBody) {
  nb.constant_declarations.length = 0 &&
  nb.variable_declarations.length = 3 &&
  nb.variable_declarations.element[0] = some (vd: VariableDeclaration) {
    vd.name = "nextPos" &&
    vd.dtype = some (dt: DataType) {
      dt.kind = DataTypeKind.UserDefined &&
      dt.user_defined_type = m.type_declarations.element[3]
  }} &&
nb.variable_declarations.element[1] = some (vd: VariableDeclaration) {
  vd.name = "x" &&
  vd.dtype = IntegerType} &&
nb.variable_declarations.element[2] = some (vd: VariableDeclaration) {
  vd.name = "y" &&
  vd.dtype = IntegerType} &&nb.assertions.length = 0 &&
nb.equations.length = 4 &&
nb.equations.element[0] = some (eq: NodeEquation) {
  eq.lhs.length = 1 &&
  eq.lhs.element[0] = "GPS_pos" &&
  eq.rhs = some (e: Expression) {
    e.kind = ExpressionKind.Arrow &&
    e.arrow = some (bo: BinaryOperation) {
      bo.lhs_operand = some (e: Expression) {
        e.kind = ExpressionKind.Id &&
        e.identifier = "LAUNCH_POS"
      } &&
      bo.rhs_operand = some (e: Expression) {
        e.kind = ExpressionKind.Pre &&
        e.pre = some (e: Expression) {
          e.kind = ExpressionKind.Id &&
          e.identifier = "nextPos"
        }
      }
    }
  }} &&
nb.equations.element[1] = some (eq: NodeEquation) {
  eq.lhs.length = 1 &&
  eq.lhs.element[0] = "x" &&
  eq.rhs = some (e: Expression) {
    e.kind = ExpressionKind.ConditionalExpr &&
    e.conditional_expr = some (ite: IfThenElse) {
      ite.condition = some (e: Expression) {
        e.kind = ExpressionKind.Equal &&
        e.equal = some (bo: BinaryOperation) {
          bo.lhs_operand = some (e: Expression) {
            e.kind = ExpressionKind.Id &&
            e.identifier = "cmd"
          } &&
          bo.rhs_operand = some (e: Expression) {
            e.kind = ExpressionKind.Id &&
            e.identifier = "c_IncreaseX"
          }
        }
      } &&
      ite.thenBranch = some (e: Expression) {
        e.kind = ExpressionKind.Plus &&
        e.plus = some (bo: BinaryOperation) {
          bo.lhs_operand = some (e: Expression) {
            e.kind = ExpressionKind.RecordProjection &&
            e.record_projection = some (rp: RecordProjection) {
              rp.record_reference = some (e: Expression) {
                e.kind = ExpressionKind.Id &&
                e.identifier = "GPS_pos"
              } &&
              rp.field_id = "x"
            }
          } &&
          bo.rhs_operand = some (e: Expression) {
            e.kind = ExpressionKind.IntLiteral &&
            e.int_literal = 1
          }
        }
      } &&
      ite.elseBranch = some (e: Expression) {
        e.kind = ExpressionKind.ConditionalExpr &&
        e.conditional_expr = some (ite: IfThenElse) {
          ite.condition = some (e: Expression) {
            e.kind = ExpressionKind.Equal &&
            e.equal = some (bo: BinaryOperation) {
              bo.lhs_operand = some (e: Expression) {
                e.kind = ExpressionKind.Id &&
                e.identifier = "cmd"
              } &&
              bo.rhs_operand = some (e: Expression) {
                e.kind = ExpressionKind.Id &&
                e.identifier = "c_DecreaseX"
              }
            }
          } &&
          ite.thenBranch = some (e: Expression) {
            e.kind = ExpressionKind.Minus &&
            e.minus = some (bo: BinaryOperation) {
              bo.lhs_operand = some (e: Expression) {
                e.kind = ExpressionKind.RecordProjection &&
                e.record_projection = some (rp: RecordProjection) {
                  rp.record_reference = some (e: Expression) {
                    e.kind = ExpressionKind.Id &&
                    e.identifier = "GPS_pos"
                  } &&
                  rp.field_id = "x"
                }
              } &&
              bo.rhs_operand = some (e: Expression) {
                e.kind = ExpressionKind.IntLiteral &&
                e.int_literal = 1
              }
            }
          } &&
          ite.elseBranch = some (e: Expression) {
            e.kind = ExpressionKind.RecordProjection &&
            e.record_projection = some (rp: RecordProjection) {
              rp.record_reference = some (e: Expression) {
                e.kind = ExpressionKind.Id &&
                e.identifier = "GPS_pos"
              } &&
              rp.field_id = "x"
            }
          }
        }
      }
    }
  }} &&
nb.equations.element[2] = some (eq: NodeEquation) {
  eq.lhs.length = 1 &&
  eq.lhs.element[0] = "y" &&
  eq.rhs = some (e: Expression) {
    e.kind = ExpressionKind.ConditionalExpr &&
    e.conditional_expr = some (ite: IfThenElse) {
      ite.condition = some (e: Expression) {
        e.kind = ExpressionKind.Equal &&
        e.equal = some (bo: BinaryOperation) {
          bo.lhs_operand = some (e: Expression) {
            e.kind = ExpressionKind.Id &&
            e.identifier = "cmd"
          } &&
          bo.rhs_operand = some (e: Expression) {
            e.kind = ExpressionKind.Id &&
            e.identifier = "c_IncreaseY"
          }
        }
      } &&
      ite.thenBranch = some (e: Expression) {
        e.kind = ExpressionKind.Plus &&
        e.plus = some (bo: BinaryOperation) {
          bo.lhs_operand = some (e: Expression) {
            e.kind = ExpressionKind.RecordProjection &&
            e.record_projection = some (rp: RecordProjection) {
              rp.record_reference = some (e: Expression) {
                e.kind = ExpressionKind.Id &&
                e.identifier = "GPS_pos"
              } &&
              rp.field_id = "y"
            }
          } &&
          bo.rhs_operand = some (e: Expression) {
            e.kind = ExpressionKind.IntLiteral &&
            e.int_literal = 1
          }
        }
      } &&
      ite.elseBranch = some (e: Expression) {
        e.kind = ExpressionKind.ConditionalExpr &&
        e.conditional_expr = some (ite: IfThenElse) {
          ite.condition = some (e: Expression) {
            e.kind = ExpressionKind.Equal &&
            e.equal = some (bo: BinaryOperation) {
              bo.lhs_operand = some (e: Expression) {
                e.kind = ExpressionKind.Id &&
                e.identifier = "cmd"
              } &&
              bo.rhs_operand = some (e: Expression) {
                e.kind = ExpressionKind.Id &&
                e.identifier = "c_DecreaseY"
              }
            }
          } &&
          ite.thenBranch = some (e: Expression) {
            e.kind = ExpressionKind.Minus &&
            e.minus = some (bo: BinaryOperation) {
              bo.lhs_operand = some (e: Expression) {
                e.kind = ExpressionKind.RecordProjection &&
                e.record_projection = some (rp: RecordProjection) {
                  rp.record_reference = some (e: Expression) {
                    e.kind = ExpressionKind.Id &&
                    e.identifier = "GPS_pos"
                  } &&
                  rp.field_id = "y"
                }
              } &&
              bo.rhs_operand = some (e: Expression) {
                e.kind = ExpressionKind.IntLiteral &&
                e.int_literal = 1
              }
            }
          } &&
          ite.elseBranch = some (e: Expression) {
            e.kind = ExpressionKind.RecordProjection &&
            e.record_projection = some (rp: RecordProjection) {
              rp.record_reference = some (e: Expression) {
                e.kind = ExpressionKind.Id &&
                e.identifier = "GPS_pos"
              } &&
              rp.field_id = "y"
            }
          }
        }
      }
    }
  }} &&
nb.equations.element[3] = some (eq: NodeEquation) {
  eq.lhs.length = 1 &&
  eq.lhs.element[0] = "nextPos" &&
  eq.rhs = some (e: Expression) {
    e.kind = ExpressionKind.RecordLiteral &&
    e.record_literal = some (rl: RecordLiteral) {
      rl.record_type = "Position.impl" &&
      rl.field_definitions.length = 2 &&
      rl.field_definitions.element[0] = some (fd: FieldDefinition) {
        fd.field_id = "x" &&
        fd.field_value = some (e: Expression) {
          e.kind = ExpressionKind.Id &&
          e.identifier = "x"
        }
      } &&
      rl.field_definitions.element[1] = some (fd: FieldDefinition) {
        fd.field_id = "y" &&
        fd.field_value = some (e: Expression) {
          e.kind = ExpressionKind.Id &&
          e.identifier = "y"
        }
      }
    }
  }} &&nb.properties.length = 0})} &&
dfm.node_declarations.element[5] = some (nd: Node) {
  nd.name = "LocationSource_Dir" &&
  nd.is_function = false &&
  nd.is_main = false &&
  nd.input_parameters.length = 1 &&
  nd.input_parameters.element[0] = some (ip: InputParameter) {
    ip.name = "cmd" &&
    ip.dtype = some (dt: DataType) {
      dt.kind = DataTypeKind.UserDefined &&
      dt.user_defined_type = m.type_declarations.element[6]
  } &&
  ip.is_constant = false} &&nd.output_parameters.length = 1 &&
nd.output_parameters.element[0] = some (op: OutputParameter) {
  op.name = "GPS_dir" &&
  op.dtype = some (dt: DataType) {
    dt.kind = DataTypeKind.UserDefined &&
    dt.user_defined_type = m.type_declarations.element[1]}} &&
nd.contract = mk_none<ContractSpec> &&
nd.body = mk_some<NodeBody>(some (nb: NodeBody) {
  nb.constant_declarations.length = 0 &&
  nb.variable_declarations.length = 2 &&
  nb.variable_declarations.element[0] = some (vd: VariableDeclaration) {
    vd.name = "nextDir" &&
    vd.dtype = some (dt: DataType) {
      dt.kind = DataTypeKind.UserDefined &&
      dt.user_defined_type = m.type_declarations.element[1]
  }} &&
nb.variable_declarations.element[1] = some (vd: VariableDeclaration) {
  vd.name = "yaw" &&
  vd.dtype = some (dt: DataType) {
    dt.kind = DataTypeKind.UserDefined &&
    dt.user_defined_type = m.type_declarations.element[8]}} &&
nb.assertions.length = 0 &&nb.equations.length = 3 &&
nb.equations.element[0] = some (eq: NodeEquation) {
  eq.lhs.length = 1 &&
  eq.lhs.element[0] = "GPS_dir" &&
  eq.rhs = some (e: Expression) {
    e.kind = ExpressionKind.Arrow &&
    e.arrow = some (bo: BinaryOperation) {
      bo.lhs_operand = some (e: Expression) {
        e.kind = ExpressionKind.Id &&
        e.identifier = "LAUNCH_DIR"
      } &&
      bo.rhs_operand = some (e: Expression) {
        e.kind = ExpressionKind.Pre &&
        e.pre = some (e: Expression) {
          e.kind = ExpressionKind.Id &&
          e.identifier = "nextDir"
        }
      }
    }
  }} &&
nb.equations.element[1] = some (eq: NodeEquation) {
  eq.lhs.length = 1 &&
  eq.lhs.element[0] = "yaw" &&
  eq.rhs = some (e: Expression) {
    e.kind = ExpressionKind.ConditionalExpr &&
    e.conditional_expr = some (ite: IfThenElse) {
      ite.condition = some (e: Expression) {
        e.kind = ExpressionKind.Equal &&
        e.equal = some (bo: BinaryOperation) {
          bo.lhs_operand = some (e: Expression) {
            e.kind = ExpressionKind.Id &&
            e.identifier = "cmd"
          } &&
          bo.rhs_operand = some (e: Expression) {
            e.kind = ExpressionKind.Id &&
            e.identifier = "c_IncreaseYaw"
          }
        }
      } &&
      ite.thenBranch = some (e: Expression) {
        e.kind = ExpressionKind.Arrow &&
        e.arrow = some (bo: BinaryOperation) {
          bo.lhs_operand = some (e: Expression) {
            e.kind = ExpressionKind.Id &&
            e.identifier = "c_Y_90"
          } &&
          bo.rhs_operand = some (e: Expression) {
            e.kind = ExpressionKind.ConditionalExpr &&
            e.conditional_expr = some (ite: IfThenElse) {
              ite.condition = some (e: Expression) {
                e.kind = ExpressionKind.Equal &&
                e.equal = some (bo: BinaryOperation) {
                  bo.lhs_operand = some (e: Expression) {
                    e.kind = ExpressionKind.Pre &&
                    e.pre = some (e: Expression) {
                      e.kind = ExpressionKind.Id &&
                      e.identifier = "yaw"
                    }
                  } &&
                  bo.rhs_operand = some (e: Expression) {
                    e.kind = ExpressionKind.Id &&
                    e.identifier = "c_Y_0"
                  }
                }
              } &&
              ite.thenBranch = some (e: Expression) {
                e.kind = ExpressionKind.Id &&
                e.identifier = "c_Y_90"
              } &&
              ite.elseBranch = some (e: Expression) {
                e.kind = ExpressionKind.ConditionalExpr &&
                e.conditional_expr = some (ite: IfThenElse) {
                  ite.condition = some (e: Expression) {
                    e.kind = ExpressionKind.Equal &&
                    e.equal = some (bo: BinaryOperation) {
                      bo.lhs_operand = some (e: Expression) {
                        e.kind = ExpressionKind.Pre &&
                        e.pre = some (e: Expression) {
                          e.kind = ExpressionKind.Id &&
                          e.identifier = "yaw"
                        }
                      } &&
                      bo.rhs_operand = some (e: Expression) {
                        e.kind = ExpressionKind.Id &&
                        e.identifier = "c_Y_90"
                      }
                    }
                  } &&
                  ite.thenBranch = some (e: Expression) {
                    e.kind = ExpressionKind.Id &&
                    e.identifier = "c_Y_180"
                  } &&
                  ite.elseBranch = some (e: Expression) {
                    e.kind = ExpressionKind.ConditionalExpr &&
                    e.conditional_expr = some (ite: IfThenElse) {
                      ite.condition = some (e: Expression) {
                        e.kind = ExpressionKind.Equal &&
                        e.equal = some (bo: BinaryOperation) {
                          bo.lhs_operand = some (e: Expression) {
                            e.kind = ExpressionKind.Pre &&
                            e.pre = some (e: Expression) {
                              e.kind = ExpressionKind.Id &&
                              e.identifier = "yaw"
                            }
                          } &&
                          bo.rhs_operand = some (e: Expression) {
                            e.kind = ExpressionKind.Id &&
                            e.identifier = "c_Y_180"
                          }
                        }
                      } &&
                      ite.thenBranch = some (e: Expression) {
                        e.kind = ExpressionKind.Id &&
                        e.identifier = "c_Y_270"
                      } &&
                      ite.elseBranch = some (e: Expression) {
                        e.kind = ExpressionKind.Id &&
                        e.identifier = "c_Y_0"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      } &&
      ite.elseBranch = some (e: Expression) {
        e.kind = ExpressionKind.ConditionalExpr &&
        e.conditional_expr = some (ite: IfThenElse) {
          ite.condition = some (e: Expression) {
            e.kind = ExpressionKind.Equal &&
            e.equal = some (bo: BinaryOperation) {
              bo.lhs_operand = some (e: Expression) {
                e.kind = ExpressionKind.Id &&
                e.identifier = "cmd"
              } &&
              bo.rhs_operand = some (e: Expression) {
                e.kind = ExpressionKind.Id &&
                e.identifier = "c_DecreaseYaw"
              }
            }
          } &&
          ite.thenBranch = some (e: Expression) {
            e.kind = ExpressionKind.Arrow &&
            e.arrow = some (bo: BinaryOperation) {
              bo.lhs_operand = some (e: Expression) {
                e.kind = ExpressionKind.Id &&
                e.identifier = "c_Y_270"
              } &&
              bo.rhs_operand = some (e: Expression) {
                e.kind = ExpressionKind.ConditionalExpr &&
                e.conditional_expr = some (ite: IfThenElse) {
                  ite.condition = some (e: Expression) {
                    e.kind = ExpressionKind.Equal &&
                    e.equal = some (bo: BinaryOperation) {
                      bo.lhs_operand = some (e: Expression) {
                        e.kind = ExpressionKind.Pre &&
                        e.pre = some (e: Expression) {
                          e.kind = ExpressionKind.Id &&
                          e.identifier = "yaw"
                        }
                      } &&
                      bo.rhs_operand = some (e: Expression) {
                        e.kind = ExpressionKind.Id &&
                        e.identifier = "c_Y_0"
                      }
                    }
                  } &&
                  ite.thenBranch = some (e: Expression) {
                    e.kind = ExpressionKind.Id &&
                    e.identifier = "c_Y_270"
                  } &&
                  ite.elseBranch = some (e: Expression) {
                    e.kind = ExpressionKind.ConditionalExpr &&
                    e.conditional_expr = some (ite: IfThenElse) {
                      ite.condition = some (e: Expression) {
                        e.kind = ExpressionKind.Equal &&
                        e.equal = some (bo: BinaryOperation) {
                          bo.lhs_operand = some (e: Expression) {
                            e.kind = ExpressionKind.Pre &&
                            e.pre = some (e: Expression) {
                              e.kind = ExpressionKind.Id &&
                              e.identifier = "yaw"
                            }
                          } &&
                          bo.rhs_operand = some (e: Expression) {
                            e.kind = ExpressionKind.Id &&
                            e.identifier = "c_Y_90"
                          }
                        }
                      } &&
                      ite.thenBranch = some (e: Expression) {
                        e.kind = ExpressionKind.Id &&
                        e.identifier = "c_Y_0"
                      } &&
                      ite.elseBranch = some (e: Expression) {
                        e.kind = ExpressionKind.ConditionalExpr &&
                        e.conditional_expr = some (ite: IfThenElse) {
                          ite.condition = some (e: Expression) {
                            e.kind = ExpressionKind.Equal &&
                            e.equal = some (bo: BinaryOperation) {
                              bo.lhs_operand = some (e: Expression) {
                                e.kind = ExpressionKind.Pre &&
                                e.pre = some (e: Expression) {
                                  e.kind = ExpressionKind.Id &&
                                  e.identifier = "yaw"
                                }
                              } &&
                              bo.rhs_operand = some (e: Expression) {
                                e.kind = ExpressionKind.Id &&
                                e.identifier = "c_Y_180"
                              }
                            }
                          } &&
                          ite.thenBranch = some (e: Expression) {
                            e.kind = ExpressionKind.Id &&
                            e.identifier = "c_Y_90"
                          } &&
                          ite.elseBranch = some (e: Expression) {
                            e.kind = ExpressionKind.Id &&
                            e.identifier = "c_Y_180"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          } &&
          ite.elseBranch = some (e: Expression) {
            e.kind = ExpressionKind.Arrow &&
            e.arrow = some (bo: BinaryOperation) {
              bo.lhs_operand = some (e: Expression) {
                e.kind = ExpressionKind.Id &&
                e.identifier = "c_Y_0"
              } &&
              bo.rhs_operand = some (e: Expression) {
                e.kind = ExpressionKind.Pre &&
                e.pre = some (e: Expression) {
                  e.kind = ExpressionKind.Id &&
                  e.identifier = "yaw"
                }
              }
            }
          }
        }
      }
    }
  }} &&
nb.equations.element[2] = some (eq: NodeEquation) {
  eq.lhs.length = 1 &&
  eq.lhs.element[0] = "nextDir" &&
  eq.rhs = some (e: Expression) {
    e.kind = ExpressionKind.Call &&
    e.call = some (cll: NodeCall) {
      cll.node = "yaw2dir" &&
      cll.arguments.length = 1 &&
      cll.arguments.element[0] = some (e: Expression) {
        e.kind = ExpressionKind.Id &&
        e.identifier = "yaw"
      }
    }
  }} &&nb.properties.length = 0})} &&
dfm.node_declarations.element[6] = some (nd: Node) {
  nd.name = "RemoteOperatorController_Move" &&
  nd.is_function = false &&
  nd.is_main = false &&
  nd.input_parameters.length = 0 &&
  nd.output_parameters.length = 1 &&
  nd.output_parameters.element[0] = some (op: OutputParameter) {
    op.name = "move" &&
    op.dtype = some (dt: DataType) {
      dt.kind = DataTypeKind.UserDefined &&
      dt.user_defined_type = m.type_declarations.element[0]
  }} &&nd.contract = mk_none<ContractSpec> &&
nd.body = mk_some<NodeBody>(some (nb: NodeBody) {
  nb.constant_declarations.length = 0 &&
  nb.variable_declarations.length = 0 &&
  nb.assertions.length = 0 &&
  nb.equations.length = 1 &&
  nb.equations.element[0] = some (eq: NodeEquation) {
    eq.lhs.length = 1 &&
    eq.lhs.element[0] = "move" &&
    eq.rhs = some (e: Expression) {
      e.kind = ExpressionKind.Arrow &&
      e.arrow = some (bo: BinaryOperation) {
        bo.lhs_operand = some (e: Expression) {
          e.kind = ExpressionKind.Id &&
          e.identifier = "c_Move_Forward"
        } &&
        bo.rhs_operand = some (e: Expression) {
          e.kind = ExpressionKind.Pre &&
          e.pre = some (e: Expression) {
            e.kind = ExpressionKind.Arrow &&
            e.arrow = some (bo: BinaryOperation) {
              bo.lhs_operand = some (e: Expression) {
                e.kind = ExpressionKind.Id &&
                e.identifier = "c_Move_Forward"
              } &&
              bo.rhs_operand = some (e: Expression) {
                e.kind = ExpressionKind.Pre &&
                e.pre = some (e: Expression) {
                  e.kind = ExpressionKind.Arrow &&
                  e.arrow = some (bo: BinaryOperation) {
                    bo.lhs_operand = some (e: Expression) {
                      e.kind = ExpressionKind.Id &&
                      e.identifier = "c_Turn_Left"
                    } &&
                    bo.rhs_operand = some (e: Expression) {
                      e.kind = ExpressionKind.Pre &&
                      e.pre = some (e: Expression) {
                        e.kind = ExpressionKind.Arrow &&
                        e.arrow = some (bo: BinaryOperation) {
                          bo.lhs_operand = some (e: Expression) {
                            e.kind = ExpressionKind.Id &&
                            e.identifier = "c_Move_Forward"
                          } &&
                          bo.rhs_operand = some (e: Expression) {
                            e.kind = ExpressionKind.Pre &&
                            e.pre = some (e: Expression) {
                              e.kind = ExpressionKind.Arrow &&
                              e.arrow = some (bo: BinaryOperation) {
                                bo.lhs_operand = some (e: Expression) {
                                  e.kind = ExpressionKind.Id &&
                                  e.identifier = "c_Move_Forward"
                                } &&
                                bo.rhs_operand = some (e: Expression) {
                                  e.kind = ExpressionKind.Pre &&
                                  e.pre = some (e: Expression) {
                                    e.kind = ExpressionKind.Id &&
                                    e.identifier = "c_Stop"
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  } &&
  nb.properties.length = 0})} &&
dfm.node_declarations.element[7] = some (nd: Node) {
  nd.name = "RemoteOperatorController_payloadCMD" &&
  nd.is_function = false &&
  nd.is_main = false &&
  nd.input_parameters.length = 0 &&
  nd.output_parameters.length = 1 &&
  nd.output_parameters.element[0] = some (op: OutputParameter) {
    op.name = "payloadCMD" &&
    op.dtype = some (dt: DataType) {
      dt.kind = DataTypeKind.UserDefined &&
      dt.user_defined_type = m.type_declarations.element[2]
  }} &&nd.contract = mk_none<ContractSpec> &&
nd.body = mk_some<NodeBody>(some (nb: NodeBody) {
  nb.constant_declarations.length = 0 &&
  nb.variable_declarations.length = 0 &&
  nb.assertions.length = 0 &&
  nb.equations.length = 1 &&
  nb.equations.element[0] = some (eq: NodeEquation) {
    eq.lhs.length = 1 &&
    eq.lhs.element[0] = "payloadCMD" &&
    eq.rhs = some (e: Expression) {
      e.kind = ExpressionKind.Arrow &&
      e.arrow = some (bo: BinaryOperation) {
        bo.lhs_operand = some (e: Expression) {
          e.kind = ExpressionKind.Id &&
          e.identifier = "c_None"
        } &&
        bo.rhs_operand = some (e: Expression) {
          e.kind = ExpressionKind.Pre &&
          e.pre = some (e: Expression) {
            e.kind = ExpressionKind.Arrow &&
            e.arrow = some (bo: BinaryOperation) {
              bo.lhs_operand = some (e: Expression) {
                e.kind = ExpressionKind.Id &&
                e.identifier = "c_None"
              } &&
              bo.rhs_operand = some (e: Expression) {
                e.kind = ExpressionKind.Pre &&
                e.pre = some (e: Expression) {
                  e.kind = ExpressionKind.Arrow &&
                  e.arrow = some (bo: BinaryOperation) {
                    bo.lhs_operand = some (e: Expression) {
                      e.kind = ExpressionKind.Id &&
                      e.identifier = "c_None"
                    } &&
                    bo.rhs_operand = some (e: Expression) {
                      e.kind = ExpressionKind.Pre &&
                      e.pre = some (e: Expression) {
                        e.kind = ExpressionKind.Arrow &&
                        e.arrow = some (bo: BinaryOperation) {
                          bo.lhs_operand = some (e: Expression) {
                            e.kind = ExpressionKind.Id &&
                            e.identifier = "c_None"
                          } &&
                          bo.rhs_operand = some (e: Expression) {
                            e.kind = ExpressionKind.Pre &&
                            e.pre = some (e: Expression) {
                              e.kind = ExpressionKind.Arrow &&
                              e.arrow = some (bo: BinaryOperation) {
                                bo.lhs_operand = some (e: Expression) {
                                  e.kind = ExpressionKind.Id &&
                                  e.identifier = "c_None"
                                } &&
                                bo.rhs_operand = some (e: Expression) {
                                  e.kind = ExpressionKind.Pre &&
                                  e.pre = some (e: Expression) {
                                    e.kind = ExpressionKind.Arrow &&
                                    e.arrow = some (bo: BinaryOperation) {
                                      bo.lhs_operand = some (e: Expression) {
                                        e.kind = ExpressionKind.Id &&
                                        e.identifier = "c_Camera"
                                      } &&
                                      bo.rhs_operand = some (e: Expression) {
                                        e.kind = ExpressionKind.Pre &&
                                        e.pre = some (e: Expression) {
                                          e.kind = ExpressionKind.Id &&
                                          e.identifier = "c_None"
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  } &&
  nb.properties.length = 0})} &&
dfm.node_declarations.element[8] = some (nd: Node) {
  nd.name = "sofar" &&
  nd.is_function = false &&
  nd.is_main = false &&
  nd.input_parameters.length = 1 &&
  nd.input_parameters.element[0] = some (ip: InputParameter) {
    ip.name = "a" &&
    ip.dtype = BoolType &&
    ip.is_constant = false
  } &&
  nd.output_parameters.length = 1 &&
  nd.output_parameters.element[0] = some (op: OutputParameter) {
    op.name = "b" &&
    op.dtype = BoolType
  } &&
  nd.contract = mk_none<ContractSpec> &&
  nd.body = mk_some<NodeBody>(some (nb: NodeBody) {
    nb.constant_declarations.length = 0 &&
    nb.variable_declarations.length = 0 &&
    nb.assertions.length = 0 &&
    nb.equations.length = 1 &&
    nb.equations.element[0] = some (eq: NodeEquation) {
      eq.lhs.length = 1 &&
      eq.lhs.element[0] = "b" &&
      eq.rhs = some (e: Expression) {
        e.kind = ExpressionKind.Arrow &&
        e.arrow = some (bo: BinaryOperation) {
          bo.lhs_operand = some (e: Expression) {
            e.kind = ExpressionKind.Id &&
            e.identifier = "a"
          } &&
          bo.rhs_operand = some (e: Expression) {
            e.kind = ExpressionKind.And &&
            e.and = some (bo: BinaryOperation) {
              bo.lhs_operand = some (e: Expression) {
                e.kind = ExpressionKind.Id &&
                e.identifier = "a"
              } &&
              bo.rhs_operand = some (e: Expression) {
                e.kind = ExpressionKind.Pre &&
                e.pre = some (e: Expression) {
                  e.kind = ExpressionKind.Id &&
                  e.identifier = "b"
                }
              }
            }
          }
        }
      }
    } &&
    nb.properties.length = 0
  })}}) &&m.component_impl.length = 1 &&
m.component_impl.element[0] = some (ci: ComponentImpl) {
  ci.name = "UAVSystem.Impl" &&
  ci.ctype = m.component_types.element[14] &&
  ci.kind = ComponentImplKind.Block_Impl &&
  ci.block_impl = some (imp: BlockImpl) {
    imp.subcomponents.length = 14 &&
    imp.subcomponents.element[0] = some (ci: ComponentInstance) {
      ci.name = "actuators" &&
      ci.kind = ComponentInstanceKind.Specification &&
      ci.specification = m.component_types.element[0] &&
      ci.manufacturer = mk_some<ManufacturerType>(ManufacturerType.InHouse) &&
      ci.category = mk_some<String>("Actuators") &&
      ci.component_type = mk_some<KindOfComponent>(KindOfComponent.Hybrid) &&
      ci.situated = mk_some<SituatedType>(SituatedType.OnBoard) &&
      ci.has_sensitive_info = mk_none<Bool> &&
      ci.inside_trusted_boundary = mk_some<Bool>(true) &&
      ci.broadcast_from_outside_tb = mk_none<Bool> &&
      ci.wifi_from_outside_tb = mk_none<Bool> &&
      ci.heterogeneity = mk_none<Bool> &&
      ci.encryption = mk_none<Bool> &&
      ci.anti_jamming = mk_none<Bool> &&
      ci.anti_flooding = mk_none<Bool> &&
      ci.anti_fuzzing = mk_none<Bool> &&
      ci.heterogeneity_dal = mk_none<Int> &&
      ci.encryption_dal = mk_none<Int> &&
      ci.anti_jamming_dal = mk_none<Int> &&
      ci.anti_flooding_dal = mk_none<Int> &&
      ci.anti_jamming_dal = mk_none<Int> &&
      ci.anti_fuzzing_dal = mk_none<Int>
    } &&
    imp.subcomponents.element[1] = some (ci: ComponentInstance) {
      ci.name = "battery_health_check" &&
      ci.kind = ComponentInstanceKind.Specification &&
      ci.specification = m.component_types.element[1] &&
      ci.manufacturer = mk_some<ManufacturerType>(ManufacturerType.ThirdParty) &&
      ci.category = mk_some<String>("BatteryHealthChecker") &&
      ci.component_type = mk_some<KindOfComponent>(KindOfComponent.Software) &&
      ci.situated = mk_some<SituatedType>(SituatedType.OnBoard) &&
      ci.has_sensitive_info = mk_none<Bool> &&
      ci.inside_trusted_boundary = mk_some<Bool>(true) &&
      ci.broadcast_from_outside_tb = mk_none<Bool> &&
      ci.wifi_from_outside_tb = mk_none<Bool> &&
      ci.heterogeneity = mk_none<Bool> &&
      ci.encryption = mk_none<Bool> &&
      ci.anti_jamming = mk_none<Bool> &&
      ci.anti_flooding = mk_none<Bool> &&
      ci.anti_fuzzing = mk_none<Bool> &&
      ci.heterogeneity_dal = mk_none<Int> &&
      ci.encryption_dal = mk_none<Int> &&
      ci.anti_jamming_dal = mk_none<Int> &&
      ci.anti_flooding_dal = mk_none<Int> &&
      ci.anti_jamming_dal = mk_none<Int> &&
      ci.anti_fuzzing_dal = mk_none<Int>
    } &&
    imp.subcomponents.element[2] = some (ci: ComponentInstance) {
      ci.name = "flight_controller" &&
      ci.kind = ComponentInstanceKind.Specification &&
      ci.specification = m.component_types.element[3] &&
      ci.manufacturer = mk_some<ManufacturerType>(ManufacturerType.ThirdParty) &&
      ci.category = mk_some<String>("FlightController") &&
      ci.component_type = mk_some<KindOfComponent>(KindOfComponent.Software) &&
      ci.situated = mk_some<SituatedType>(SituatedType.OnBoard) &&
      ci.has_sensitive_info = mk_none<Bool> &&
      ci.inside_trusted_boundary = mk_some<Bool>(true) &&
      ci.broadcast_from_outside_tb = mk_none<Bool> &&
      ci.wifi_from_outside_tb = mk_none<Bool> &&
      ci.heterogeneity = mk_none<Bool> &&
      ci.encryption = mk_none<Bool> &&
      ci.anti_jamming = mk_none<Bool> &&
      ci.anti_flooding = mk_none<Bool> &&
      ci.anti_fuzzing = mk_none<Bool> &&
      ci.heterogeneity_dal = mk_none<Int> &&
      ci.encryption_dal = mk_none<Int> &&
      ci.anti_jamming_dal = mk_none<Int> &&
      ci.anti_flooding_dal = mk_none<Int> &&
      ci.anti_jamming_dal = mk_none<Int> &&
      ci.anti_fuzzing_dal = mk_none<Int>
    } &&
    imp.subcomponents.element[3] = some (ci: ComponentInstance) {
      ci.name = "gps" &&
      ci.kind = ComponentInstanceKind.Specification &&
      ci.specification = m.component_types.element[4] &&
      ci.manufacturer = mk_some<ManufacturerType>(ManufacturerType.ThirdParty) &&
      ci.category = mk_some<String>("GPS") &&
      ci.component_type = mk_some<KindOfComponent>(KindOfComponent.Hybrid) &&
      ci.situated = mk_some<SituatedType>(SituatedType.OnBoard) &&
      ci.has_sensitive_info = mk_none<Bool> &&
      ci.inside_trusted_boundary = mk_some<Bool>(true) &&
      ci.broadcast_from_outside_tb = mk_some<Bool>(true) &&
      ci.wifi_from_outside_tb = mk_none<Bool> &&
      ci.heterogeneity = mk_some<Bool>(true) &&
      ci.encryption = mk_none<Bool> &&
      ci.anti_jamming = mk_some<Bool>(true) &&
      ci.anti_flooding = mk_none<Bool> &&
      ci.anti_fuzzing = mk_none<Bool> &&
      ci.heterogeneity_dal = mk_some<Int>(7) &&
      ci.encryption_dal = mk_none<Int> &&
      ci.anti_jamming_dal = mk_some<Int>(7) &&
      ci.anti_flooding_dal = mk_none<Int> &&
      ci.anti_jamming_dal = mk_some<Int>(7) &&
      ci.anti_fuzzing_dal = mk_none<Int>
    } &&
    imp.subcomponents.element[4] = some (ci: ComponentInstance) {
      ci.name = "dme_vor" &&
      ci.kind = ComponentInstanceKind.Specification &&
      ci.specification = m.component_types.element[2] &&
      ci.manufacturer = mk_some<ManufacturerType>(ManufacturerType.ThirdParty) &&
      ci.category = mk_some<String>("DME_VOR") &&
      ci.component_type = mk_some<KindOfComponent>(KindOfComponent.Hybrid) &&
      ci.situated = mk_some<SituatedType>(SituatedType.OnBoard) &&
      ci.has_sensitive_info = mk_none<Bool> &&
      ci.inside_trusted_boundary = mk_some<Bool>(true) &&
      ci.broadcast_from_outside_tb = mk_some<Bool>(true) &&
      ci.wifi_from_outside_tb = mk_none<Bool> &&
      ci.heterogeneity = mk_some<Bool>(true) &&
      ci.encryption = mk_none<Bool> &&
      ci.anti_jamming = mk_some<Bool>(true) &&
      ci.anti_flooding = mk_none<Bool> &&
      ci.anti_fuzzing = mk_none<Bool> &&
      ci.heterogeneity_dal = mk_some<Int>(7) &&
      ci.encryption_dal = mk_none<Int> &&
      ci.anti_jamming_dal = mk_some<Int>(7) &&
      ci.anti_flooding_dal = mk_none<Int> &&
      ci.anti_jamming_dal = mk_some<Int>(7) &&
      ci.anti_fuzzing_dal = mk_none<Int>
    } &&
    imp.subcomponents.element[5] = some (ci: ComponentInstance) {
      ci.name = "iru" &&
      ci.kind = ComponentInstanceKind.Specification &&
      ci.specification = m.component_types.element[5] &&
      ci.manufacturer = mk_some<ManufacturerType>(ManufacturerType.ThirdParty) &&
      ci.category = mk_some<String>("IRU") &&
      ci.component_type = mk_some<KindOfComponent>(KindOfComponent.Hybrid) &&
      ci.situated = mk_some<SituatedType>(SituatedType.OnBoard) &&
      ci.has_sensitive_info = mk_none<Bool> &&
      ci.inside_trusted_boundary = mk_some<Bool>(true) &&
      ci.broadcast_from_outside_tb = mk_none<Bool> &&
      ci.wifi_from_outside_tb = mk_none<Bool> &&
      ci.heterogeneity = mk_some<Bool>(true) &&
      ci.encryption = mk_none<Bool> &&
      ci.anti_jamming = mk_none<Bool> &&
      ci.anti_flooding = mk_none<Bool> &&
      ci.anti_fuzzing = mk_none<Bool> &&
      ci.heterogeneity_dal = mk_some<Int>(7) &&
      ci.encryption_dal = mk_none<Int> &&
      ci.anti_jamming_dal = mk_none<Int> &&
      ci.anti_flooding_dal = mk_none<Int> &&
      ci.anti_jamming_dal = mk_none<Int> &&
      ci.anti_fuzzing_dal = mk_none<Int>
    } &&
    imp.subcomponents.element[6] = some (ci: ComponentInstance) {
      ci.name = "triplex_voter" &&
      ci.kind = ComponentInstanceKind.Specification &&
      ci.specification = m.component_types.element[13] &&
      ci.manufacturer = mk_some<ManufacturerType>(ManufacturerType.InHouse) &&
      ci.category = mk_some<String>("TriplexVoter") &&
      ci.component_type = mk_some<KindOfComponent>(KindOfComponent.Software) &&
      ci.situated = mk_some<SituatedType>(SituatedType.OnBoard) &&
      ci.has_sensitive_info = mk_none<Bool> &&
      ci.inside_trusted_boundary = mk_some<Bool>(true) &&
      ci.broadcast_from_outside_tb = mk_none<Bool> &&
      ci.wifi_from_outside_tb = mk_none<Bool> &&
      ci.heterogeneity = mk_none<Bool> &&
      ci.encryption = mk_none<Bool> &&
      ci.anti_jamming = mk_none<Bool> &&
      ci.anti_flooding = mk_none<Bool> &&
      ci.anti_fuzzing = mk_none<Bool> &&
      ci.heterogeneity_dal = mk_none<Int> &&
      ci.encryption_dal = mk_none<Int> &&
      ci.anti_jamming_dal = mk_none<Int> &&
      ci.anti_flooding_dal = mk_none<Int> &&
      ci.anti_jamming_dal = mk_none<Int> &&
      ci.anti_fuzzing_dal = mk_none<Int>
    } &&
    imp.subcomponents.element[7] = some (ci: ComponentInstance) {
      ci.name = "mission_planner" &&
      ci.kind = ComponentInstanceKind.Specification &&
      ci.specification = m.component_types.element[6] &&
      ci.manufacturer = mk_some<ManufacturerType>(ManufacturerType.InHouse) &&
      ci.category = mk_some<String>("MissionPlanner") &&
      ci.component_type = mk_some<KindOfComponent>(KindOfComponent.Software) &&
      ci.situated = mk_some<SituatedType>(SituatedType.OnBoard) &&
      ci.has_sensitive_info = mk_some<Bool>(true) &&
      ci.inside_trusted_boundary = mk_some<Bool>(true) &&
      ci.broadcast_from_outside_tb = mk_none<Bool> &&
      ci.wifi_from_outside_tb = mk_none<Bool> &&
      ci.heterogeneity = mk_none<Bool> &&
      ci.encryption = mk_none<Bool> &&
      ci.anti_jamming = mk_none<Bool> &&
      ci.anti_flooding = mk_none<Bool> &&
      ci.anti_fuzzing = mk_none<Bool> &&
      ci.heterogeneity_dal = mk_none<Int> &&
      ci.encryption_dal = mk_none<Int> &&
      ci.anti_jamming_dal = mk_none<Int> &&
      ci.anti_flooding_dal = mk_none<Int> &&
      ci.anti_jamming_dal = mk_none<Int> &&
      ci.anti_fuzzing_dal = mk_none<Int>
    } &&
    imp.subcomponents.element[8] = some (ci: ComponentInstance) {
      ci.name = "mixer" &&
      ci.kind = ComponentInstanceKind.Specification &&
      ci.specification = m.component_types.element[7] &&
      ci.manufacturer = mk_some<ManufacturerType>(ManufacturerType.InHouse) &&
      ci.category = mk_some<String>("Mixer") &&
      ci.component_type = mk_some<KindOfComponent>(KindOfComponent.Software) &&
      ci.situated = mk_some<SituatedType>(SituatedType.OnBoard) &&
      ci.has_sensitive_info = mk_none<Bool> &&
      ci.inside_trusted_boundary = mk_some<Bool>(true) &&
      ci.broadcast_from_outside_tb = mk_none<Bool> &&
      ci.wifi_from_outside_tb = mk_none<Bool> &&
      ci.heterogeneity = mk_none<Bool> &&
      ci.encryption = mk_none<Bool> &&
      ci.anti_jamming = mk_none<Bool> &&
      ci.anti_flooding = mk_none<Bool> &&
      ci.anti_fuzzing = mk_none<Bool> &&
      ci.heterogeneity_dal = mk_none<Int> &&
      ci.encryption_dal = mk_none<Int> &&
      ci.anti_jamming_dal = mk_none<Int> &&
      ci.anti_flooding_dal = mk_none<Int> &&
      ci.anti_jamming_dal = mk_none<Int> &&
      ci.anti_fuzzing_dal = mk_none<Int>
    } &&
    imp.subcomponents.element[9] = some (ci: ComponentInstance) {
      ci.name = "navigator" &&
      ci.kind = ComponentInstanceKind.Specification &&
      ci.specification = m.component_types.element[8] &&
      ci.manufacturer = mk_some<ManufacturerType>(ManufacturerType.ThirdParty) &&
      ci.category = mk_some<String>("Navigator") &&
      ci.component_type = mk_some<KindOfComponent>(KindOfComponent.Software) &&
      ci.situated = mk_some<SituatedType>(SituatedType.OnBoard) &&
      ci.has_sensitive_info = mk_none<Bool> &&
      ci.inside_trusted_boundary = mk_some<Bool>(true) &&
      ci.broadcast_from_outside_tb = mk_none<Bool> &&
      ci.wifi_from_outside_tb = mk_none<Bool> &&
      ci.heterogeneity = mk_none<Bool> &&
      ci.encryption = mk_none<Bool> &&
      ci.anti_jamming = mk_none<Bool> &&
      ci.anti_flooding = mk_none<Bool> &&
      ci.anti_fuzzing = mk_none<Bool> &&
      ci.heterogeneity_dal = mk_none<Int> &&
      ci.encryption_dal = mk_none<Int> &&
      ci.anti_jamming_dal = mk_none<Int> &&
      ci.anti_flooding_dal = mk_none<Int> &&
      ci.anti_jamming_dal = mk_none<Int> &&
      ci.anti_fuzzing_dal = mk_none<Int>
    } &&
    imp.subcomponents.element[10] = some (ci: ComponentInstance) {
      ci.name = "position_estimator" &&
      ci.kind = ComponentInstanceKind.Specification &&
      ci.specification = m.component_types.element[9] &&
      ci.manufacturer = mk_some<ManufacturerType>(ManufacturerType.InHouse) &&
      ci.category = mk_some<String>("PositionEstimator") &&
      ci.component_type = mk_some<KindOfComponent>(KindOfComponent.Software) &&
      ci.situated = mk_some<SituatedType>(SituatedType.OnBoard) &&
      ci.has_sensitive_info = mk_none<Bool> &&
      ci.inside_trusted_boundary = mk_some<Bool>(true) &&
      ci.broadcast_from_outside_tb = mk_none<Bool> &&
      ci.wifi_from_outside_tb = mk_none<Bool> &&
      ci.heterogeneity = mk_none<Bool> &&
      ci.encryption = mk_none<Bool> &&
      ci.anti_jamming = mk_none<Bool> &&
      ci.anti_flooding = mk_none<Bool> &&
      ci.anti_fuzzing = mk_none<Bool> &&
      ci.heterogeneity_dal = mk_none<Int> &&
      ci.encryption_dal = mk_none<Int> &&
      ci.anti_jamming_dal = mk_none<Int> &&
      ci.anti_flooding_dal = mk_none<Int> &&
      ci.anti_jamming_dal = mk_none<Int> &&
      ci.anti_fuzzing_dal = mk_none<Int>
    } &&
    imp.subcomponents.element[11] = some (ci: ComponentInstance) {
      ci.name = "RC_receiver" &&
      ci.kind = ComponentInstanceKind.Specification &&
      ci.specification = m.component_types.element[10] &&
      ci.manufacturer = mk_some<ManufacturerType>(ManufacturerType.ThirdParty) &&
      ci.category = mk_some<String>("RCReceiver") &&
      ci.component_type = mk_some<KindOfComponent>(KindOfComponent.Hybrid) &&
      ci.situated = mk_some<SituatedType>(SituatedType.OnBoard) &&
      ci.has_sensitive_info = mk_none<Bool> &&
      ci.inside_trusted_boundary = mk_some<Bool>(true) &&
      ci.broadcast_from_outside_tb = mk_none<Bool> &&
      ci.wifi_from_outside_tb = mk_some<Bool>(false) &&
      ci.heterogeneity = mk_none<Bool> &&
      ci.encryption = mk_none<Bool> &&
      ci.anti_jamming = mk_some<Bool>(true) &&
      ci.anti_flooding = mk_some<Bool>(true) &&
      ci.anti_fuzzing = mk_some<Bool>(true) &&
      ci.heterogeneity_dal = mk_none<Int> &&
      ci.encryption_dal = mk_none<Int> &&
      ci.anti_jamming_dal = mk_some<Int>(7) &&
      ci.anti_flooding_dal = mk_some<Int>(7) &&
      ci.anti_jamming_dal = mk_some<Int>(7) &&
      ci.anti_fuzzing_dal = mk_some<Int>(7)
    } &&
    imp.subcomponents.element[12] = some (ci: ComponentInstance) {
      ci.name = "RC_receiver_health_check" &&
      ci.kind = ComponentInstanceKind.Specification &&
      ci.specification = m.component_types.element[11] &&
      ci.manufacturer = mk_some<ManufacturerType>(ManufacturerType.ThirdParty) &&
      ci.category = mk_some<String>("RCReceiverHealthChecker") &&
      ci.component_type = mk_some<KindOfComponent>(KindOfComponent.Software) &&
      ci.situated = mk_some<SituatedType>(SituatedType.OnBoard) &&
      ci.has_sensitive_info = mk_none<Bool> &&
      ci.inside_trusted_boundary = mk_some<Bool>(true) &&
      ci.broadcast_from_outside_tb = mk_none<Bool> &&
      ci.wifi_from_outside_tb = mk_none<Bool> &&
      ci.heterogeneity = mk_none<Bool> &&
      ci.encryption = mk_none<Bool> &&
      ci.anti_jamming = mk_none<Bool> &&
      ci.anti_flooding = mk_none<Bool> &&
      ci.anti_fuzzing = mk_none<Bool> &&
      ci.heterogeneity_dal = mk_none<Int> &&
      ci.encryption_dal = mk_none<Int> &&
      ci.anti_jamming_dal = mk_none<Int> &&
      ci.anti_flooding_dal = mk_none<Int> &&
      ci.anti_jamming_dal = mk_none<Int> &&
      ci.anti_fuzzing_dal = mk_none<Int>
    } &&
    imp.subcomponents.element[13] = some (ci: ComponentInstance) {
      ci.name = "state_controller" &&
      ci.kind = ComponentInstanceKind.Specification &&
      ci.specification = m.component_types.element[12] &&
      ci.manufacturer = mk_some<ManufacturerType>(ManufacturerType.InHouse) &&
      ci.category = mk_some<String>("StateController") &&
      ci.component_type = mk_some<KindOfComponent>(KindOfComponent.Software) &&
      ci.situated = mk_some<SituatedType>(SituatedType.OnBoard) &&
      ci.has_sensitive_info = mk_none<Bool> &&
      ci.inside_trusted_boundary = mk_some<Bool>(true) &&
      ci.broadcast_from_outside_tb = mk_none<Bool> &&
      ci.wifi_from_outside_tb = mk_none<Bool> &&
      ci.heterogeneity = mk_none<Bool> &&
      ci.encryption = mk_none<Bool> &&
      ci.anti_jamming = mk_none<Bool> &&
      ci.anti_flooding = mk_none<Bool> &&
      ci.anti_fuzzing = mk_none<Bool> &&
      ci.heterogeneity_dal = mk_none<Int> &&
      ci.encryption_dal = mk_none<Int> &&
      ci.anti_jamming_dal = mk_none<Int> &&
      ci.anti_flooding_dal = mk_none<Int> &&
      ci.anti_jamming_dal = mk_none<Int> &&
      ci.anti_fuzzing_dal = mk_none<Int>
    } &&
    imp.connections.length = 44 &&
    imp.connections.element[0] = some (c: Connection) {
      c.name = "wireless1" &&
      c.conn_type = mk_some<ConnectionType>(ConnectionType.Remote) &&
      c.flow_type = FlowType.Control &&
      c.data_encrypted = mk_some<Bool>(true) &&
      c.authenticated = mk_some<Bool>(true) &&
      c.source = some (src: ConnectionEnd) {
        src.kind = ConnectionEndKind.ComponentCE &&
        src.component_port = m.component_types.element[14].ports.element[2]
      } &&
      c.destination = some (dst: ConnectionEnd) {
        dst.kind = ConnectionEndKind.SubcomponentCE &&
        dst.subcomponent_port = some (sp: CompInstPort) {
          sp.subcomponent = imp.subcomponents.element[11] &&
          sp.port = m.component_types.element[10].ports.element[0]
        }
      }
    } &&
    imp.connections.element[1] = some (c: Connection) {
      c.name = "wireless2" &&
      c.conn_type = mk_some<ConnectionType>(ConnectionType.Remote) &&
      c.flow_type = FlowType.Control &&
      c.data_encrypted = mk_some<Bool>(true) &&
      c.authenticated = mk_some<Bool>(true) &&
      c.source = some (src: ConnectionEnd) {
        src.kind = ConnectionEndKind.ComponentCE &&
        src.component_port = m.component_types.element[14].ports.element[3]
      } &&
      c.destination = some (dst: ConnectionEnd) {
        dst.kind = ConnectionEndKind.SubcomponentCE &&
        dst.subcomponent_port = some (sp: CompInstPort) {
          sp.subcomponent = imp.subcomponents.element[11] &&
          sp.port = m.component_types.element[10].ports.element[1]
        }
      }
    } &&
    imp.connections.element[2] = some (c: Connection) {
      c.name = "wireless3" &&
      c.conn_type = mk_some<ConnectionType>(ConnectionType.Remote) &&
      c.flow_type = FlowType.Xdata &&
      c.data_encrypted = mk_some<Bool>(true) &&
      c.authenticated = mk_some<Bool>(true) &&
      c.source = some (src: ConnectionEnd) {
        src.kind = ConnectionEndKind.ComponentCE &&
        src.component_port = m.component_types.element[14].ports.element[4]
      } &&
      c.destination = some (dst: ConnectionEnd) {
        dst.kind = ConnectionEndKind.SubcomponentCE &&
        dst.subcomponent_port = some (sp: CompInstPort) {
          sp.subcomponent = imp.subcomponents.element[11] &&
          sp.port = m.component_types.element[10].ports.element[2]
        }
      }
    } &&
    imp.connections.element[3] = some (c: Connection) {
      c.name = "wireless4_A" &&
      c.conn_type = mk_some<ConnectionType>(ConnectionType.Remote) &&
      c.flow_type = FlowType.Xdata &&
      c.data_encrypted = mk_some<Bool>(true) &&
      c.authenticated = mk_some<Bool>(true) &&
      c.source = some (src: ConnectionEnd) {
        src.kind = ConnectionEndKind.ComponentCE &&
        src.component_port = m.component_types.element[14].ports.element[0]
      } &&
      c.destination = some (dst: ConnectionEnd) {
        dst.kind = ConnectionEndKind.SubcomponentCE &&
        dst.subcomponent_port = some (sp: CompInstPort) {
          sp.subcomponent = imp.subcomponents.element[3] &&
          sp.port = m.component_types.element[4].ports.element[0]
        }
      }
    } &&
    imp.connections.element[4] = some (c: Connection) {
      c.name = "wireless5_A" &&
      c.conn_type = mk_some<ConnectionType>(ConnectionType.Remote) &&
      c.flow_type = FlowType.Xdata &&
      c.data_encrypted = mk_some<Bool>(true) &&
      c.authenticated = mk_some<Bool>(true) &&
      c.source = some (src: ConnectionEnd) {
        src.kind = ConnectionEndKind.ComponentCE &&
        src.component_port = m.component_types.element[14].ports.element[1]
      } &&
      c.destination = some (dst: ConnectionEnd) {
        dst.kind = ConnectionEndKind.SubcomponentCE &&
        dst.subcomponent_port = some (sp: CompInstPort) {
          sp.subcomponent = imp.subcomponents.element[3] &&
          sp.port = m.component_types.element[4].ports.element[1]
        }
      }
    } &&
    imp.connections.element[5] = some (c: Connection) {
      c.name = "wireless4_B" &&
      c.conn_type = mk_some<ConnectionType>(ConnectionType.Remote) &&
      c.flow_type = FlowType.Xdata &&
      c.data_encrypted = mk_some<Bool>(true) &&
      c.authenticated = mk_some<Bool>(true) &&
      c.source = some (src: ConnectionEnd) {
        src.kind = ConnectionEndKind.ComponentCE &&
        src.component_port = m.component_types.element[14].ports.element[0]
      } &&
      c.destination = some (dst: ConnectionEnd) {
        dst.kind = ConnectionEndKind.SubcomponentCE &&
        dst.subcomponent_port = some (sp: CompInstPort) {
          sp.subcomponent = imp.subcomponents.element[4] &&
          sp.port = m.component_types.element[2].ports.element[0]
        }
      }
    } &&
    imp.connections.element[6] = some (c: Connection) {
      c.name = "wireless5_B" &&
      c.conn_type = mk_some<ConnectionType>(ConnectionType.Remote) &&
      c.flow_type = FlowType.Xdata &&
      c.data_encrypted = mk_some<Bool>(true) &&
      c.authenticated = mk_some<Bool>(true) &&
      c.source = some (src: ConnectionEnd) {
        src.kind = ConnectionEndKind.ComponentCE &&
        src.component_port = m.component_types.element[14].ports.element[1]
      } &&
      c.destination = some (dst: ConnectionEnd) {
        dst.kind = ConnectionEndKind.SubcomponentCE &&
        dst.subcomponent_port = some (sp: CompInstPort) {
          sp.subcomponent = imp.subcomponents.element[4] &&
          sp.port = m.component_types.element[2].ports.element[1]
        }
      }
    } &&
    imp.connections.element[7] = some (c: Connection) {
      c.name = "wireless4_C" &&
      c.conn_type = mk_some<ConnectionType>(ConnectionType.Remote) &&
      c.flow_type = FlowType.Xdata &&
      c.data_encrypted = mk_some<Bool>(true) &&
      c.authenticated = mk_some<Bool>(true) &&
      c.source = some (src: ConnectionEnd) {
        src.kind = ConnectionEndKind.ComponentCE &&
        src.component_port = m.component_types.element[14].ports.element[0]
      } &&
      c.destination = some (dst: ConnectionEnd) {
        dst.kind = ConnectionEndKind.SubcomponentCE &&
        dst.subcomponent_port = some (sp: CompInstPort) {
          sp.subcomponent = imp.subcomponents.element[5] &&
          sp.port = m.component_types.element[5].ports.element[0]
        }
      }
    } &&
    imp.connections.element[8] = some (c: Connection) {
      c.name = "wireless5_C" &&
      c.conn_type = mk_some<ConnectionType>(ConnectionType.Remote) &&
      c.flow_type = FlowType.Xdata &&
      c.data_encrypted = mk_some<Bool>(true) &&
      c.authenticated = mk_some<Bool>(true) &&
      c.source = some (src: ConnectionEnd) {
        src.kind = ConnectionEndKind.ComponentCE &&
        src.component_port = m.component_types.element[14].ports.element[1]
      } &&
      c.destination = some (dst: ConnectionEnd) {
        dst.kind = ConnectionEndKind.SubcomponentCE &&
        dst.subcomponent_port = some (sp: CompInstPort) {
          sp.subcomponent = imp.subcomponents.element[5] &&
          sp.port = m.component_types.element[5].ports.element[1]
        }
      }
    } &&
    imp.connections.element[9] = some (c: Connection) {
      c.name = "ethernet1" &&
      c.conn_type = mk_some<ConnectionType>(ConnectionType.Local) &&
      c.flow_type = FlowType.Xdata &&
      c.data_encrypted = mk_some<Bool>(true) &&
      c.authenticated = mk_some<Bool>(true) &&
      c.source = some (src: ConnectionEnd) {
        src.kind = ConnectionEndKind.SubcomponentCE &&
        src.subcomponent_port = some (sp: CompInstPort) {
          sp.subcomponent = imp.subcomponents.element[6] &&
          sp.port = m.component_types.element[13].ports.element[6]
        }
      } &&
      c.destination = some (dst: ConnectionEnd) {
        dst.kind = ConnectionEndKind.SubcomponentCE &&
        dst.subcomponent_port = some (sp: CompInstPort) {
          sp.subcomponent = imp.subcomponents.element[10] &&
          sp.port = m.component_types.element[9].ports.element[0]
        }
      }
    } &&
    imp.connections.element[10] = some (c: Connection) {
      c.name = "ethernet2" &&
      c.conn_type = mk_some<ConnectionType>(ConnectionType.Local) &&
      c.flow_type = FlowType.Xdata &&
      c.data_encrypted = mk_some<Bool>(true) &&
      c.authenticated = mk_some<Bool>(true) &&
      c.source = some (src: ConnectionEnd) {
        src.kind = ConnectionEndKind.SubcomponentCE &&
        src.subcomponent_port = some (sp: CompInstPort) {
          sp.subcomponent = imp.subcomponents.element[6] &&
          sp.port = m.component_types.element[13].ports.element[7]
        }
      } &&
      c.destination = some (dst: ConnectionEnd) {
        dst.kind = ConnectionEndKind.SubcomponentCE &&
        dst.subcomponent_port = some (sp: CompInstPort) {
          sp.subcomponent = imp.subcomponents.element[10] &&
          sp.port = m.component_types.element[9].ports.element[1]
        }
      }
    } &&
    imp.connections.element[11] = some (c: Connection) {
      c.name = "ethernet3" &&
      c.conn_type = mk_some<ConnectionType>(ConnectionType.Local) &&
      c.flow_type = FlowType.Xdata &&
      c.data_encrypted = mk_some<Bool>(true) &&
      c.authenticated = mk_some<Bool>(true) &&
      c.source = some (src: ConnectionEnd) {
        src.kind = ConnectionEndKind.SubcomponentCE &&
        src.subcomponent_port = some (sp: CompInstPort) {
          sp.subcomponent = imp.subcomponents.element[10] &&
          sp.port = m.component_types.element[9].ports.element[2]
        }
      } &&
      c.destination = some (dst: ConnectionEnd) {
        dst.kind = ConnectionEndKind.SubcomponentCE &&
        dst.subcomponent_port = some (sp: CompInstPort) {
          sp.subcomponent = imp.subcomponents.element[9] &&
          sp.port = m.component_types.element[8].ports.element[0]
        }
      }
    } &&
    imp.connections.element[12] = some (c: Connection) {
      c.name = "ethernet4A" &&
      c.conn_type = mk_some<ConnectionType>(ConnectionType.Local) &&
      c.flow_type = FlowType.Xdata &&
      c.data_encrypted = mk_some<Bool>(true) &&
      c.authenticated = mk_some<Bool>(true) &&
      c.source = some (src: ConnectionEnd) {
        src.kind = ConnectionEndKind.SubcomponentCE &&
        src.subcomponent_port = some (sp: CompInstPort) {
          sp.subcomponent = imp.subcomponents.element[10] &&
          sp.port = m.component_types.element[9].ports.element[3]
        }
      } &&
      c.destination = some (dst: ConnectionEnd) {
        dst.kind = ConnectionEndKind.SubcomponentCE &&
        dst.subcomponent_port = some (sp: CompInstPort) {
          sp.subcomponent = imp.subcomponents.element[9] &&
          sp.port = m.component_types.element[8].ports.element[2]
        }
      }
    } &&
    imp.connections.element[13] = some (c: Connection) {
      c.name = "ethernet4B" &&
      c.conn_type = mk_some<ConnectionType>(ConnectionType.Local) &&
      c.flow_type = FlowType.Xdata &&
      c.data_encrypted = mk_some<Bool>(true) &&
      c.authenticated = mk_some<Bool>(true) &&
      c.source = some (src: ConnectionEnd) {
        src.kind = ConnectionEndKind.SubcomponentCE &&
        src.subcomponent_port = some (sp: CompInstPort) {
          sp.subcomponent = imp.subcomponents.element[10] &&
          sp.port = m.component_types.element[9].ports.element[3]
        }
      } &&
      c.destination = some (dst: ConnectionEnd) {
        dst.kind = ConnectionEndKind.SubcomponentCE &&
        dst.subcomponent_port = some (sp: CompInstPort) {
          sp.subcomponent = imp.subcomponents.element[8] &&
          sp.port = m.component_types.element[7].ports.element[3]
        }
      }
    } &&
    imp.connections.element[14] = some (c: Connection) {
      c.name = "ethernet5" &&
      c.conn_type = mk_some<ConnectionType>(ConnectionType.Local) &&
      c.flow_type = FlowType.Xdata &&
      c.data_encrypted = mk_some<Bool>(true) &&
      c.authenticated = mk_some<Bool>(true) &&
      c.source = some (src: ConnectionEnd) {
        src.kind = ConnectionEndKind.SubcomponentCE &&
        src.subcomponent_port = some (sp: CompInstPort) {
          sp.subcomponent = imp.subcomponents.element[9] &&
          sp.port = m.component_types.element[8].ports.element[4]
        }
      } &&
      c.destination = some (dst: ConnectionEnd) {
        dst.kind = ConnectionEndKind.SubcomponentCE &&
        dst.subcomponent_port = some (sp: CompInstPort) {
          sp.subcomponent = imp.subcomponents.element[2] &&
          sp.port = m.component_types.element[3].ports.element[0]
        }
      }
    } &&
    imp.connections.element[15] = some (c: Connection) {
      c.name = "ethernet6" &&
      c.conn_type = mk_some<ConnectionType>(ConnectionType.Local) &&
      c.flow_type = FlowType.Xdata &&
      c.data_encrypted = mk_some<Bool>(false) &&
      c.authenticated = mk_some<Bool>(false) &&
      c.source = some (src: ConnectionEnd) {
        src.kind = ConnectionEndKind.SubcomponentCE &&
        src.subcomponent_port = some (sp: CompInstPort) {
          sp.subcomponent = imp.subcomponents.element[9] &&
          sp.port = m.component_types.element[8].ports.element[3]
        }
      } &&
      c.destination = some (dst: ConnectionEnd) {
        dst.kind = ConnectionEndKind.SubcomponentCE &&
        dst.subcomponent_port = some (sp: CompInstPort) {
          sp.subcomponent = imp.subcomponents.element[8] &&
          sp.port = m.component_types.element[7].ports.element[2]
        }
      }
    } &&
    imp.connections.element[16] = some (c: Connection) {
      c.name = "ethernet7" &&
      c.conn_type = mk_some<ConnectionType>(ConnectionType.Local) &&
      c.flow_type = FlowType.Xdata &&
      c.data_encrypted = mk_some<Bool>(true) &&
      c.authenticated = mk_some<Bool>(true) &&
      c.source = some (src: ConnectionEnd) {
        src.kind = ConnectionEndKind.SubcomponentCE &&
        src.subcomponent_port = some (sp: CompInstPort) {
          sp.subcomponent = imp.subcomponents.element[2] &&
          sp.port = m.component_types.element[3].ports.element[5]
        }
      } &&
      c.destination = some (dst: ConnectionEnd) {
        dst.kind = ConnectionEndKind.SubcomponentCE &&
        dst.subcomponent_port = some (sp: CompInstPort) {
          sp.subcomponent = imp.subcomponents.element[9] &&
          sp.port = m.component_types.element[8].ports.element[1]
        }
      }
    } &&
    imp.connections.element[17] = some (c: Connection) {
      c.name = "ethernet8" &&
      c.conn_type = mk_some<ConnectionType>(ConnectionType.Local) &&
      c.flow_type = FlowType.Control &&
      c.data_encrypted = mk_some<Bool>(true) &&
      c.authenticated = mk_some<Bool>(true) &&
      c.source = some (src: ConnectionEnd) {
        src.kind = ConnectionEndKind.SubcomponentCE &&
        src.subcomponent_port = some (sp: CompInstPort) {
          sp.subcomponent = imp.subcomponents.element[2] &&
          sp.port = m.component_types.element[3].ports.element[4]
        }
      } &&
      c.destination = some (dst: ConnectionEnd) {
        dst.kind = ConnectionEndKind.SubcomponentCE &&
        dst.subcomponent_port = some (sp: CompInstPort) {
          sp.subcomponent = imp.subcomponents.element[0] &&
          sp.port = m.component_types.element[0].ports.element[1]
        }
      }
    } &&
    imp.connections.element[18] = some (c: Connection) {
      c.name = "ethernet9" &&
      c.conn_type = mk_some<ConnectionType>(ConnectionType.Local) &&
      c.flow_type = FlowType.Xdata &&
      c.data_encrypted = mk_some<Bool>(true) &&
      c.authenticated = mk_some<Bool>(true) &&
      c.source = some (src: ConnectionEnd) {
        src.kind = ConnectionEndKind.SubcomponentCE &&
        src.subcomponent_port = some (sp: CompInstPort) {
          sp.subcomponent = imp.subcomponents.element[7] &&
          sp.port = m.component_types.element[6].ports.element[0]
        }
      } &&
      c.destination = some (dst: ConnectionEnd) {
        dst.kind = ConnectionEndKind.SubcomponentCE &&
        dst.subcomponent_port = some (sp: CompInstPort) {
          sp.subcomponent = imp.subcomponents.element[2] &&
          sp.port = m.component_types.element[3].ports.element[2]
        }
      }
    } &&
    imp.connections.element[19] = some (c: Connection) {
      c.name = "ethernet10" &&
      c.conn_type = mk_some<ConnectionType>(ConnectionType.Local) &&
      c.flow_type = FlowType.Xdata &&
      c.data_encrypted = mk_some<Bool>(true) &&
      c.authenticated = mk_some<Bool>(true) &&
      c.source = some (src: ConnectionEnd) {
        src.kind = ConnectionEndKind.SubcomponentCE &&
        src.subcomponent_port = some (sp: CompInstPort) {
          sp.subcomponent = imp.subcomponents.element[11] &&
          sp.port = m.component_types.element[10].ports.element[3]
        }
      } &&
      c.destination = some (dst: ConnectionEnd) {
        dst.kind = ConnectionEndKind.SubcomponentCE &&
        dst.subcomponent_port = some (sp: CompInstPort) {
          sp.subcomponent = imp.subcomponents.element[12] &&
          sp.port = m.component_types.element[11].ports.element[0]
        }
      }
    } &&
    imp.connections.element[20] = some (c: Connection) {
      c.name = "ethernet11" &&
      c.conn_type = mk_some<ConnectionType>(ConnectionType.Local) &&
      c.flow_type = FlowType.Xdata &&
      c.data_encrypted = mk_some<Bool>(true) &&
      c.authenticated = mk_some<Bool>(true) &&
      c.source = some (src: ConnectionEnd) {
        src.kind = ConnectionEndKind.SubcomponentCE &&
        src.subcomponent_port = some (sp: CompInstPort) {
          sp.subcomponent = imp.subcomponents.element[12] &&
          sp.port = m.component_types.element[11].ports.element[1]
        }
      } &&
      c.destination = some (dst: ConnectionEnd) {
        dst.kind = ConnectionEndKind.SubcomponentCE &&
        dst.subcomponent_port = some (sp: CompInstPort) {
          sp.subcomponent = imp.subcomponents.element[13] &&
          sp.port = m.component_types.element[12].ports.element[0]
        }
      }
    } &&
    imp.connections.element[21] = some (c: Connection) {
      c.name = "ethernet12" &&
      c.conn_type = mk_some<ConnectionType>(ConnectionType.Local) &&
      c.flow_type = FlowType.Xdata &&
      c.data_encrypted = mk_some<Bool>(true) &&
      c.authenticated = mk_some<Bool>(true) &&
      c.source = some (src: ConnectionEnd) {
        src.kind = ConnectionEndKind.SubcomponentCE &&
        src.subcomponent_port = some (sp: CompInstPort) {
          sp.subcomponent = imp.subcomponents.element[13] &&
          sp.port = m.component_types.element[12].ports.element[3]
        }
      } &&
      c.destination = some (dst: ConnectionEnd) {
        dst.kind = ConnectionEndKind.SubcomponentCE &&
        dst.subcomponent_port = some (sp: CompInstPort) {
          sp.subcomponent = imp.subcomponents.element[2] &&
          sp.port = m.component_types.element[3].ports.element[3]
        }
      }
    } &&
    imp.connections.element[22] = some (c: Connection) {
      c.name = "ethernet13" &&
      c.conn_type = mk_some<ConnectionType>(ConnectionType.Local) &&
      c.flow_type = FlowType.Control &&
      c.data_encrypted = mk_some<Bool>(true) &&
      c.authenticated = mk_some<Bool>(true) &&
      c.source = some (src: ConnectionEnd) {
        src.kind = ConnectionEndKind.SubcomponentCE &&
        src.subcomponent_port = some (sp: CompInstPort) {
          sp.subcomponent = imp.subcomponents.element[0] &&
          sp.port = m.component_types.element[0].ports.element[5]
        }
      } &&
      c.destination = some (dst: ConnectionEnd) {
        dst.kind = ConnectionEndKind.SubcomponentCE &&
        dst.subcomponent_port = some (sp: CompInstPort) {
          sp.subcomponent = imp.subcomponents.element[2] &&
          sp.port = m.component_types.element[3].ports.element[1]
        }
      }
    } &&
    imp.connections.element[23] = some (c: Connection) {
      c.name = "ethernet14" &&
      c.conn_type = mk_some<ConnectionType>(ConnectionType.Local) &&
      c.flow_type = FlowType.Xdata &&
      c.data_encrypted = mk_some<Bool>(true) &&
      c.authenticated = mk_some<Bool>(true) &&
      c.source = some (src: ConnectionEnd) {
        src.kind = ConnectionEndKind.SubcomponentCE &&
        src.subcomponent_port = some (sp: CompInstPort) {
          sp.subcomponent = imp.subcomponents.element[0] &&
          sp.port = m.component_types.element[0].ports.element[4]
        }
      } &&
      c.destination = some (dst: ConnectionEnd) {
        dst.kind = ConnectionEndKind.SubcomponentCE &&
        dst.subcomponent_port = some (sp: CompInstPort) {
          sp.subcomponent = imp.subcomponents.element[1] &&
          sp.port = m.component_types.element[1].ports.element[0]
        }
      }
    } &&
    imp.connections.element[24] = some (c: Connection) {
      c.name = "ethernet15" &&
      c.conn_type = mk_some<ConnectionType>(ConnectionType.Local) &&
      c.flow_type = FlowType.Xdata &&
      c.data_encrypted = mk_some<Bool>(true) &&
      c.authenticated = mk_some<Bool>(true) &&
      c.source = some (src: ConnectionEnd) {
        src.kind = ConnectionEndKind.SubcomponentCE &&
        src.subcomponent_port = some (sp: CompInstPort) {
          sp.subcomponent = imp.subcomponents.element[1] &&
          sp.port = m.component_types.element[1].ports.element[1]
        }
      } &&
      c.destination = some (dst: ConnectionEnd) {
        dst.kind = ConnectionEndKind.SubcomponentCE &&
        dst.subcomponent_port = some (sp: CompInstPort) {
          sp.subcomponent = imp.subcomponents.element[13] &&
          sp.port = m.component_types.element[12].ports.element[1]
        }
      }
    } &&
    imp.connections.element[25] = some (c: Connection) {
      c.name = "ethernet16" &&
      c.conn_type = mk_some<ConnectionType>(ConnectionType.Local) &&
      c.flow_type = FlowType.Control &&
      c.data_encrypted = mk_some<Bool>(true) &&
      c.authenticated = mk_some<Bool>(true) &&
      c.source = some (src: ConnectionEnd) {
        src.kind = ConnectionEndKind.SubcomponentCE &&
        src.subcomponent_port = some (sp: CompInstPort) {
          sp.subcomponent = imp.subcomponents.element[8] &&
          sp.port = m.component_types.element[7].ports.element[4]
        }
      } &&
      c.destination = some (dst: ConnectionEnd) {
        dst.kind = ConnectionEndKind.SubcomponentCE &&
        dst.subcomponent_port = some (sp: CompInstPort) {
          sp.subcomponent = imp.subcomponents.element[0] &&
          sp.port = m.component_types.element[0].ports.element[0]
        }
      }
    } &&
    imp.connections.element[26] = some (c: Connection) {
      c.name = "ethernet17" &&
      c.conn_type = mk_some<ConnectionType>(ConnectionType.Local) &&
      c.flow_type = FlowType.Control &&
      c.data_encrypted = mk_some<Bool>(true) &&
      c.authenticated = mk_some<Bool>(true) &&
      c.source = some (src: ConnectionEnd) {
        src.kind = ConnectionEndKind.SubcomponentCE &&
        src.subcomponent_port = some (sp: CompInstPort) {
          sp.subcomponent = imp.subcomponents.element[11] &&
          sp.port = m.component_types.element[10].ports.element[4]
        }
      } &&
      c.destination = some (dst: ConnectionEnd) {
        dst.kind = ConnectionEndKind.SubcomponentCE &&
        dst.subcomponent_port = some (sp: CompInstPort) {
          sp.subcomponent = imp.subcomponents.element[0] &&
          sp.port = m.component_types.element[0].ports.element[3]
        }
      }
    } &&
    imp.connections.element[27] = some (c: Connection) {
      c.name = "ethernet18" &&
      c.conn_type = mk_some<ConnectionType>(ConnectionType.Local) &&
      c.flow_type = FlowType.Control &&
      c.data_encrypted = mk_some<Bool>(true) &&
      c.authenticated = mk_some<Bool>(true) &&
      c.source = some (src: ConnectionEnd) {
        src.kind = ConnectionEndKind.SubcomponentCE &&
        src.subcomponent_port = some (sp: CompInstPort) {
          sp.subcomponent = imp.subcomponents.element[11] &&
          sp.port = m.component_types.element[10].ports.element[5]
        }
      } &&
      c.destination = some (dst: ConnectionEnd) {
        dst.kind = ConnectionEndKind.SubcomponentCE &&
        dst.subcomponent_port = some (sp: CompInstPort) {
          sp.subcomponent = imp.subcomponents.element[8] &&
          sp.port = m.component_types.element[7].ports.element[1]
        }
      }
    } &&
    imp.connections.element[28] = some (c: Connection) {
      c.name = "ethernet19" &&
      c.conn_type = mk_some<ConnectionType>(ConnectionType.Local) &&
      c.flow_type = FlowType.Xdata &&
      c.data_encrypted = mk_some<Bool>(true) &&
      c.authenticated = mk_some<Bool>(true) &&
      c.source = some (src: ConnectionEnd) {
        src.kind = ConnectionEndKind.SubcomponentCE &&
        src.subcomponent_port = some (sp: CompInstPort) {
          sp.subcomponent = imp.subcomponents.element[11] &&
          sp.port = m.component_types.element[10].ports.element[6]
        }
      } &&
      c.destination = some (dst: ConnectionEnd) {
        dst.kind = ConnectionEndKind.SubcomponentCE &&
        dst.subcomponent_port = some (sp: CompInstPort) {
          sp.subcomponent = imp.subcomponents.element[13] &&
          sp.port = m.component_types.element[12].ports.element[2]
        }
      }
    } &&
    imp.connections.element[29] = some (c: Connection) {
      c.name = "ethernet20" &&
      c.conn_type = mk_some<ConnectionType>(ConnectionType.Local) &&
      c.flow_type = FlowType.Xdata &&
      c.data_encrypted = mk_some<Bool>(true) &&
      c.authenticated = mk_some<Bool>(true) &&
      c.source = some (src: ConnectionEnd) {
        src.kind = ConnectionEndKind.SubcomponentCE &&
        src.subcomponent_port = some (sp: CompInstPort) {
          sp.subcomponent = imp.subcomponents.element[13] &&
          sp.port = m.component_types.element[12].ports.element[3]
        }
      } &&
      c.destination = some (dst: ConnectionEnd) {
        dst.kind = ConnectionEndKind.SubcomponentCE &&
        dst.subcomponent_port = some (sp: CompInstPort) {
          sp.subcomponent = imp.subcomponents.element[0] &&
          sp.port = m.component_types.element[0].ports.element[2]
        }
      }
    } &&
    imp.connections.element[30] = some (c: Connection) {
      c.name = "ethernet21" &&
      c.conn_type = mk_some<ConnectionType>(ConnectionType.Local) &&
      c.flow_type = FlowType.Xdata &&
      c.data_encrypted = mk_some<Bool>(true) &&
      c.authenticated = mk_some<Bool>(true) &&
      c.source = some (src: ConnectionEnd) {
        src.kind = ConnectionEndKind.SubcomponentCE &&
        src.subcomponent_port = some (sp: CompInstPort) {
          sp.subcomponent = imp.subcomponents.element[13] &&
          sp.port = m.component_types.element[12].ports.element[3]
        }
      } &&
      c.destination = some (dst: ConnectionEnd) {
        dst.kind = ConnectionEndKind.SubcomponentCE &&
        dst.subcomponent_port = some (sp: CompInstPort) {
          sp.subcomponent = imp.subcomponents.element[8] &&
          sp.port = m.component_types.element[7].ports.element[0]
        }
      }
    } &&
    imp.connections.element[31] = some (c: Connection) {
      c.name = "ethernet22" &&
      c.conn_type = mk_some<ConnectionType>(ConnectionType.Local) &&
      c.flow_type = FlowType.Control &&
      c.data_encrypted = mk_some<Bool>(true) &&
      c.authenticated = mk_some<Bool>(true) &&
      c.source = some (src: ConnectionEnd) {
        src.kind = ConnectionEndKind.SubcomponentCE &&
        src.subcomponent_port = some (sp: CompInstPort) {
          sp.subcomponent = imp.subcomponents.element[8] &&
          sp.port = m.component_types.element[7].ports.element[4]
        }
      } &&
      c.destination = some (dst: ConnectionEnd) {
        dst.kind = ConnectionEndKind.ComponentCE &&
        dst.component_port = m.component_types.element[14].ports.element[5]
      }
    } &&
    imp.connections.element[32] = some (c: Connection) {
      c.name = "ethernet23" &&
      c.conn_type = mk_some<ConnectionType>(ConnectionType.Local) &&
      c.flow_type = FlowType.Xdata &&
      c.data_encrypted = mk_some<Bool>(true) &&
      c.authenticated = mk_some<Bool>(true) &&
      c.source = some (src: ConnectionEnd) {
        src.kind = ConnectionEndKind.SubcomponentCE &&
        src.subcomponent_port = some (sp: CompInstPort) {
          sp.subcomponent = imp.subcomponents.element[10] &&
          sp.port = m.component_types.element[9].ports.element[2]
        }
      } &&
      c.destination = some (dst: ConnectionEnd) {
        dst.kind = ConnectionEndKind.ComponentCE &&
        dst.component_port = m.component_types.element[14].ports.element[6]
      }
    } &&
    imp.connections.element[33] = some (c: Connection) {
      c.name = "ethernet24" &&
      c.conn_type = mk_some<ConnectionType>(ConnectionType.Local) &&
      c.flow_type = FlowType.Control &&
      c.data_encrypted = mk_some<Bool>(true) &&
      c.authenticated = mk_some<Bool>(true) &&
      c.source = some (src: ConnectionEnd) {
        src.kind = ConnectionEndKind.SubcomponentCE &&
        src.subcomponent_port = some (sp: CompInstPort) {
          sp.subcomponent = imp.subcomponents.element[2] &&
          sp.port = m.component_types.element[3].ports.element[4]
        }
      } &&
      c.destination = some (dst: ConnectionEnd) {
        dst.kind = ConnectionEndKind.ComponentCE &&
        dst.component_port = m.component_types.element[14].ports.element[7]
      }
    } &&
    imp.connections.element[34] = some (c: Connection) {
      c.name = "ethernet25" &&
      c.conn_type = mk_some<ConnectionType>(ConnectionType.Local) &&
      c.flow_type = FlowType.Control &&
      c.data_encrypted = mk_some<Bool>(true) &&
      c.authenticated = mk_some<Bool>(true) &&
      c.source = some (src: ConnectionEnd) {
        src.kind = ConnectionEndKind.SubcomponentCE &&
        src.subcomponent_port = some (sp: CompInstPort) {
          sp.subcomponent = imp.subcomponents.element[11] &&
          sp.port = m.component_types.element[10].ports.element[4]
        }
      } &&
      c.destination = some (dst: ConnectionEnd) {
        dst.kind = ConnectionEndKind.ComponentCE &&
        dst.component_port = m.component_types.element[14].ports.element[8]
      }
    } &&
    imp.connections.element[35] = some (c: Connection) {
      c.name = "ethernet26" &&
      c.conn_type = mk_some<ConnectionType>(ConnectionType.Local) &&
      c.flow_type = FlowType.Xdata &&
      c.data_encrypted = mk_some<Bool>(true) &&
      c.authenticated = mk_some<Bool>(true) &&
      c.source = some (src: ConnectionEnd) {
        src.kind = ConnectionEndKind.SubcomponentCE &&
        src.subcomponent_port = some (sp: CompInstPort) {
          sp.subcomponent = imp.subcomponents.element[13] &&
          sp.port = m.component_types.element[12].ports.element[3]
        }
      } &&
      c.destination = some (dst: ConnectionEnd) {
        dst.kind = ConnectionEndKind.ComponentCE &&
        dst.component_port = m.component_types.element[14].ports.element[9]
      }
    } &&
    imp.connections.element[36] = some (c: Connection) {
      c.name = "ethernet27" &&
      c.conn_type = mk_some<ConnectionType>(ConnectionType.Local) &&
      c.flow_type = FlowType.Xdata &&
      c.data_encrypted = mk_some<Bool>(true) &&
      c.authenticated = mk_some<Bool>(true) &&
      c.source = some (src: ConnectionEnd) {
        src.kind = ConnectionEndKind.SubcomponentCE &&
        src.subcomponent_port = some (sp: CompInstPort) {
          sp.subcomponent = imp.subcomponents.element[7] &&
          sp.port = m.component_types.element[6].ports.element[0]
        }
      } &&
      c.destination = some (dst: ConnectionEnd) {
        dst.kind = ConnectionEndKind.ComponentCE &&
        dst.component_port = m.component_types.element[14].ports.element[10]
      }
    } &&
    imp.connections.element[37] = some (c: Connection) {
      c.name = "ethernet28" &&
      c.conn_type = mk_some<ConnectionType>(ConnectionType.Local) &&
      c.flow_type = FlowType.Xdata &&
      c.data_encrypted = mk_some<Bool>(true) &&
      c.authenticated = mk_some<Bool>(true) &&
      c.source = some (src: ConnectionEnd) {
        src.kind = ConnectionEndKind.SubcomponentCE &&
        src.subcomponent_port = some (sp: CompInstPort) {
          sp.subcomponent = imp.subcomponents.element[0] &&
          sp.port = m.component_types.element[0].ports.element[5]
        }
      } &&
      c.destination = some (dst: ConnectionEnd) {
        dst.kind = ConnectionEndKind.ComponentCE &&
        dst.component_port = m.component_types.element[14].ports.element[11]
      }
    } &&
    imp.connections.element[38] = some (c: Connection) {
      c.name = "ethernet29_A" &&
      c.conn_type = mk_some<ConnectionType>(ConnectionType.Local) &&
      c.flow_type = FlowType.Xdata &&
      c.data_encrypted = mk_some<Bool>(true) &&
      c.authenticated = mk_some<Bool>(true) &&
      c.source = some (src: ConnectionEnd) {
        src.kind = ConnectionEndKind.SubcomponentCE &&
        src.subcomponent_port = some (sp: CompInstPort) {
          sp.subcomponent = imp.subcomponents.element[3] &&
          sp.port = m.component_types.element[4].ports.element[2]
        }
      } &&
      c.destination = some (dst: ConnectionEnd) {
        dst.kind = ConnectionEndKind.SubcomponentCE &&
        dst.subcomponent_port = some (sp: CompInstPort) {
          sp.subcomponent = imp.subcomponents.element[6] &&
          sp.port = m.component_types.element[13].ports.element[0]
        }
      }
    } &&
    imp.connections.element[39] = some (c: Connection) {
      c.name = "ethernet30_A" &&
      c.conn_type = mk_some<ConnectionType>(ConnectionType.Local) &&
      c.flow_type = FlowType.Xdata &&
      c.data_encrypted = mk_some<Bool>(true) &&
      c.authenticated = mk_some<Bool>(true) &&
      c.source = some (src: ConnectionEnd) {
        src.kind = ConnectionEndKind.SubcomponentCE &&
        src.subcomponent_port = some (sp: CompInstPort) {
          sp.subcomponent = imp.subcomponents.element[3] &&
          sp.port = m.component_types.element[4].ports.element[3]
        }
      } &&
      c.destination = some (dst: ConnectionEnd) {
        dst.kind = ConnectionEndKind.SubcomponentCE &&
        dst.subcomponent_port = some (sp: CompInstPort) {
          sp.subcomponent = imp.subcomponents.element[6] &&
          sp.port = m.component_types.element[13].ports.element[3]
        }
      }
    } &&
    imp.connections.element[40] = some (c: Connection) {
      c.name = "ethernet29_B" &&
      c.conn_type = mk_some<ConnectionType>(ConnectionType.Local) &&
      c.flow_type = FlowType.Xdata &&
      c.data_encrypted = mk_some<Bool>(true) &&
      c.authenticated = mk_some<Bool>(true) &&
      c.source = some (src: ConnectionEnd) {
        src.kind = ConnectionEndKind.SubcomponentCE &&
        src.subcomponent_port = some (sp: CompInstPort) {
          sp.subcomponent = imp.subcomponents.element[4] &&
          sp.port = m.component_types.element[2].ports.element[2]
        }
      } &&
      c.destination = some (dst: ConnectionEnd) {
        dst.kind = ConnectionEndKind.SubcomponentCE &&
        dst.subcomponent_port = some (sp: CompInstPort) {
          sp.subcomponent = imp.subcomponents.element[6] &&
          sp.port = m.component_types.element[13].ports.element[1]
        }
      }
    } &&
    imp.connections.element[41] = some (c: Connection) {
      c.name = "ethernet30_B" &&
      c.conn_type = mk_some<ConnectionType>(ConnectionType.Local) &&
      c.flow_type = FlowType.Xdata &&
      c.data_encrypted = mk_some<Bool>(true) &&
      c.authenticated = mk_some<Bool>(true) &&
      c.source = some (src: ConnectionEnd) {
        src.kind = ConnectionEndKind.SubcomponentCE &&
        src.subcomponent_port = some (sp: CompInstPort) {
          sp.subcomponent = imp.subcomponents.element[4] &&
          sp.port = m.component_types.element[2].ports.element[3]
        }
      } &&
      c.destination = some (dst: ConnectionEnd) {
        dst.kind = ConnectionEndKind.SubcomponentCE &&
        dst.subcomponent_port = some (sp: CompInstPort) {
          sp.subcomponent = imp.subcomponents.element[6] &&
          sp.port = m.component_types.element[13].ports.element[4]
        }
      }
    } &&
    imp.connections.element[42] = some (c: Connection) {
      c.name = "ethernet29_C" &&
      c.conn_type = mk_some<ConnectionType>(ConnectionType.Local) &&
      c.flow_type = FlowType.Xdata &&
      c.data_encrypted = mk_some<Bool>(true) &&
      c.authenticated = mk_some<Bool>(true) &&
      c.source = some (src: ConnectionEnd) {
        src.kind = ConnectionEndKind.SubcomponentCE &&
        src.subcomponent_port = some (sp: CompInstPort) {
          sp.subcomponent = imp.subcomponents.element[5] &&
          sp.port = m.component_types.element[5].ports.element[2]
        }
      } &&
      c.destination = some (dst: ConnectionEnd) {
        dst.kind = ConnectionEndKind.SubcomponentCE &&
        dst.subcomponent_port = some (sp: CompInstPort) {
          sp.subcomponent = imp.subcomponents.element[6] &&
          sp.port = m.component_types.element[13].ports.element[2]
        }
      }
    } &&
    imp.connections.element[43] = some (c: Connection) {
      c.name = "ethernet30_C" &&
      c.conn_type = mk_some<ConnectionType>(ConnectionType.Local) &&
      c.flow_type = FlowType.Xdata &&
      c.data_encrypted = mk_some<Bool>(true) &&
      c.authenticated = mk_some<Bool>(true) &&
      c.source = some (src: ConnectionEnd) {
        src.kind = ConnectionEndKind.SubcomponentCE &&
        src.subcomponent_port = some (sp: CompInstPort) {
          sp.subcomponent = imp.subcomponents.element[5] &&
          sp.port = m.component_types.element[5].ports.element[3]
        }
      } &&
      c.destination = some (dst: ConnectionEnd) {
        dst.kind = ConnectionEndKind.SubcomponentCE &&
        dst.subcomponent_port = some (sp: CompInstPort) {
          sp.subcomponent = imp.subcomponents.element[6] &&
          sp.port = m.component_types.element[13].ports.element[5]
        }
      }
    }
  }}
};
