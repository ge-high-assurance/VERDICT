/*
 * generated by Xtext
 */
package com.ge.research.osate.verdict.dsl.formatting2;

import com.ge.research.osate.verdict.dsl.services.VerdictGrammarAccess;
import com.ge.research.osate.verdict.dsl.verdict.CyberRel;
import com.ge.research.osate.verdict.dsl.verdict.CyberRelInputLogic;
import com.ge.research.osate.verdict.dsl.verdict.CyberRelOutputLogic;
import com.ge.research.osate.verdict.dsl.verdict.CyberReq;
import com.ge.research.osate.verdict.dsl.verdict.CyberReqConditionLogic;
import com.ge.research.osate.verdict.dsl.verdict.LAnd;
import com.ge.research.osate.verdict.dsl.verdict.LExpr;
import com.ge.research.osate.verdict.dsl.verdict.LNot;
import com.ge.research.osate.verdict.dsl.verdict.LOr;
import com.ge.research.osate.verdict.dsl.verdict.Verdict;
import com.ge.research.osate.verdict.dsl.verdict.VerdictContractSubclause;
import com.google.inject.Inject;
import org.eclipse.xtext.formatting2.IFormattableDocument;
import org.osate.xtext.aadl2.properties.formatting2.PropertiesFormatter;
import com.ge.research.osate.verdict.dsl.verdict.LPort
import org.eclipse.xtext.Keyword
import org.eclipse.xtext.Alternatives
import com.ge.research.osate.verdict.dsl.verdict.VerdictContractLibrary
import com.ge.research.osate.verdict.dsl.verdict.VerdictThreatModels
import com.ge.research.osate.verdict.dsl.verdict.ThreatModel
import com.ge.research.osate.verdict.dsl.verdict.Intro
import com.ge.research.osate.verdict.dsl.verdict.ThreatExpr
import com.ge.research.osate.verdict.dsl.verdict.ThreatOr
import com.ge.research.osate.verdict.dsl.verdict.ThreatAnd
import com.ge.research.osate.verdict.dsl.verdict.ThreatNot
import com.ge.research.osate.verdict.dsl.verdict.Forall
import com.ge.research.osate.verdict.dsl.verdict.Exists
import com.ge.research.osate.verdict.dsl.verdict.Implies
import com.ge.research.osate.verdict.dsl.verdict.ThreatEqualContains
import com.ge.research.osate.verdict.dsl.verdict.Var
import com.ge.research.osate.verdict.dsl.verdict.CyberMission
import com.ge.research.osate.verdict.dsl.verdict.ThreatDatabase
import com.ge.research.osate.verdict.dsl.verdict.ThreatDefense

/**
 * This class performs formatting.
 * 
 * Invoked when the user pressed Ctrl+Shift+F.
 * 
 * Also used by the serializer/pretty-printer, which is used
 * by the Verdict annex wizard.
 * 
 * This file is written in Xtend because it turned out to be worthwhile.
 */
class VerdictFormatter extends PropertiesFormatter {
	/**
	 * Insert a newline and then an indentation.
	 * Use like this: setSpace(NEWLINE_INDENT)
	 */
	val NEWLINE_INDENT = System.lineSeparator + "\t"
	
	@Inject extension VerdictGrammarAccess

	def dispatch void format(VerdictContractSubclause verdictcontractsubclause, extension IFormattableDocument document) {
		verdictcontractsubclause.surround[noSpace]
		format(verdictcontractsubclause.getContract, document);
	}

	def dispatch void format(Verdict verdict, extension IFormattableDocument document) {
		verdict.getElements.forEach[
			elem, i |
			if (i != 0) elem.prepend[setNewLines(1, 1, 2)];
			elem.regionFor.ruleCall(statementAccess.DELIMETER_OPTParserRuleCall_1).prepend[noSpace]
			format(elem, document)
		]
	}

	def dispatch void format(CyberReq cyberreq, extension IFormattableDocument document) {
		// "CyberReq"
		cyberreq.regionFor.keyword(cyberReqAccess.cyberReqKeyword_0).append[oneSpace]
		
		// "="
		cyberreq.regionFor.keyword(cyberReqBlockAccess.equalsSignKeyword_1_0_1).surround[oneSpace]
		cyberreq.regionFor.keyword(cyberReqBlockAccess.equalsSignKeyword_1_1_1).surround[oneSpace]
		cyberreq.regionFor.keyword(cyberReqBlockAccess.equalsSignKeyword_1_2_1).surround[oneSpace]
		cyberreq.regionFor.keyword(cyberReqBlockAccess.equalsSignKeyword_1_3_1).surround[oneSpace]
		cyberreq.regionFor.keyword(cyberReqBlockAccess.equalsSignKeyword_1_4_1).surround[oneSpace]
		
		// ";"
		cyberreq.regionFor.ruleCall(cyberReqBlockAccess.DELIMETER_OPTParserRuleCall_1_0_3).prepend[noSpace]
		cyberreq.regionFor.ruleCall(cyberReqBlockAccess.DELIMETER_OPTParserRuleCall_1_1_3).prepend[noSpace]
		cyberreq.regionFor.ruleCall(cyberReqBlockAccess.DELIMETER_OPTParserRuleCall_1_2_3).prepend[noSpace]
		cyberreq.regionFor.ruleCall(cyberReqBlockAccess.DELIMETER_OPTParserRuleCall_1_3_3).prepend[noSpace]
		cyberreq.regionFor.ruleCall(cyberReqBlockAccess.DELIMETER_OPTParserRuleCall_1_4_3).prepend[noSpace]
		
		// "id", etc.
		cyberreq.regionFor.keyword(cyberReqBlockAccess.idKeyword_1_0_0).prepend[setSpace(NEWLINE_INDENT)]
		cyberreq.regionFor.keyword(cyberReqBlockAccess.ciaKeyword_1_1_0).prepend[setSpace(NEWLINE_INDENT)]
		cyberreq.regionFor.keyword(cyberReqBlockAccess.conditionKeyword_1_3_0).prepend[setSpace(NEWLINE_INDENT)]
		cyberreq.regionFor.keyword(cyberReqBlockAccess.severityKeyword_1_2_0).prepend[setSpace(NEWLINE_INDENT)]
		cyberreq.regionFor.keyword(cyberReqBlockAccess.commentKeyword_1_4_0).prepend[setSpace(NEWLINE_INDENT)]
		cyberreq.regionFor.keyword(cyberReqBlockAccess.descriptionKeyword_1_5_0).prepend[setSpace(NEWLINE_INDENT)]
		
		// "}"
		cyberreq.regionFor.keyword(cyberReqBlockAccess.rightCurlyBracketKeyword_2).prepend[newLine]
		
		format(cyberreq.getCondition(), document);
	}

	def dispatch void format(CyberRel cyberrel, extension IFormattableDocument document) {
		// "CyberRel"
		cyberrel.regionFor.keyword(cyberRelAccess.cyberRelKeyword_0).append[oneSpace]
		
		// "=", "=>', "->"
		cyberrel.regionFor.keyword(cyberRelShortAccess.equalsSignKeyword_1_0).surround[oneSpace]
		cyberrel.regionFor.keywords(altKws(cyberRelShortAccess.alternatives_2)).forEach[surround[oneSpace]]
		
		// "="
		cyberrel.regionFor.keyword(cyberRelBlockAccess.equalsSignKeyword_1_0_1).surround[oneSpace]
		cyberrel.regionFor.keyword(cyberRelBlockAccess.equalsSignKeyword_1_1_1).surround[oneSpace]
		cyberrel.regionFor.keyword(cyberRelBlockAccess.equalsSignKeyword_1_2_1).surround[oneSpace]
		cyberrel.regionFor.keyword(cyberRelBlockAccess.equalsSignKeyword_1_3_1).surround[oneSpace]
		
		// ";"
		cyberrel.regionFor.ruleCall(cyberRelBlockAccess.DELIMETER_OPTParserRuleCall_1_0_3).prepend[noSpace]
		cyberrel.regionFor.ruleCall(cyberRelBlockAccess.DELIMETER_OPTParserRuleCall_1_1_3).prepend[noSpace]
		cyberrel.regionFor.ruleCall(cyberRelBlockAccess.DELIMETER_OPTParserRuleCall_1_2_3).prepend[noSpace]
		cyberrel.regionFor.ruleCall(cyberRelBlockAccess.DELIMETER_OPTParserRuleCall_1_3_3).prepend[noSpace]
		
		// "id", etc.
		cyberrel.regionFor.keyword(cyberRelBlockAccess.idKeyword_1_0_0).prepend[setSpace(NEWLINE_INDENT)]
		cyberrel.regionFor.keyword(cyberRelBlockAccess.inputsKeyword_1_2_0).prepend[setSpace(NEWLINE_INDENT)]
		cyberrel.regionFor.keyword(cyberRelBlockAccess.outputKeyword_1_1_0).prepend[setSpace(NEWLINE_INDENT)]
		cyberrel.regionFor.keyword(cyberRelBlockAccess.commentKeyword_1_3_0).prepend[setSpace(NEWLINE_INDENT)]
		cyberrel.regionFor.keyword(cyberRelBlockAccess.descriptionKeyword_1_4_0).prepend[setSpace(NEWLINE_INDENT)]
		
		// "}"
		cyberrel.regionFor.keyword(cyberRelBlockAccess.rightCurlyBracketKeyword_2).prepend[newLine]
		
		format(cyberrel.getOutput(), document);
		format(cyberrel.getInputs(), document);
	}
	
	def dispatch void format(CyberMission mission, extension IFormattableDocument document) {
		// "MissionReq"
		mission.regionFor.keyword(cyberMissionAccess.missionReqKeyword_0).append[oneSpace]
		
		// "="
		mission.regionFor.keyword(cyberMissionBlockAccess.equalsSignKeyword_1_0_1).surround[oneSpace]
		mission.regionFor.keyword(cyberMissionBlockAccess.equalsSignKeyword_1_1_1).surround[oneSpace]
		mission.regionFor.keyword(cyberMissionBlockAccess.equalsSignKeyword_1_2_1).surround[oneSpace]
		mission.regionFor.keyword(cyberMissionBlockAccess.equalsSignKeyword_1_3_1).surround[oneSpace]
		
		// ","
		mission.regionFor.keyword(cyberMissionBlockAccess.commaKeyword_1_1_3_0).prepend[noSpace]
		mission.regionFor.keyword(cyberMissionBlockAccess.commaKeyword_1_1_3_0).append[oneSpace]
		
		// ";"
		mission.regionFor.ruleCall(cyberMissionBlockAccess.DELIMETER_OPTParserRuleCall_1_0_3).prepend[noSpace]
		mission.regionFor.ruleCall(cyberMissionBlockAccess.DELIMETER_OPTParserRuleCall_1_1_4).prepend[noSpace]
		mission.regionFor.ruleCall(cyberMissionBlockAccess.DELIMETER_OPTParserRuleCall_1_2_3).prepend[noSpace]
		mission.regionFor.ruleCall(cyberMissionBlockAccess.DELIMETER_OPTParserRuleCall_1_3_3).prepend[noSpace]
		
		// "id", etc.
		mission.regionFor.keyword(cyberMissionBlockAccess.idKeyword_1_0_0).prepend[setSpace(NEWLINE_INDENT)]
		mission.regionFor.keyword(cyberMissionBlockAccess.reqsKeyword_1_1_0).prepend[setSpace(NEWLINE_INDENT)]
		mission.regionFor.keyword(cyberMissionBlockAccess.commentKeyword_1_3_0).prepend[setSpace(NEWLINE_INDENT)]
		mission.regionFor.keyword(cyberMissionBlockAccess.descriptionKeyword_1_2_0).prepend[setSpace(NEWLINE_INDENT)]
		
		// "}"
		mission.regionFor.keyword(cyberMissionBlockAccess.rightCurlyBracketKeyword_2).prepend[newLine]
	}

	def dispatch void format(CyberReqConditionLogic cyberreqconditionlogic, extension IFormattableDocument document) {
		format(cyberreqconditionlogic.getValue(), document);
	}

	def dispatch void format(CyberRelInputLogic cyberrelinputlogic, extension IFormattableDocument document) {
		format(cyberrelinputlogic.getValue(), document);
	}

	def dispatch void format(CyberRelOutputLogic cyberreloutputlogic, extension IFormattableDocument document) {
		format(cyberreloutputlogic.getValue(), document);
	}

	def dispatch void format(LOr lor, extension IFormattableDocument document) {
		// Parentheses
		lor.regionFor.keyword(LExprTermAccess.leftParenthesisKeyword_2_0).append[noSpace]
		lor.regionFor.keyword(LExprTermAccess.rightParenthesisKeyword_2_2).prepend[noSpace]
		lor.regionFor.keyword(LExprTermAccess.leftSquareBracketKeyword_4_0).append[noSpace]
		lor.regionFor.keyword(LExprTermAccess.rightSquareBracketKeyword_4_2).prepend[noSpace]
		lor.regionFor.keyword(LExprTermAccess.leftCurlyBracketKeyword_3_0).append[noSpace]
		lor.regionFor.keyword(LExprTermAccess.rightCurlyBracketKeyword_3_2).prepend[noSpace]
		
		// "or"
		lor.regionFor.ruleCall(LOrAccess.ORParserRuleCall_1_0).surround[oneSpace]
		
		for (LAnd exprs : lor.getExprs()) {
			format(exprs, document);
		}
	}

	def dispatch void format(LAnd land, extension IFormattableDocument document) {
		// "and"
		land.regionFor.ruleCall(LAndAccess.ANDParserRuleCall_1_0).surround[oneSpace]
		
		for (LExpr exprs : land.getExprs()) {
			format(exprs, document);
		}
	}

	def dispatch void format(LNot lnot, extension IFormattableDocument document) {
		// "not"
		lnot.regionFor.ruleCall(LNotAccess.NOTParserRuleCall_0).append[oneSpace]
		
		format(lnot.getExpr(), document);
	}
	
	def dispatch void format(LPort lport, extension IFormattableDocument document) {
		// ":"
		lport.regionFor.keyword(LPortAccess.colonKeyword_1).surround[noSpace]
	}
	
	def dispatch void format(VerdictContractLibrary library, extension IFormattableDocument document) {
		library.surround[noSpace]
		format(library.getContract, document)
	}
	
	def dispatch void format(VerdictThreatModels threatModels, extension IFormattableDocument document) {
		threatModels.getStatements.forEach[
			threatStatement, i |
			if (i != 0) threatStatement.prepend[setNewLines(1, 1, 2)];
			threatStatement.regionFor.ruleCall(threatStatementAccess.DELIMETER_OPTParserRuleCall_1).prepend[noSpace]
			format(threatStatement, document)
		]
	}
	
	def dispatch void format(ThreatModel threat, extension IFormattableDocument document) {
		// "ThreatEffectModel"
		threat.regionFor.keyword(threatModelAccess.threatEffectKeyword_0).append[oneSpace]
		
		// "="
		threat.regionFor.keyword(threatModelBlockAccess.equalsSignKeyword_1_0_1).surround[oneSpace]
		threat.regionFor.keyword(threatModelBlockAccess.equalsSignKeyword_1_1_1).surround[oneSpace]
		threat.regionFor.keyword(threatModelBlockAccess.equalsSignKeyword_1_2_1).surround[oneSpace]
		threat.regionFor.keyword(threatModelBlockAccess.equalsSignKeyword_1_3_1).surround[oneSpace]
		threat.regionFor.keyword(threatModelBlockAccess.equalsSignKeyword_1_4_1).surround[oneSpace]
		threat.regionFor.keyword(threatModelBlockAccess.equalsSignKeyword_1_5_1).surround[oneSpace]
		threat.regionFor.keyword(threatModelBlockAccess.equalsSignKeyword_1_6_1).surround[oneSpace]
		
		// ","
		threat.regionFor.keyword(threatModelBlockAccess.commaKeyword_1_4_3_0).prepend[noSpace]
		threat.regionFor.keyword(threatModelBlockAccess.commaKeyword_1_4_3_0).append[oneSpace]
		
		// ";"
		threat.regionFor.ruleCall(threatModelBlockAccess.DELIMETER_OPTParserRuleCall_1_0_3).prepend[noSpace]
		threat.regionFor.ruleCall(threatModelBlockAccess.DELIMETER_OPTParserRuleCall_1_1_7).prepend[noSpace]
		threat.regionFor.ruleCall(threatModelBlockAccess.DELIMETER_OPTParserRuleCall_1_2_3).prepend[noSpace]
		threat.regionFor.ruleCall(threatModelBlockAccess.DELIMETER_OPTParserRuleCall_1_3_3).prepend[noSpace]
		threat.regionFor.ruleCall(threatModelBlockAccess.DELIMETER_OPTParserRuleCall_1_4_4).prepend[noSpace]
		threat.regionFor.ruleCall(threatModelBlockAccess.DELIMETER_OPTParserRuleCall_1_5_3).prepend[noSpace]
		threat.regionFor.ruleCall(threatModelBlockAccess.DELIMETER_OPTParserRuleCall_1_6_3).prepend[noSpace]
		
		// "id", etc.
		threat.regionFor.keyword(threatModelBlockAccess.idKeyword_1_0_0).prepend[setSpace(NEWLINE_INDENT)]
		threat.regionFor.keyword(threatModelBlockAccess.entitiesKeyword_1_1_0).prepend[setSpace(NEWLINE_INDENT)]
		threat.regionFor.keyword(threatModelBlockAccess.assumptionsKeyword_1_4_0).prepend[setSpace(NEWLINE_INDENT)]
		threat.regionFor.keyword(threatModelBlockAccess.ciaKeyword_1_2_0).prepend[setSpace(NEWLINE_INDENT)]
		threat.regionFor.keyword(threatModelBlockAccess.descriptionKeyword_1_5_0).prepend[setSpace(NEWLINE_INDENT)]
		threat.regionFor.keyword(threatModelBlockAccess.commentKeyword_1_6_0).prepend[setSpace(NEWLINE_INDENT)]
		threat.regionFor.keyword(threatModelBlockAccess.referenceKeyword_1_3_0).prepend[setSpace(NEWLINE_INDENT)]
		
		// "{" "|" "}"
		threat.regionFor.keyword(threatModelBlockAccess.leftCurlyBracketKeyword_1_1_2).surround[oneSpace]
		threat.regionFor.keyword(threatModelBlockAccess.verticalLineKeyword_1_1_4).surround[oneSpace]
		threat.regionFor.keyword(threatModelBlockAccess.rightCurlyBracketKeyword_1_1_6).prepend[oneSpace]
		
		// "}"
		threat.regionFor.keyword(threatModelBlockAccess.rightCurlyBracketKeyword_2).prepend[newLine]
		
		format(threat.intro, document)
		format(threat.expr, document)
	}
	
	def dispatch void format(ThreatDefense defense, extension IFormattableDocument document) {
		// "ThreatDefense"
		defense.regionFor.keyword(threatDefenseAccess.threatDefenseKeyword_0).append[oneSpace]
		
		// "="
		defense.regionFor.keyword(threatDefenseBlockAccess.equalsSignKeyword_1_0_1).surround[oneSpace]
		defense.regionFor.keyword(threatDefenseBlockAccess.equalsSignKeyword_1_1_1).surround[oneSpace]
		defense.regionFor.keyword(threatDefenseBlockAccess.equalsSignKeyword_1_2_1).surround[oneSpace]
		defense.regionFor.keyword(threatDefenseBlockAccess.equalsSignKeyword_1_3_1).surround[oneSpace]
		
		// ","
		defense.regionFor.keyword(threatDefenseBlockAccess.commaKeyword_1_1_3_0).prepend[noSpace]
		defense.regionFor.keyword(threatDefenseBlockAccess.commaKeyword_1_1_3_0).append[oneSpace]
		
		// ";"
		defense.regionFor.ruleCall(threatDefenseBlockAccess.DELIMETER_OPTParserRuleCall_1_0_3).prepend[noSpace]
		defense.regionFor.ruleCall(threatDefenseBlockAccess.DELIMETER_OPTParserRuleCall_1_1_4).prepend[noSpace]
		defense.regionFor.ruleCall(threatDefenseBlockAccess.DELIMETER_OPTParserRuleCall_1_2_3).prepend[noSpace]
		defense.regionFor.ruleCall(threatDefenseBlockAccess.DELIMETER_OPTParserRuleCall_1_3_3).prepend[noSpace]
		
		// "id", etc.
		defense.regionFor.keyword(threatDefenseBlockAccess.idKeyword_1_0_0).prepend[setSpace(NEWLINE_INDENT)]
		defense.regionFor.keyword(threatDefenseBlockAccess.threatsKeyword_1_1_0).prepend[setSpace(NEWLINE_INDENT)]
		defense.regionFor.keyword(threatDefenseBlockAccess.descriptionKeyword_1_3_0).prepend[setSpace(NEWLINE_INDENT)]
		defense.regionFor.keyword(threatDefenseBlockAccess.commentKeyword_1_4_0).prepend[setSpace(NEWLINE_INDENT)]
		
		// "}"
		defense.regionFor.keyword(threatDefenseBlockAccess.rightCurlyBracketKeyword_2).prepend[newLine]
	}
	
	def dispatch void format(ThreatDatabase database, extension IFormattableDocument document) {
		// "ThreatDatabase"
		database.regionFor.keyword(threatDatabaseAccess.threatDatabaseKeyword_0).append[oneSpace]
	}
	
	def dispatch void format(Intro intro, extension IFormattableDocument document) {
		intro.regionFor.keyword(introAccess.colonKeyword_1).surround[noSpace]
	}
	
	def dispatch void format(ThreatExpr expr, extension IFormattableDocument document) {
		// Parentheses TODO not working
		expr.regionFor.keyword(threatExprTermAccess.leftParenthesisKeyword_2_0).append[noSpace]
		expr.regionFor.keyword(threatExprTermAccess.rightParenthesisKeyword_2_2).prepend[noSpace]
		expr.regionFor.keyword(threatExprTermAccess.leftSquareBracketKeyword_3_0).append[noSpace]
		expr.regionFor.keyword(threatExprTermAccess.rightSquareBracketKeyword_3_2).prepend[noSpace]
		expr.regionFor.keyword(threatExprTermAccess.leftCurlyBracketKeyword_4_0).append[noSpace]
		expr.regionFor.keyword(threatExprTermAccess.rightCurlyBracketKeyword_4_2).prepend[noSpace]
	}
	
	def dispatch void format(ThreatOr or, extension IFormattableDocument document) {
		// "or"
		or.regionFor.ruleCall(threatOrAccess.ORParserRuleCall_1_0).surround[oneSpace]
		
		for (ThreatAnd expr : or.getExprs()) {
			format(expr, document);
		}
	}
	
	def dispatch void format(ThreatAnd and, extension IFormattableDocument document) {
		// "and"
		and.regionFor.ruleCall(threatAndAccess.ANDParserRuleCall_1_0).surround[oneSpace]
		
		for (ThreatExpr expr : and.getExprs()) {
			format(expr, document);
		}
	}
	
	def dispatch void format(ThreatNot not, extension IFormattableDocument document) {
		// "not"
		not.regionFor.ruleCall(threatNotAccess.NOTParserRuleCall_0).append[oneSpace]
		
		format(not.expr, document)
	}
	
	def dispatch void format(ThreatEqualContains equal, extension IFormattableDocument document) {
		// "="
		equal.regionFor.keyword(threatEqualContainsAccess.equalEqualsSignKeyword_1_0_0).surround[noSpace]
		// "in"
		equal.regionFor.keyword(threatEqualContainsAccess.containsContainsKeyword_1_1_0).surround[oneSpace]
		
		format(equal.left, document)
		format(equal.right, document)
	}
	
	def dispatch void format(Var v, extension IFormattableDocument document) {
		// "."
		v.regionFor.keyword(varAccess.fullStopKeyword_0_1_0).surround[noSpace]
	}
	
	def dispatch void format(Forall forall, extension IFormattableDocument document) {
		// "Forall"
		forall.regionFor.keyword(forallAccess.forallKeyword_0).append[oneSpace]
		// ","
		forall.regionFor.keyword(forallAccess.commaKeyword_2).prepend[noSpace]
		forall.regionFor.keyword(forallAccess.commaKeyword_2).append[oneSpace]
		
		format(forall.intro, document)
		format(forall.expr, document)
	}
	
	def dispatch void format(Exists exists, extension IFormattableDocument document) {
		// "Exists"
		exists.regionFor.keyword(existsAccess.existsKeyword_0).append[oneSpace]
		// ","
		exists.regionFor.keyword(existsAccess.commaKeyword_2).prepend[noSpace]
		exists.regionFor.keyword(existsAccess.commaKeyword_2).append[oneSpace]
		
		format(exists.intro, document)
		format(exists.expr, document)
	}
	
	def dispatch void format(Implies implies, extension IFormattableDocument document) {
		// "=>"
		implies.regionFor.keyword(impliesAccess.equalsSignGreaterThanSignKeyword_1_0_0).surround[oneSpace]
		// "->"
		implies.regionFor.keyword(impliesAccess.hyphenMinusGreaterThanSignKeyword_1_0_1).surround[oneSpace]
		
		format(implies.antecedent, document)
		format(implies.consequent, document) // might be null, but that's OK
	}
	
	/**
	 * Perform an action for multiple alternatives (e.g. "=>" and "->")
	 * This isn't actually necessary... but it is cool.
	 */
	def Keyword[] altKws(Alternatives alternatives) {
		alternatives.eContents.map[alt | alt as Keyword]
	}
}
